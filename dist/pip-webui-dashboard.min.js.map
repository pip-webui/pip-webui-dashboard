{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/add_tile_dialog/AddTileDialogController.ts","src/add_tile_dialog/AddTileProvider.ts","src/add_tile_dialog/index.ts","src/calendar_tile/CalendarTile.ts","src/common_tile/Tile.ts","src/config_tile_dialog/ConfigDialogController.ts","src/config_tile_dialog/ConfigDialogExtendComponent.ts","src/config_tile_dialog/ConfigDialogService.ts","src/config_tile_dialog/index.ts","src/dashboard/Dashboard.ts","src/draggable/Draggable.ts","src/draggable/DraggableTileService.ts","src/event_tile/EventTile.ts","src/index.ts","src/menu_tile/MenuTileDirective.ts","src/menu_tile/MenuTileService.ts","src/menu_tile/index.ts","src/note_tile/NoteTile.ts","src/picture_slider_tile/PictureSliderTile.ts","src/position_tile/PositionTile.ts","src/statistics_tile/StatisticsTile.ts","src/tile_group/TileGroupDirective.ts","src/tile_group/TileGroupService.ts","src/tile_group/index.ts","src/utility/TileTemplateUtility.ts","temp/pip-webui-dashboard-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","dashboard","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","AddTileDialog","AddTileDialogController","groups","activeGroupIndex","widgetList","$mdDialog","totalTiles","_","isNumber","defaultTiles","cloneDeep","map","group","prototype","add","hide","groupIndex","widgets","cancel","encrease","widgetIndex","widget","amount","decrease","AddTileDialogController_1","setTranslations","$injector","pipTranslate","has","get","DASHBOARD_ADD_TILE_DIALOG_TITLE","DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS","DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP","$inject","AddTileDialogService_1","show","_this","templateUrl","bindToController","controller","controllerAs","clickOutsideToClose","AddTileDialogProvider","_widgetList","configWidgetList","list","$get","_service","config","provider","Object","defineProperty","value","MenuTileService_1","CalendarTileController","_super","pipTileConfigDialogService","options","menu","union","push","title","onConfigClick","date","Date","color","__extends","dialogClass","size","extensionUrl","result","changeSize","MenuTileService","CalendarTile","component","DashboardTile","TileColors","all","TileSizes","name","id","TileConfigDialogController","params","colors","sizes","sizeId","angular","extend","colSpan","rowSpan","onCancel","onApply","updatedData","sizeX","Number","substr","sizeY","7","TileConfigExtendComponentBindings","pipExtensionUrl","pipDialogScope","pipApply","TileConfigExtendComponentChanges","TileConfigExtendComponentController","$templateRequest","$compile","$scope","$element","$attrs","$onChanges","changes","currentValue","then","html","find","replaceWith","pipTileConfigComponent","bindings","ConfigDialogController_1","DASHBOARD_TILE_CONFIG_DIALOG_TITLE","DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL","DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE","DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE","TileConfigDialogService","successCallback","cancelCallback","targetEvent","event","locals","key","9","./ConfigDialogExtendComponent","./ConfigDialogService","10","DROP_TO_CREATE_NEW_GROUP","pipAddTileDialogProvider","icon","configureAvailableWidgets","DEFAULT_GRID_OPTIONS_1","draggableOptions","tileWidth","DashboardController","$rootScope","$timeout","$interpolate","pipAddTileDialog","pipTileTemplate","defaultGroupMenuActions","callback","addComponent","removeGroup","console","log","_includeTpl","groupMenuActions","groupedWidgets","splice","addClass","draggableGridOptions","gridOptions","inline","groupAdditionalActions","widgetsContext","compileWidgets","removedWidgets","source","index","click","item","object","removeWidget","opts","template","getTemplate","data","activeGroup","addWidgets","widgetGroup","forEach","Array","apply","type","Dashboard","11","DraggableTileService_1","TileGroupService_1","DEFAULT_TILE_WIDTH","DEFAULT_TILE_HEIGHT","UPDATE_GROUPS_EVENT","SIMPLE_LAYOUT_COLUMNS_COUNT","DEFAULT_OPTIONS","tileHeight","gutter","DraggableController","pipDragTile","pipTilesGrid","pipMedia","sourceDropZoneElem","isSameDropzone","merge","breakpoints","xs","tilesTemplates","tile","tileScope","createTileScope","IDragTileConstructor","DragTileService","tpl","$watch","newVal","watch","debounce","getContainerWidth","getAvailableColumns","availableWidth","tileGroups","setAvailableColumns","availableColumns","generateGrid","getSingleTileWidthForMobile","setTilesDimensions","calcContainerHeight","$postLink","$container","prevVal","changedGroupIndex","addGroup","removeGroups","groupWidgetDiff","newTiles","slice","each","addTilesIntoGroup","groupsContainers","updateTilesGroups","removeTiles","updateTilesOptions","onTitleClick","editingName","oldTitle","clone","$","currentTarget","children","focus","cancelEditing","onBlurTitleInput","$broadcast","onKyepressTitleInput","keyCode","updateTilesTemplates","updateType","_a","fromIndex","from","elem","attributes","toIndex","to","tileOptions","fromTileIndex","reIndexTiles","$new","tilesContext","undefined","indexes","container","tiles","remove","gIndex","child","element","scope","newGroups","removeIndexes","remain","containers","findIndex","reverse","sourceGroup","$$phase","$apply","document","querySelectorAll","groupContaninerSelector","ITilesGridConstructor","TilesGridService","groupContainer","newTile","addTile","append","getCompiledTemplate","appendTo","optionsGroup","optionGroup","updateTileOptions","initTilesGroups","onlyPosition","draggedTile","width","mobileBreakpoint","Math","floor","getActiveGroupAndTile","foundTile","getTileByNode","active","onDragStartListener","activeEntities","target","parent","activeDraggedGroup","startDrag","onDragMoveListener","x","parseFloat","style","left","dx","y","top","dy","containerOffset","getContainerOffset","belowElement","getTileByCoordinates","pageX","pageY","getTileIndex","draggedTileIndex","belowElemIndex","swapTiles","setGroupContainersHeight","onDragEndListener","stopDrag","removeClass","containerRect","getBoundingClientRect","tileGroup","moveTile","movedTile","removeTile","getElem","bind","onDropListener","droppedGroupIndex","droppedGroup","onDropToFictGroupListener","onDropEnterListener","dragEvent","dragEnter","classList","css","onDropDeactivateListener","activeDropzoneClass","onDropLeaveListener","initialize","draggable","enabled","speed","onstart","onmove","onend","dropzone","ondrop","ondragenter","ondropdeactivate","ondragleave","on","interact","trigger","DragComponent","../tile_group/TileGroupService","./DraggableTileService","12","constructor","DEFAULT_TILE_SIZE","getSize","setSize","height","setPosition","updateElem","preview","position","zIndex","after","isAnimate","onTransitionEnd","off","setPreviewPosition","coords","getOptions","setOptions","__","d","extendStatics","b","create","EventTileController","opacity","is","drawImage","image","onImageLoad","text","onOpacitytest","_oldOpacity","setImageMarginCSS","containerWidth","clientWidth","containerHeight","clientHeight","imageWidth","naturalWidth","imageHeight","naturalHeight","margin","cssParams","EventTile","../menu_tile/MenuTileService","15","./calendar_tile/CalendarTile","./common_tile/Tile","./config_tile_dialog","./dashboard/Dashboard","./draggable","./event_tile/EventTile","./menu_tile","./note_tile/NoteTile","./picture_slider_tile/PictureSliderTile","./position_tile/PositionTile","./statistics_tile/StatisticsTile","./tile_group/index","./utility/TileTemplateUtility","16","TileMenu","restrict","noop","action","callAction","actionName","MenuTileProvider","../common_tile/Tile","18","__export","m","p","hasOwnProperty","NoteTileController","NoteTile","PictureSliderController","animationInterval","animationType","$event","PictureSliderTile","PositionTileController","pipLocationEditDialog","showPosition","openLocationEditDialog","location","reDrawPosition","locationName","hideColors","locationPos","newPosition","locatioName","PositionTile","StatisticsTileController","reset","chartSize","SMALL_CHART_1","_$timeout","setChartSize","BIG_CHART_1","StatisticsTile","23","DraggableTileLink","$elem","$attr","wrapComponent","docFrag","createDocumentFragment","$eval","pipDraggableTiles","appendChild","DraggableTiles","link","directive","24","columns","gridCells","isMobileLayout","MOBILE_LAYOUT_COLUMNS","getCellByPosition","row","col","getCells","prevCell","getAvailableCellsMobile","getAvailableCellsDesktop","leftCornerCell","basicCol","basicRow","getBasicRow","gridCopy","getCell","rowShift","prevTileSize","rightCornerCell","isCellFree","start","end","src","cell","getCellIndex","srcCell","rowIndex","reserveCells","clearElements","singleTileWidth","newCellCount","colsInRow","rows","gridInRow","offset","bottom","right","querySelector","srcTiles","tileSize","generateCells","currIndex","startCell","cells","maxHeightSize","maxWidthSize","maxBy","node","filter","beforeTile","movedTileIndex","beforeTileIndex","droppedTile","25","./TileGroupService","26","tileTemplateService","_$interpolate","_$compile","_$templateRequest","strictCompile","interpolated","$parse","attrs","pipImageLoad","ImageLoad","service","27","run","$templateCache","put"],"mappings":"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","file":"pip-webui-dashboard.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export class AddTileDialog {\n    title: string;\n    icon: string;\n    name: string;\n    amount: number;\n}\n\nexport class AddTileDialogController implements ng.IController {\n    public defaultTiles: [AddTileDialog[]];\n    public groups: any;\n    public totalTiles: number = 0;\n\n    constructor(\n        groups: any,\n        public activeGroupIndex: number,\n        widgetList: [AddTileDialog[]],\n        public $mdDialog: angular.material.IDialogService\n    ) {\n        this.activeGroupIndex = _.isNumber(activeGroupIndex) ? activeGroupIndex : -1;\n        this.defaultTiles = _.cloneDeep(widgetList);\n        this.groups = _.map(groups, function (group) {\n            return group['title'];\n        });\n    }\n\n    public add() {\n        this.$mdDialog.hide({\n            groupIndex: this.activeGroupIndex,\n            widgets: this.defaultTiles\n        });\n    };\n\n    public cancel() {\n        this.$mdDialog.cancel();\n    };\n\n    public encrease(groupIndex: number, widgetIndex: number) {\n        const widget = this.defaultTiles[groupIndex][widgetIndex];\n        widget.amount++;\n        this.totalTiles++;\n    };\n\n    public decrease(groupIndex: number, widgetIndex: number) {\n        const widget = this.defaultTiles[groupIndex][widgetIndex];\n        widget.amount = widget.amount ? widget.amount - 1 : 0;\n        this.totalTiles = this.totalTiles ? this.totalTiles - 1 : 0;\n    };\n}","import {\n  AddTileDialog,\n  AddTileDialogController\n} from './AddTileDialogController';\n\nexport interface IAddTileDialogService {\n  show(groups, activeGroupIndex): angular.IPromise < any > ;\n}\n\nexport interface IAddTileDialogprovider {\n  configWidgetList(list: [AddTileDialog[]]): void;\n}\n\n{\n  const setTranslations = function($injector: ng.auto.IInjectorService) {\n    const pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\n    if (pipTranslate) {\n      (<any>pipTranslate).setTranslations('en', {\n        DASHBOARD_ADD_TILE_DIALOG_TITLE: 'Add component',\n        DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS: 'Use \"Enter\" or \"+\" buttons on keyboard to encrease and \"Delete\" or \"-\" to decrease tiles amount',\n        DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP: 'Create new group'\n      });\n      (<any>pipTranslate).setTranslations('ru', {\n        DASHBOARD_ADD_TILE_DIALOG_TITLE: 'Добавить компонент',\n        DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS: 'Используйте \"Enter\" или \"+\" клавиши на клавиатуре чтобы увеличить и \"Delete\" or \"-\" чтобы уменшить количество тайлов',\n        DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP: 'Создать новую группу'\n      });\n    }\n  }\n\n  class AddTileDialogService implements IAddTileDialogService {\n    public constructor(\n      private widgetList: [AddTileDialog[]],\n      private $mdDialog: angular.material.IDialogService\n    ) {}\n\n    public show(groups, activeGroupIndex) {\n      return this.$mdDialog\n        .show({\n          templateUrl: 'add_tile_dialog/AddTile.html',\n          bindToController: true,\n          controller: AddTileDialogController,\n          controllerAs: 'dialogCtrl',\n          clickOutsideToClose: true,\n          resolve: {\n            groups: () => {\n              return groups;\n            },\n            activeGroupIndex: () => {\n              return activeGroupIndex;\n            },\n            widgetList: () => {\n              return (<any>this.widgetList);\n            }\n          }\n        });\n    };\n  }\n\n  class AddTileDialogProvider implements IAddTileDialogprovider {\n    private _service: AddTileDialogService;\n    private _widgetList: [AddTileDialog[]] = null;\n\n    constructor() {}\n\n    public configWidgetList = function (list: [AddTileDialog[]]) {\n      this._widgetList = list;\n    };\n\n    public $get($mdDialog: angular.material.IDialogService) {\n      \"ngInject\";\n\n      if (this._service == null)\n        this._service = new AddTileDialogService(this._widgetList, $mdDialog);\n\n      return this._service;\n    }\n  }\n\n  angular\n    .module('pipAddDashboardTileDialog')\n    .config(setTranslations)\n    .provider('pipAddTileDialog', AddTileDialogProvider);\n}","angular\n    .module('pipAddDashboardTileDialog', ['ngMaterial']);\n\nimport './AddTileDialogController';\nimport './AddTileProvider';","import {\n  MenuTileService\n} from '../menu_tile/MenuTileService';\nimport {\n  ITileConfigService\n} from '../config_tile_dialog/ConfigDialogService';\n\n{\n  class CalendarTileController extends MenuTileService {\n    constructor(\n      private pipTileConfigDialogService: ITileConfigService\n    ) {\n      super();\n\n      if (this.options) {\n        this.menu = this.options.menu ? _.union(this.menu, this.options.menu) : this.menu;\n        this.menu.push({\n          title: 'Configurate',\n          click: () => {\n            this.onConfigClick();\n          }\n        });\n        this.options.date = this.options.date || new Date();\n        this.color = this.options.color || 'blue';\n      }\n    }\n\n    private onConfigClick() {\n      this.pipTileConfigDialogService.show({\n        dialogClass: 'pip-calendar-config',\n        locals: {\n          color: this.color,\n          size: this.options.size,\n          date: this.options.date,\n        },\n        extensionUrl: 'calendar_tile/ConfigDialogExtension.html'\n      }, (result: any) => {\n        this.changeSize(result.size);\n\n        this.color = result.color;\n        this.options.color = result.color;\n        this.options.date = result.date;\n      });\n    }\n\n  }\n\n  const CalendarTile: ng.IComponentOptions = {\n    bindings: {\n      options: '=pipOptions',\n    },\n    controller: CalendarTileController,\n    templateUrl: 'calendar_tile/CalendarTile.html'\n  }\n\n  angular\n    .module('pipDashboard')\n    .component('pipCalendarTile', CalendarTile);\n\n}","export interface IDashboardTile {\n    options: any;\n    color: string;\n    size: Object | string | number;\n}\n\nexport class DashboardTile implements IDashboardTile {\n    public options: any;\n    public color: string;\n    public size: Object | string | number;\n\n    constructor() { }\n}","\nclass TileColors {\n    static all: string[] = ['purple', 'green', 'gray', 'orange', 'blue'];\n}\n\nclass TileSizes {\n    static all: any = [{\n            name: 'DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL',\n            id: '11'\n        },\n        {\n            name: 'DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE',\n            id: '21'\n        },\n        {\n            name: 'DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE',\n            id: '22'\n        }\n    ];\n}\n\nexport class TileConfigDialogController {\n    public colors: string[] = TileColors.all;\n    public sizes: any = TileSizes.all;\n    public sizeId: string = TileSizes.all[0].id;\n    public onCancel: Function;\n\n    constructor(\n        public params,\n        public extensionUrl,\n        public $mdDialog: angular.material.IDialogService\n    ) {\n        \"ngInject\";\n\n        angular.extend(this, this.params);\n        this.sizeId = '' + this.params.size.colSpan + this.params.size.rowSpan;\n\n        this.onCancel = () => {\n            this.$mdDialog.cancel();\n        }\n    }\n\n    public onApply(updatedData) {\n        this['size'].sizeX = Number(this.sizeId.substr(0, 1));\n        this['size'].sizeY = Number(this.sizeId.substr(1, 1));\n        this.$mdDialog.hide(updatedData);\n    }\n}","{    \n    interface ITileConfigExtendComponentBindings {\n        [key: string]: any;\n\n        pipExtensionUrl: any;\n        pipDialogScope: any;\n        pipApply: any;\n    }\n\n    const TileConfigExtendComponentBindings: ITileConfigExtendComponentBindings = {\n        pipExtensionUrl: '<',\n        pipDialogScope: '<',\n        pipApply: '&'\n    }\n\n    class TileConfigExtendComponentChanges implements ng.IOnChangesObject, ITileConfigExtendComponentBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        pipExtensionUrl: ng.IChangesObject<string>;\n        pipDialogScope: ng.IChangesObject<ng.IScope>;\n\n        pipApply: ng.IChangesObject<({updatedData: any}) => ng.IPromise<void>>;\n    }\n\n    interface ITileConfigExtendComponentAttributes extends ng.IAttributes {\n        pipExtensionUrl: string\n    }\n\n    class TileConfigExtendComponentController implements ITileConfigExtendComponentBindings {\n        public pipExtensionUrl: string;\n        public pipDialogScope: ng.IScope;\n        public pipApply: (param: {updatedData: any}) => ng.IPromise<void>;\n\n        constructor(\n            private $templateRequest: angular.ITemplateRequestService,\n            private $compile: angular.ICompileService,\n            private $scope: angular.IScope, \n            private $element: JQuery, \n            private $attrs: ITileConfigExtendComponentAttributes\n        ) { }\n\n        public $onChanges(changes: TileConfigExtendComponentChanges) {\n            if (changes.pipDialogScope) {\n                delete changes.pipDialogScope.currentValue['$scope'];\n                angular.extend(this, changes.pipDialogScope.currentValue);\n            }\n            if (changes.pipExtensionUrl && changes.pipExtensionUrl.currentValue) {\n                this.$templateRequest(changes.pipExtensionUrl.currentValue, false).then((html) => {\n                    this.$element.find('pip-extension-point').replaceWith(this.$compile(html)(this.$scope));\n                });\n            }\n        }\n\n        public onApply() {\n            this.pipApply({updatedData: this});\n        }\n    }\n\n    const pipTileConfigComponent: ng.IComponentOptions = {\n        templateUrl: 'config_tile_dialog/ConfigDialogExtendComponent.html',\n        controller: TileConfigExtendComponentController,\n        bindings: TileConfigExtendComponentBindings\n    }\n\n    angular\n        .module('pipConfigDashboardTileDialog')\n        .component('pipTileConfigExtendComponent', pipTileConfigComponent);\n}","import { TileConfigDialogController } from './ConfigDialogController';\n\nexport interface ITileConfigService {\n    show(params: ITileConfigDialogOptions, successCallback ? : (key) => void, cancelCallback ? : () => void): any;\n}\n\nexport interface ITileConfigDialogOptions extends angular.material.IDialogOptions {\n    dialogClass?: string;\n    extensionUrl?: string;\n    event?: any;\n}\n\n{\n    const setTranslations = function($injector: ng.auto.IInjectorService) {\n        const pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\n        if (pipTranslate) {\n            ( < any > pipTranslate).setTranslations('en', {\n                DASHBOARD_TILE_CONFIG_DIALOG_TITLE: 'Edit tile',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL: 'Small',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE: 'Wide',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE: 'Large'\n            });\n            ( < any > pipTranslate).setTranslations('ru', {\n                DASHBOARD_TILE_CONFIG_DIALOG_TITLE: 'Изменить виджет',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL: 'Мален.',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE: 'Широкий',\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE: 'Большой'\n            });\n        }\n    }\n\n    class TileConfigDialogService {\n        public constructor(\n            public $mdDialog: angular.material.IDialogService\n        ) {}\n\n        public show(params: ITileConfigDialogOptions, successCallback ? : (key) => void, cancelCallback ? : () => void) {\n            this.$mdDialog.show({\n                    targetEvent: params.event,\n                    templateUrl: params.templateUrl || 'dialogs/tile_config/ConfigDialog.html',\n                    controller: TileConfigDialogController,\n                    bindToController: true,\n                    controllerAs: 'vm',\n                    locals: {\n                        extensionUrl: params.extensionUrl,\n                        params: params.locals\n                    },\n                    clickOutsideToClose: true\n                })\n                .then((key) => {\n                    if (successCallback) {\n                        successCallback(key);\n                    }\n                }, () => {\n                    if (cancelCallback) {\n                        cancelCallback();\n                    }\n                });\n        }\n    }\n\n    angular\n        .module('pipConfigDashboardTileDialog')\n        .config(setTranslations)\n        .service('pipTileConfigDialogService', TileConfigDialogService);\n}","\nangular\n    .module('pipConfigDashboardTileDialog', ['ngMaterial']);\n\nimport './ConfigDialogController';\nimport './ConfigDialogService';\nimport './ConfigDialogExtendComponent';","import {\n  ITileTemplateService\n} from '../utility/TileTemplateUtility';\nimport {\n  IAddTileDialogService,\n  IAddTileDialogprovider\n} from '../add_tile_dialog/AddTileProvider'\n\n{\n  const setTranslations = function ($injector: ng.auto.IInjectorService) {\n    const pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\n    if (pipTranslate) {\n      ( < any > pipTranslate).setTranslations('en', {\n        DROP_TO_CREATE_NEW_GROUP: 'Drop here to create new group',\n      });\n      ( < any > pipTranslate).setTranslations('ru', {\n        DROP_TO_CREATE_NEW_GROUP: 'Перетащите сюда для создания новой группы'\n      });\n    }\n  }\n\n  const configureAvailableWidgets = function (pipAddTileDialogProvider: IAddTileDialogprovider) {\n    pipAddTileDialogProvider.configWidgetList([\n      [{\n          title: 'Event',\n          icon: 'document',\n          name: 'event',\n          amount: 0\n        },\n        {\n          title: 'Position',\n          icon: 'location',\n          name: 'position',\n          amount: 0\n        }\n      ],\n      [{\n          title: 'Calendar',\n          icon: 'date',\n          name: 'calendar',\n          amount: 0\n        },\n        {\n          title: 'Sticky Notes',\n          icon: 'note-take',\n          name: 'notes',\n          amount: 0\n        },\n        {\n          title: 'Statistics',\n          icon: 'tr-statistics',\n          name: 'statistics',\n          amount: 0\n        }\n      ]\n    ]);\n  }\n\n  class draggableOptions {\n    tileWidth: number;\n    tileHeight: number;\n    gutter: number;\n    inline: boolean;\n  }\n\n  const DEFAULT_GRID_OPTIONS: draggableOptions = {\n    tileWidth: 150, // 'px'\n    tileHeight: 150, // 'px'\n    gutter: 10, // 'px'\n    inline: false\n  };\n\n  interface DashboardBindings {\n      gridOptions: any;\n      groupAdditionalActions: any;\n      groupedWidgets: any;\n  }\n\n  class DashboardController implements ng.IController, DashboardBindings {\n    private defaultGroupMenuActions: any = [{\n        title: 'Add Component',\n        callback: (groupIndex) => {\n          this.addComponent(groupIndex);\n        }\n      },\n      {\n        title: 'Remove',\n        callback: (groupIndex) => {\n          this.removeGroup(groupIndex);\n        }\n      },\n      {\n        title: 'Configurate',\n        callback: (groupIndex) => {\n          console.log('configurate group with index:', groupIndex);\n        }\n      }\n    ];\n    private _includeTpl: string = '<pip-{{ type }}-tile group=\"groupIndex\" index=\"index\"' +\n      'pip-options=\"$parent.$ctrl.groupedWidgets[groupIndex][\\'source\\'][index].opts\">' +\n      '</pip-{{ type }}-tile>';\n\n    public groupedWidgets: any;\n    public draggableGridOptions: draggableOptions;\n    public widgetsTemplates: any;\n    public groupMenuActions: any = this.defaultGroupMenuActions;\n    public widgetsContext: any;\n    public gridOptions: any;\n    public groupAdditionalActions: any;\n\n    constructor(\n      $scope: angular.IScope,\n      private $rootScope: angular.IRootScopeService,\n      private $attrs: any,\n      private $element: any,\n      private $timeout: angular.ITimeoutService,\n      private $interpolate: angular.IInterpolateService,\n      private pipAddTileDialog: IAddTileDialogService,\n      private pipTileTemplate: ITileTemplateService\n    ) {\n      // Add class to style scroll bar\n      $element.addClass('pip-scroll');\n\n      // Set tiles grid options\n      this.draggableGridOptions = this.gridOptions || DEFAULT_GRID_OPTIONS;\n\n      // Switch inline displaying\n      if (this.draggableGridOptions.inline === true) {\n        $element.addClass('inline-grid');\n      }\n      // Extend group's menu actions\n      if (this.groupAdditionalActions) angular.extend(this.groupMenuActions, this.groupAdditionalActions);\n\n      // Compile widgets\n      this.widgetsContext = $scope;\n      this.compileWidgets();\n\n      this.$timeout(() => {\n        this.$element.addClass('visible');\n      }, 700);\n    }\n\n    private compileWidgets() {\n      _.each(this.groupedWidgets, (group, groupIndex) => {\n        group.removedWidgets = group.removedWidgets || [],\n          group.source = group.source.map((widget, index) => {\n            // Establish default props\n            widget.size = widget.size || {\n              colSpan: 1,\n              rowSpan: 1\n            };\n            widget.index = index;\n            widget.groupIndex = groupIndex;\n            widget.menu = widget.menu || {};\n            angular.extend(widget.menu, [{\n              title: 'Remove',\n              click: (item, params, object) => {\n                this.removeWidget(item, params, object);\n              }\n            }]);\n\n            return {\n              opts: widget,\n              template: this.pipTileTemplate.getTemplate(widget, this._includeTpl)\n            };\n          })\n      });\n    }\n\n    public addComponent(groupIndex) {\n      this.pipAddTileDialog\n        .show(this.groupedWidgets, groupIndex)\n        .then((data) => {\n          var activeGroup;\n\n          if (!data) {\n            return;\n          }\n\n          if (data.groupIndex !== -1) {\n            activeGroup = this.groupedWidgets[data.groupIndex];\n          } else {\n            activeGroup = {\n              title: 'New group',\n              source: []\n            };\n          }\n\n          this.addWidgets(activeGroup.source, data.widgets);\n\n          if (data.groupIndex === -1) {\n            this.groupedWidgets.push(activeGroup);\n          }\n\n          this.compileWidgets();\n        });\n    };\n\n    public removeGroup = (groupIndex) => {\n      console.log('removeGroup', groupIndex);\n      this.groupedWidgets.splice(groupIndex, 1);\n    }\n\n    private addWidgets(group, widgets) {\n      widgets.forEach((widgetGroup) => {\n        widgetGroup.forEach((widget) => {\n          if (widget.amount) {\n            Array.apply(null, Array(widget.amount)).forEach(() => {\n              group.push({\n                type: widget.name\n              });\n            });\n          }\n        });\n      });\n    }\n\n    private removeWidget(item, params, object) {\n      this.groupedWidgets[params.options.groupIndex].removedWidgets = [];\n      this.groupedWidgets[params.options.groupIndex].removedWidgets.push(params.options.index);\n      this.groupedWidgets[params.options.groupIndex].source.splice(params.options.index, 1);\n      this.$timeout(() => {\n        this.groupedWidgets[params.options.groupIndex].removedWidgets = [];\n      });\n    }\n\n  }\n\n  const Dashboard: ng.IComponentOptions = {\n    bindings: {\n      gridOptions: '=pipGridOptions',\n      groupAdditionalActions: '=pipGroupActions',\n      groupedWidgets: '=pipGroups'\n    },\n    controller: DashboardController,\n    templateUrl: 'dashboard/Dashboard.html'\n  }\n\n  angular\n    .module('pipDashboard')\n    .config(configureAvailableWidgets)\n    .config(setTranslations)\n    .component('pipDashboard', Dashboard);\n\n}","declare var interact;\n\nimport {\n  DragTileService,\n  IDragTileService,\n  IDragTileConstructor\n} from './DraggableTileService';\nimport {\n  TilesGridService,\n  ITilesGridService,\n  ITilesGridConstructor\n} from '../tile_group/TileGroupService';\n\nexport const DEFAULT_TILE_WIDTH: number = 150;\nexport const DEFAULT_TILE_HEIGHT: number = 150;\nexport const UPDATE_GROUPS_EVENT = \"pipUpdateDashboardGroupsConfig\";\n\nconst SIMPLE_LAYOUT_COLUMNS_COUNT: number = 2;\nconst DEFAULT_OPTIONS = {\n  tileWidth: DEFAULT_TILE_WIDTH, // 'px'\n  tileHeight: DEFAULT_TILE_HEIGHT, // 'px'\n  gutter: 20, // 'px'\n  container: 'pip-draggable-grid:first-of-type',\n  //mobileBreakpoint       : XXX,   // Get from pipMedia Service in the constructor\n  activeDropzoneClass: 'dropzone-active',\n  groupContaninerSelector: '.pip-draggable-group:not(.fict-group)',\n};\n\n{\n  interface IDraggableBindings {\n      tilesTemplates: any;\n      tilesContext: any;\n      options: any;\n      groupMenuActions: any;\n      $container: JQuery;\n  }\n\n  interface IDraggableControllerScope extends ng.IScope {\n    $container: JQuery;\n    tilesTemplates: any;\n    options: any;\n  }\n\n  interface ITileScope extends ng.IScope {\n    index: number | string;\n    groupIndex: number | string;\n  }\n\n  class DraggableController implements ng.IComponentController, IDraggableBindings {\n    public opts: any;\n    public groups: any;\n    public sourceDropZoneElem: any = null;\n    public isSameDropzone: boolean = true;\n    public tileGroups: any = null;\n    public availableWidth: number;\n    public availableColumns: number;\n    public groupsContainers: any;\n    public container: any;\n    public activeDraggedGroup: any;\n    public draggedTile: any;\n    public containerOffset: any;\n    public tilesTemplates: any;\n    public tilesContext: any;\n    public options: any;\n    public groupMenuActions: any;\n    public $container: JQuery;\n\n    constructor(\n      private $scope: IDraggableControllerScope,\n      private $rootScope: angular.IRootScopeService,\n      private $compile: angular.ICompileService,\n      private $timeout: angular.ITimeoutService,\n      private $element: JQuery,\n      pipDragTile: IDragTileService,\n      pipTilesGrid: ITilesGridService,\n      pipMedia: pip.layouts.IMediaService\n    ) {\n      this.opts = _.merge({\n        mobileBreakpoint: pipMedia.breakpoints.xs\n      }, DEFAULT_OPTIONS, this.options);\n\n      this.groups = this.tilesTemplates.map((group, groupIndex) => {\n        return {\n          title: group.title,\n          editingName: false,\n          index: groupIndex,\n          source: group.source.map((tile) => {\n            const tileScope = this.createTileScope(tile);\n\n            return IDragTileConstructor(DragTileService, {\n              tpl: $compile(tile.template)(tileScope),\n              options: tile.opts,\n              size: tile.opts.size\n            });\n          })\n        };\n      });\n\n      // Add templates watcher\n      $scope.$watch('$ctrl.tilesTemplates', (newVal) => {\n        this.watch(newVal);\n      }, true);\n\n      // Initialize data\n      this.initialize();\n\n      // Resize handler TODO: replace by pip resize watchers\n      $(window).on('resize', _.debounce(() => {\n        this.availableWidth = this.getContainerWidth();\n        this.availableColumns = this.getAvailableColumns(this.availableWidth);\n\n        this.tileGroups.forEach((group) => {\n          group\n            .setAvailableColumns(this.availableColumns)\n            .generateGrid(this.getSingleTileWidthForMobile(this.availableWidth))\n            .setTilesDimensions()\n            .calcContainerHeight();\n        });\n      }, 50));\n    }\n\n    // Post link function\n    public $postLink() {\n      this.$container = this.$element;\n    }\n\n    // Watch handler\n    private watch(newVal) {\n      const prevVal = this.groups;\n      let changedGroupIndex = null;\n\n      if (newVal.length > prevVal.length) {\n        this.addGroup(newVal[newVal.length - 1]);\n\n        return;\n      }\n\n      if (newVal.length < prevVal.length) {\n        this.removeGroups(newVal);\n\n        return;\n      }\n\n      for (let i = 0; i < newVal.length; i++) {\n        const groupWidgetDiff = prevVal[i].source.length - newVal[i].source.length;\n        if (groupWidgetDiff || (newVal[i].removedWidgets && newVal[i].removedWidgets.length > 0)) {\n          changedGroupIndex = i;\n\n          if (groupWidgetDiff < 0) {\n            const newTiles = newVal[changedGroupIndex].source.slice(groupWidgetDiff);\n\n            _.each(newTiles, (tile) => {\n              console.log('tile', tile);\n            });\n\n            this.addTilesIntoGroup(newTiles, this.tileGroups[changedGroupIndex], this.groupsContainers[changedGroupIndex]);\n\n            this.$timeout(() => {\n              this.updateTilesGroups();\n            });\n          } else {\n            this.removeTiles(this.tileGroups[changedGroupIndex], newVal[changedGroupIndex].removedWidgets, this.groupsContainers[changedGroupIndex]);\n            this.updateTilesOptions(newVal);\n            this.$timeout(() => {\n              this.updateTilesGroups();\n            });\n          }\n\n          return;\n        }\n      }\n\n      if (newVal && this.tileGroups) {\n        this.updateTilesOptions(newVal);\n        this.$timeout(() => {\n          this.updateTilesGroups();\n        });\n      }\n    }\n\n    // Inline edit group handlers\n    public onTitleClick(group, event) {\n      if (!group.editingName) {\n        group.oldTitle = _.clone(group.title);\n        group.editingName = true;\n        this.$timeout(() => {\n          $(event.currentTarget.children[0]).focus();\n        });\n      }\n    }\n\n    public cancelEditing(group) {\n      group.title = group.oldTitle;\n    }\n\n    public onBlurTitleInput(group) {\n      this.$timeout(() => {\n        group.editingName = false;\n        this.$rootScope.$broadcast(UPDATE_GROUPS_EVENT, this.groups);\n        // Update title in outer scope\n        this.tilesTemplates[group.index].title = group.title;\n      }, 100);\n    }\n\n    public onKyepressTitleInput(group, event) {\n      if (event.keyCode === 13) {\n        this.onBlurTitleInput(group);\n      }\n    }\n\n    // Update outer scope functions\n    private updateTilesTemplates(updateType: string, source ? : any) {\n      switch (updateType) {\n        case 'addGroup':\n          if (this.groups.length !== this.tilesTemplates.length) {\n            this.tilesTemplates.push(source);\n          }\n          break;\n        case 'moveTile':\n          const {\n            fromIndex,\n            toIndex,\n            tileOptions,\n            fromTileIndex\n          } = {\n            fromIndex: source.from.elem.attributes['data-group-id'].value,\n            toIndex: source.to.elem.attributes['data-group-id'].value,\n            tileOptions: source.tile.opts.options,\n            fromTileIndex: source.tile.opts.options.index\n          }\n          this.tilesTemplates[fromIndex].source.splice(fromTileIndex, 1);\n          this.tilesTemplates[toIndex].source.push({\n            opts: tileOptions\n          });\n\n          this.reIndexTiles(source.from.elem);\n          this.reIndexTiles(source.to.elem);\n          break;\n      }\n    }\n\n    // Manage tiles functions\n    private createTileScope(tile: any): ITileScope {\n      const tileScope = < ITileScope > this.$rootScope.$new(false, this.tilesContext);\n      tileScope.index = tile.opts.index == undefined ? tile.opts.options.index : tile.opts.index;\n      tileScope.groupIndex = tile.opts.groupIndex == undefined ? tile.opts.options.groupIndex : tile.opts.groupIndex;\n\n      return tileScope;\n    }\n\n    private removeTiles(group, indexes, container) {\n      const tiles = $(container).find('.pip-draggable-tile');\n\n      _.each(indexes, (index) => {\n        group.tiles.splice(index, 1);\n        tiles[index].remove();\n      });\n\n      this.reIndexTiles(container);\n    }\n\n    private reIndexTiles(container, gIndex ? ) {\n      const tiles = $(container).find('.pip-draggable-tile'),\n        groupIndex = gIndex === undefined ? container.attributes['data-group-id'].value : gIndex;\n\n      _.each(tiles, (tile, index) => {\n        const child = $(tile).children()[0];\n        angular.element(child).scope()['index'] = index;\n        angular.element(child).scope()['groupIndex'] = groupIndex;\n      });\n    }\n\n    private removeGroups(newGroups) {\n      const removeIndexes = [],\n        remain = [],\n        containers = [];\n\n\n      _.each(this.groups, (group, index) => {\n        if (_.findIndex(newGroups, (g) => {\n            return g['title'] === group.title\n          }) < 0) {\n          removeIndexes.push(index);\n        } else {\n          remain.push(index);\n        }\n      });\n\n      _.each(removeIndexes.reverse(), (index) => {\n        this.groups.splice(index, 1);\n        this.tileGroups.splice(index, 1);\n      });\n\n      _.each(remain, (index) => {\n        containers.push(this.groupsContainers[index]);\n      });\n\n      this.groupsContainers = containers;\n\n      _.each(this.groupsContainers, (container, index) => {\n        this.reIndexTiles(container, index);\n      });\n    }\n\n    private addGroup(sourceGroup) {\n      const group = {\n        title: sourceGroup.title,\n        source: sourceGroup.source.map((tile) => {\n          const tileScope = this.createTileScope(tile);\n\n          return IDragTileConstructor(DragTileService, {\n            tpl: this.$compile(tile.template)(tileScope),\n            options: tile.opts,\n            size: tile.opts.size\n          });\n        })\n      };\n\n      this.groups.push(group);\n      if (!this.$scope.$$phase) this.$scope.$apply();\n\n      this.$timeout(() => {\n        this.groupsContainers = document.querySelectorAll(this.opts.groupContaninerSelector);\n        this.tileGroups.push(\n          ITilesGridConstructor(TilesGridService, group.source, this.opts, this.availableColumns, this.groupsContainers[this.groupsContainers.length - 1])\n          .generateGrid(this.getSingleTileWidthForMobile(this.availableWidth))\n          .setTilesDimensions()\n          .calcContainerHeight()\n        );\n      });\n\n      this.updateTilesTemplates('addGroup', sourceGroup);\n    }\n\n    private addTilesIntoGroup(newTiles, group, groupContainer) {\n      newTiles.forEach((tile) => {\n        const tileScope = this.createTileScope(tile);\n\n        const newTile = IDragTileConstructor(DragTileService, {\n          tpl: this.$compile(tile.template)(tileScope),\n          options: tile.opts,\n          size: tile.opts.size\n        });\n\n        group.addTile(newTile);\n\n        $('<div>')\n          .addClass('pip-draggable-tile')\n          .append(newTile.getCompiledTemplate())\n          .appendTo(groupContainer);\n      });\n    }\n\n    private updateTilesOptions(optionsGroup) {\n      optionsGroup.forEach((optionGroup) => {\n        optionGroup.source.forEach((tileOptions) => {\n          this.tileGroups.forEach((group) => {\n            group.updateTileOptions(tileOptions.opts);\n          });\n        });\n      });\n    }\n\n    private initTilesGroups(tileGroups, opts, groupsContainers) {\n      return tileGroups.map((group, index) => {\n        return ITilesGridConstructor(TilesGridService, group.source, opts, this.availableColumns, groupsContainers[index])\n          .generateGrid(this.getSingleTileWidthForMobile(this.availableWidth))\n          .setTilesDimensions()\n          .calcContainerHeight();\n      });\n    }\n\n    private updateTilesGroups(onlyPosition ? , draggedTile ? ) {\n      this.tileGroups.forEach((group) => {\n        if (!onlyPosition) {\n          group.generateGrid(this.getSingleTileWidthForMobile(this.availableWidth));\n        }\n\n        group\n          .setTilesDimensions(onlyPosition, draggedTile)\n          .calcContainerHeight();\n      });\n    }\n\n    private getContainerWidth(): any {\n      const container = this.$container || $('body');\n      return container.width();\n    }\n\n    private getAvailableColumns(availableWidth): any {\n      return this.opts.mobileBreakpoint > availableWidth ? SIMPLE_LAYOUT_COLUMNS_COUNT :\n        Math.floor(availableWidth / (this.opts.tileWidth + this.opts.gutter));\n    }\n\n    private getActiveGroupAndTile(elem): any {\n      const active = {};\n\n      this.tileGroups.forEach((group) => {\n        const foundTile = group.getTileByNode(elem);\n\n        if (foundTile) {\n          active['group'] = group;\n          active['tile'] = foundTile;\n          return;\n        }\n      });\n\n      return active;\n    }\n\n    private getSingleTileWidthForMobile(availableWidth): any {\n      return this.opts.mobileBreakpoint > availableWidth ? availableWidth / 2 - this.opts.gutter : null;\n    }\n\n    private onDragStartListener(event) {\n      const activeEntities = this.getActiveGroupAndTile(event.target);\n\n      this.container = $(event.target).parent('.pip-draggable-group').get(0);\n      this.draggedTile = activeEntities['tile'];\n      this.activeDraggedGroup = activeEntities['group'];\n\n      this.$element.addClass('drag-transfer');\n\n      this.draggedTile.startDrag();\n    }\n\n    private onDragMoveListener(event) {\n      const target = event.target;\n      const x = (parseFloat(target.style.left) || 0) + event.dx;\n      const y = (parseFloat(target.style.top) || 0) + event.dy;\n\n      this.containerOffset = this.getContainerOffset();\n\n      target.style.left = x + 'px'; // TODO [apidhirnyi] Extract units into options section\n      target.style.top = y + 'px';\n\n      const belowElement = this.activeDraggedGroup.getTileByCoordinates({\n        left: event.pageX - this.containerOffset.left,\n        top: event.pageY - this.containerOffset.top\n      }, this.draggedTile);\n\n      if (belowElement) {\n        const draggedTileIndex = this.activeDraggedGroup.getTileIndex(this.draggedTile);\n        const belowElemIndex = this.activeDraggedGroup.getTileIndex(belowElement);\n\n        if ((draggedTileIndex + 1) === belowElemIndex) {\n          return;\n        }\n\n        this.activeDraggedGroup\n          .swapTiles(this.draggedTile, belowElement)\n          .setTilesDimensions(true, this.draggedTile);\n\n        this.$timeout(() => {\n          this.setGroupContainersHeight();\n        }, 0);\n      }\n    }\n\n    private onDragEndListener() {\n      this.draggedTile.stopDrag(this.isSameDropzone);\n\n      this.$element.removeClass('drag-transfer');\n      this.activeDraggedGroup = null;\n      this.draggedTile = null;\n    }\n\n    private getContainerOffset() {\n      const containerRect = this.container.getBoundingClientRect();\n\n      return {\n        left: containerRect.left,\n        top: containerRect.top\n      };\n    }\n\n    private setGroupContainersHeight() {\n      this.tileGroups.forEach((tileGroup) => {\n        tileGroup.calcContainerHeight();\n      });\n    }\n\n    private moveTile(from, to, tile) {\n      let elem;\n      const movedTile = from.removeTile(tile);\n      const tileScope = this.createTileScope(tile);\n\n      $(this.groupsContainers[_.findIndex(this.tileGroups, from)])\n        .find(movedTile.getElem())\n        .remove();\n\n      if (to !== null) {\n        to.addTile(movedTile);\n\n        elem = this.$compile(movedTile.getElem())(tileScope);\n\n        $(this.groupsContainers[_.findIndex(this.tileGroups, to)])\n          .append(elem);\n\n        this.$timeout(to.setTilesDimensions.bind(to, true));\n      }\n\n      this.updateTilesTemplates('moveTile', {\n        from: from,\n        to: to,\n        tile: movedTile\n      });\n    }\n\n    private onDropListener(event) {\n      const droppedGroupIndex = event.target.attributes['data-group-id'].value;\n      const droppedGroup = this.tileGroups[droppedGroupIndex];\n\n      if (this.activeDraggedGroup !== droppedGroup) {\n        this.moveTile(this.activeDraggedGroup, droppedGroup, this.draggedTile);\n      }\n\n      this.updateTilesGroups(true);\n      this.sourceDropZoneElem = null;\n    }\n\n    private onDropToFictGroupListener(event) {\n      const from = this.activeDraggedGroup;\n      const tile = this.draggedTile;\n\n      this.addGroup({\n        title: 'New group',\n        source: []\n      });\n      this.$timeout(() => {\n        this.moveTile(from, this.tileGroups[this.tileGroups.length - 1], tile);\n        this.updateTilesGroups(true);\n      });\n\n      this.sourceDropZoneElem = null;\n    }\n\n    private onDropEnterListener(event) {\n      if (!this.sourceDropZoneElem) {\n        this.sourceDropZoneElem = event.dragEvent.dragEnter;\n      }\n\n      if (this.sourceDropZoneElem !== event.dragEvent.dragEnter) {\n        event.dragEvent.dragEnter.classList.add('dropzone-active');\n        $('body').css('cursor', 'copy');\n        this.isSameDropzone = false;\n      } else {\n        $('body').css('cursor', '');\n        this.isSameDropzone = true;\n      }\n    }\n\n    private onDropDeactivateListener(event) {\n      if (this.sourceDropZoneElem !== event.target) {\n        event.target.classList.remove(this.opts.activeDropzoneClass);\n        $('body').css('cursor', '');\n      }\n    }\n\n    private onDropLeaveListener(event) {\n      event.target.classList.remove(this.opts.activeDropzoneClass);\n    }\n\n    private initialize() {\n      this.$timeout(() => {\n        this.availableWidth = this.getContainerWidth();\n        this.availableColumns = this.getAvailableColumns(this.availableWidth);\n        this.groupsContainers = document.querySelectorAll(this.opts.groupContaninerSelector);\n        this.tileGroups = this.initTilesGroups(this.groups, this.opts, this.groupsContainers);\n\n        interact('.pip-draggable-tile')\n          .draggable({\n            autoScroll: {\n              enabled: true,\n              container: $('#content').get(0),\n              speed: 500\n            },\n            onstart: (event) => {\n              this.onDragStartListener(event)\n            },\n            onmove: (event) => {\n              this.onDragMoveListener(event)\n            },\n            onend: (event) => {\n              this.onDragEndListener()\n            }\n          });\n\n        interact('.pip-draggable-group.fict-group')\n          .dropzone({\n            ondrop: (event) => {\n              this.onDropToFictGroupListener(event)\n            },\n            ondragenter: (event) => {\n              this.onDropEnterListener(event)\n            },\n            ondropdeactivate: (event) => {\n              this.onDropDeactivateListener(event)\n            },\n            ondragleave: (event) => {\n              this.onDropLeaveListener(event)\n            }\n          });\n\n        interact('.pip-draggable-group')\n          .dropzone({\n            ondrop: (event) => {\n              this.onDropListener(event)\n            },\n            ondragenter: (event) => {\n              this.onDropEnterListener(event)\n            },\n            ondropdeactivate: (event) => {\n              this.onDropDeactivateListener(event)\n            },\n            ondragleave: (event) => {\n              this.onDropLeaveListener(event)\n            }\n          });\n\n        this.$container\n          .on('mousedown touchstart', 'md-menu .md-icon-button', () => {\n            interact('.pip-draggable-tile').draggable(false);\n            $(this).trigger('click');\n          })\n          .on('mouseup touchend', () => {\n            interact('.pip-draggable-tile').draggable(true);\n          });\n          \n      }, 0);\n    }\n  }\n\n  const DragComponent: ng.IComponentOptions = {\n    bindings: {\n      tilesTemplates: '=pipTilesTemplates',\n      tilesContext: '=pipTilesContext',\n      options: '=pipDraggableGrid',\n      groupMenuActions: '=pipGroupMenuActions'\n    },\n    //controllerAs: 'DraggedCtrl',\n    templateUrl: 'draggable/Draggable.html',\n    controller: DraggableController\n  }\n\n  angular.module('pipDraggableTiles')\n    .component('pipDraggableGrid', DragComponent);\n}","export interface DragTileConstructor {\n  new (options: any);\n}\n\nexport function IDragTileConstructor(constructor: DragTileConstructor, options: any): IDragTileService {\n  return new constructor(options);\n}\n\nexport interface IDragTileService {\n  tpl: any;\n  opts: any;\n  size: any;\n  elem: any;\n  preview: any;\n  getSize(): any;\n  setSize(width, height): any;\n  setPosition(left, top): any;\n  getCompiledTemplate(): any;\n  updateElem(parent): any;\n  getElem(): any;\n  startDrag(): any;\n  stopDrag(isAnimate): any;\n  setPreviewPosition(coords): void;\n  getOptions(): any;\n  setOptions(options): any;\n}\n\nlet DEFAULT_TILE_SIZE = {\n  colSpan: 1,\n  rowSpan: 1\n};\n\nexport class DragTileService implements IDragTileService {\n  public tpl: any;\n  public opts: any;\n  public size: any;\n  public elem: any;\n  public preview: any;\n\n  constructor (options: any) {\n    this.tpl = options.tpl.get(0);\n    this.opts = options;\n    this.size = _.merge({}, DEFAULT_TILE_SIZE, options.size);\n    this.elem = null;\n  }\n\n  public getSize(): any {\n    return this.size;\n  }\n\n  public setSize(width, height): any {\n    this.size.width = width;\n    this.size.height = height;\n\n    if (this.elem) {\n      this.elem.css({\n        width: width,\n        height: height\n      });\n    }\n\n    return this;\n  }\n\n  public setPosition(left, top): any {\n    this.size.left = left;\n    this.size.top = top;\n\n    if (this.elem) {\n      this.elem.css({\n        left: left,\n        top: top\n      });\n    }\n\n    return this;\n  }\n\n  public getCompiledTemplate(): any {\n    return this.tpl;\n  };\n\n  public updateElem(parent): any {\n    this.elem = $(this.tpl).parent(parent);\n\n    return this;\n  };\n\n  public getElem(): any {\n    return this.elem.get(0);\n  };\n\n  public startDrag(): any {\n    this.preview = $('<div>')\n      .addClass('pip-dragged-preview')\n      .css({\n        position: 'absolute',\n        left: this.elem.css('left'),\n        top: this.elem.css('top'),\n        width: this.elem.css('width'),\n        height: this.elem.css('height')\n      });\n\n    this.elem\n      .addClass('no-animation')\n      .css({\n        zIndex: '9999'\n      })\n      .after(this.preview);\n\n    return this;\n  };\n\n  public stopDrag(isAnimate): any {\n    let self = this;\n\n    if (isAnimate) {\n      this.elem\n        .removeClass('no-animation')\n        .css({\n          left: this.preview.css('left'),\n          top: this.preview.css('top')\n        })\n        .on('transitionend', onTransitionEnd);\n    } else {\n      self.elem\n        .css({\n          left: self.preview.css('left'),\n          top: self.preview.css('top'),\n          zIndex: ''\n        })\n        .removeClass('no-animation');\n\n      self.preview.remove();\n      self.preview = null;\n    }\n\n    return this;\n\n    function onTransitionEnd() {\n      if (self.preview) {\n        self.preview.remove();\n        self.preview = null;\n      }\n\n      self.elem\n        .css('zIndex', '')\n        .off('transitionend', onTransitionEnd);\n    }\n  };\n\n  public setPreviewPosition(coords) {\n    this.preview.css(coords);\n  };\n\n  public getOptions(): any {\n    return this.opts.options;\n  };\n\n  public setOptions(options): any {\n    _.merge(this.opts.options, options);\n    _.merge(this.size, options.size);\n\n    return this;\n  };\n}\n\nangular\n  .module('pipDraggableTiles')\n  .service('pipDragTile', function () {\n    return function (options) {\n      let newTile = new DragTileService(options);\n\n      return newTile;\n    }\n  });","import {\n  MenuTileService\n} from '../menu_tile/MenuTileService';\nimport {\n  ITileConfigService\n} from '../config_tile_dialog/ConfigDialogService';\n{\n  class EventTileController extends MenuTileService {\n    private _oldOpacity: number;\n\n    public opacity: number = 0.57;\n\n    constructor(\n      $scope: ng.IScope,\n      private $element: JQuery,\n      private $timeout: angular.ITimeoutService,\n      private pipTileConfigDialogService: ITileConfigService\n    ) {\n      super();\n\n      if (this.options) {\n        if (this.options.menu) this.menu = _.union(this.menu, this.options.menu);\n      }\n\n      this.menu.push({\n        title: 'Configurate',\n        click: () => {\n          this.onConfigClick();\n        }\n      });\n      this.color = this.options.color || 'gray';\n      this.opacity = this.options.opacity || this.opacity;\n\n      this.drawImage();\n\n      // TODO it doesn't work\n      $scope.$watch(() => {\n        return $element.is(':visible');\n      }, (newVal) => {\n        this.drawImage();\n      });\n    }\n\n    private drawImage() {\n      if (this.options.image) {\n        this.$timeout(() => {\n          this.onImageLoad(this.$element.find('img'));\n        }, 500);\n      }\n    }\n\n    private onConfigClick() {\n      this._oldOpacity = _.clone(this.opacity);\n      this.pipTileConfigDialogService.show({\n        dialogClass: 'pip-calendar-config',\n        locals: {\n          color: this.color,\n          size: this.options.size || {\n            colSpan: 1,\n            rowSpan: 1\n          },\n          date: this.options.date,\n          title: this.options.title,\n          text: this.options.text,\n          opacity: this.opacity,\n          onOpacitytest: (opacity) => {\n            this.opacity = opacity;\n          }\n        },\n        extensionUrl: 'event_tile/ConfigDialogExtension.html'\n      }, (result: any) => {\n        this.changeSize(result.size);\n\n        this.color = result.color;\n        this.options.color = result.color;\n        this.options.date = result.date;\n        this.options.title = result.title;\n        this.options.text = result.text;\n        this.options.opacity = result.opacity;\n      }, () => {\n        this.opacity = this._oldOpacity;\n      });\n    }\n\n    private onImageLoad(image) {\n      this.setImageMarginCSS(this.$element.parent(), image);\n    }\n\n    public changeSize(params) {\n      this.options.size.colSpan = params.sizeX;\n      this.options.size.rowSpan = params.sizeY;\n\n      if (this.options.image) {\n        this.$timeout(() => {\n          this.setImageMarginCSS(this.$element.parent(), this.$element.find('img'));\n        }, 500);\n      }\n    }\n\n    // Later replace by pipImageUtils sevice's function\n    private setImageMarginCSS($element, image) {\n      let\n        containerWidth = $element.width ? $element.width() : $element.clientWidth, // || 80,\n        containerHeight = $element.height ? $element.height() : $element.clientHeight, // || 80,\n        imageWidth = image[0].naturalWidth || image.width,\n        imageHeight = image[0].naturalHeight || image.height,\n        margin = 0,\n        cssParams = {};\n\n      if ((imageWidth / containerWidth) > (imageHeight / containerHeight)) {\n        margin = -((imageWidth / imageHeight * containerHeight - containerWidth) / 2);\n        cssParams['margin-left'] = '' + margin + 'px';\n        cssParams['height'] = '' + containerHeight + 'px'; //'100%';\n        cssParams['width'] = '' + imageWidth * containerHeight / imageHeight + 'px'; //'100%';\n        cssParams['margin-top'] = '';\n      } else {\n        margin = -((imageHeight / imageWidth * containerWidth - containerHeight) / 2);\n        cssParams['margin-top'] = '' + margin + 'px';\n        cssParams['height'] = '' + imageHeight * containerWidth / imageWidth + 'px'; //'100%';\n        cssParams['width'] = '' + containerWidth + 'px'; //'100%';\n        cssParams['margin-left'] = '';\n      }\n\n      image.css(cssParams);\n    }\n  }\n\n\n  const EventTile: ng.IComponentOptions = {\n    bindings: {\n      options: '=pipOptions'\n    },\n    controller: EventTileController,\n    templateUrl: 'event_tile/EventTile.html'\n  }\n\n  angular\n    .module('pipDashboard')\n    .component('pipEventTile', EventTile);\n}","// Import services\nimport './tile_group/index';\nimport './draggable';\n\n// Import tile services\nimport './menu_tile';\n\n// Import dialogs\nimport './add_tile_dialog';\nimport './config_tile_dialog';\n\nangular.module('pipDashboard', [\n  // Services\n  'pipDraggableTiles',\n  'pipDraggableTilesGroup',\n  // Tile services\n  'pipMenuTile',\n  // Dialogs\n  'pipConfigDashboardTileDialog',\n  'pipAddDashboardTileDialog',\n  //Templates\n  'pipDashboard.Templates',\n  // External pip modules\n  'pipLayout',\n  'pipLocations',\n  'pipDateTime',\n  'pipCharts',\n  'pipTranslate',\n  'pipControls',\n  'pipButtons'\n]);\n\n// Import utility \nimport './utility/TileTemplateUtility';\n// Import tiles\nimport './common_tile/Tile';\nimport './calendar_tile/CalendarTile';\nimport './event_tile/EventTile';\nimport './note_tile/NoteTile';\nimport './picture_slider_tile/PictureSliderTile';\nimport './position_tile/PositionTile';\nimport './statistics_tile/StatisticsTile';\n// Import common component\nimport './dashboard/Dashboard';\n","{\n  const TileMenu = ():ng.IDirective => {\n    return {\n      restrict: 'EA',\n      templateUrl: 'menu_tile/MenuTile.html'\n    };\n  }\n\n  angular\n    .module('pipMenuTile')\n    .directive('pipTileMenu', TileMenu);\n}","import { DashboardTile } from '../common_tile/Tile';\n\nexport class MenuTileService extends DashboardTile {\n  public menu: any = [{\n    title: 'Change Size',\n    action: angular.noop,\n    submenu: [{\n        title: '1 x 1',\n        action: 'changeSize',\n        params: {\n          sizeX: 1,\n          sizeY: 1\n        }\n      },\n      {\n        title: '2 x 1',\n        action: 'changeSize',\n        params: {\n          sizeX: 2,\n          sizeY: 1\n        }\n      },\n      {\n        title: '2 x 2',\n        action: 'changeSize',\n        params: {\n          sizeX: 2,\n          sizeY: 2\n        }\n      }\n    ]\n  }];\n\n  constructor() {\n    \"ngInject\";\n\n    super();\n  }\n\n  public callAction(actionName, params, item) {\n    if (this[actionName]) {\n      this[actionName].call(this, params);\n    }\n\n    if (item['click']) {\n      item['click'].call(item, params, this);\n    }\n  };\n\n  public changeSize(params) {\n    this.options.size.colSpan = params.sizeX;\n    this.options.size.rowSpan = params.sizeY;\n  };\n}\n\n{\n  class MenuTileProvider {\n    private _service: MenuTileService;\n\n    constructor() {}\n\n    public $get() {\n      \"ngInject\";\n\n      if (this._service == null)\n        this._service = new MenuTileService();\n\n      return this._service;\n    }\n  }\n\n  angular\n    .module('pipMenuTile')\n    .provider('pipMenuTile', MenuTileProvider);\n}","angular\n    .module('pipMenuTile', []);\n\nimport './MenuTileDirective';\nimport './MenuTileService';\n\nexport * from './MenuTileService';","import {\n  MenuTileService\n} from '../menu_tile/MenuTileService';\nimport {\n  ITileConfigService\n} from '../config_tile_dialog/ConfigDialogService';\n\n{\n  class NoteTileController extends MenuTileService {\n\n    constructor(\n      private pipTileConfigDialogService: ITileConfigService\n    ) {\n      super();\n\n      if (this.options) {\n        this.menu = this.options.menu ? _.union(this.menu, this.options.menu) : this.menu;\n      }\n\n      this.menu.push({\n        title: 'Configurate',\n        click: () => {\n          this.onConfigClick();\n        }\n      });\n      this.color = this.options.color || 'orange';\n    }\n\n    private onConfigClick() {\n      this.pipTileConfigDialogService.show({\n        locals: {\n          color: this.color,\n          size: this.options.size,\n          title: this.options.title,\n          text: this.options.text,\n        },\n        extensionUrl: 'note_tile/ConfigDialogExtension.html'\n      }, (result: any) => {\n        this.color = result.color;\n        this.options.color = result.color;\n        this.changeSize(result.size);\n        this.options.text = result.text;\n        this.options.title = result.title;\n      });\n    }\n  }\n\n  const NoteTile: ng.IComponentOptions = {\n    bindings: {\n      options: '=pipOptions'\n    },\n    controller: NoteTileController,\n    templateUrl: 'note_tile/NoteTile.html'\n  }\n\n  angular\n    .module('pipDashboard')\n    .component('pipNoteTile', NoteTile);\n}","'use strict';\n\nimport {\n  MenuTileService\n} from '../menu_tile/MenuTileService';\nimport {\n  ITileConfigService\n} from '../config_tile_dialog/ConfigDialogService';\nimport {\n  ITileTemplateService\n} from '../utility/TileTemplateUtility';\n\n{\n  class PictureSliderController extends MenuTileService {\n    public animationType: string = 'fading';\n    public animationInterval: number = 5000;\n\n    constructor(\n      private $scope: angular.IScope,\n      private $element: any,\n      private $timeout: angular.ITimeoutService,\n      private pipTileTemplate: ITileTemplateService\n    ) {\n      super();\n\n      if (this.options) {\n        this.animationType = this.options.animationType || this.animationType;\n        this.animationInterval = this.options.animationInterval || this.animationInterval;\n      }\n    }\n\n    public onImageLoad($event) {\n      this.$timeout(() => {\n        this.pipTileTemplate.setImageMarginCSS(this.$element.parent(), $event.target);\n      });\n    }\n\n    public changeSize(params) {\n      this.options.size.colSpan = params.sizeX;\n      this.options.size.rowSpan = params.sizeY;\n\n      this.$timeout(() => {\n        _.each(this.$element.find('img'), (image) => {\n          this.pipTileTemplate.setImageMarginCSS(this.$element.parent(), image);\n        });\n      }, 500);\n    }\n  }\n\n  const PictureSliderTile: ng.IComponentOptions = {\n    bindings: {\n      options: '=pipOptions'\n    },\n    controller: PictureSliderController,\n    templateUrl: 'picture_slider_tile/PictureSliderTile.html'\n  }\n\n  angular\n    .module('pipDashboard')\n    .component('pipPictureSliderTile', PictureSliderTile);\n}","import {\n  MenuTileService\n} from '../menu_tile/MenuTileService';\nimport {\n  ITileConfigService\n} from '../config_tile_dialog/ConfigDialogService';\n\n{\n  class PositionTileController extends MenuTileService {\n    public showPosition: boolean = true;\n\n    constructor(\n      $scope: angular.IScope,\n      private $timeout: angular.ITimeoutService,\n      private $element: any,\n      private pipTileConfigDialogService: ITileConfigService,\n      private pipLocationEditDialog: any,\n    ) {\n      super();\n\n      if (this.options) {\n        if (this.options.menu) this.menu = _.union(this.menu, this.options.menu);\n      }\n\n      this.menu.push({\n        title: 'Configurate',\n        click: () => {\n          this.onConfigClick();\n        }\n      });\n      this.menu.push({\n        title: 'Change location',\n        click: () => {\n          this.openLocationEditDialog();\n        }\n      });\n\n      this.options.location = this.options.location || this.options.position;\n\n      $scope.$watch('$ctrl.options.location', () => {\n        this.reDrawPosition();\n      });\n\n      // TODO it doesn't work\n      $scope.$watch(() => {\n        return $element.is(':visible');\n      }, (newVal) => {\n        if (newVal == true) this.reDrawPosition();\n      });\n    }\n\n    private onConfigClick() {\n      this.pipTileConfigDialogService.show({\n        dialogClass: 'pip-position-config',\n        locals: {\n          size: this.options.size,\n          locationName: this.options.locationName,\n          hideColors: true,\n        },\n        extensionUrl: 'position_tile/ConfigDialogExtension.html'\n      }, (result: any) => {\n        this.changeSize(result.size);\n        this.options.locationName = result.locationName;\n      });\n    }\n\n    public changeSize(params) {\n      this.options.size.colSpan = params.sizeX;\n      this.options.size.rowSpan = params.sizeY;\n\n      this.reDrawPosition();\n    }\n\n    public openLocationEditDialog() {\n      this.pipLocationEditDialog.show({\n        locationName: this.options.locationName,\n        locationPos: this.options.location\n      }, (newPosition) => {\n        if (newPosition) {\n          this.options.location = newPosition.location;\n          this.options.locationName = newPosition.locatioName;\n        }\n      });\n    }\n\n    private reDrawPosition() {\n      this.showPosition = false;\n      this.$timeout(() => {\n        this.showPosition = true;\n      }, 50);\n    }\n  }\n\n\n  const PositionTile: ng.IComponentOptions = {\n    bindings: {\n      options: '=pipOptions'\n    },\n    controller: PositionTileController,\n    templateUrl: 'position_tile/PositionTile.html'\n  }\n\n  angular\n    .module('pipDashboard')\n    .component('pipPositionTile', PositionTile);\n}","import {\n  MenuTileService\n} from '../menu_tile/MenuTileService';\n\n{\n  const SMALL_CHART: number = 70;\n  const BIG_CHART: number = 250;\n\n  class StatisticsTileController extends MenuTileService {\n    private _$scope: angular.IScope;\n    private _$timeout: angular.ITimeoutService;\n\n    public reset: boolean = false;\n    public chartSize: number = SMALL_CHART;\n\n    constructor(\n      $scope: angular.IScope,\n      $timeout: angular.ITimeoutService\n    ) {\n      super();\n      this._$scope = $scope;\n      this._$timeout = $timeout;\n\n      if (this.options) {\n        this.menu = this.options.menu ? _.union(this.menu, this.options.menu) : this.menu;\n      }\n\n      this.setChartSize();\n    }\n\n    public changeSize(params) {\n      this.options.size.colSpan = params.sizeX;\n      this.options.size.rowSpan = params.sizeY;\n\n      this.reset = true;\n      this.setChartSize();\n      this._$timeout(() => {\n        this.reset = false;\n      }, 500);\n    }\n\n    private setChartSize() {\n      this.chartSize = this.options.size.colSpan == 2 && this.options.size.rowSpan == 2 ? BIG_CHART : SMALL_CHART;\n    }\n  }\n\n\n  const StatisticsTile: ng.IComponentOptions = {\n    bindings: {\n      options: '=pipOptions'\n    },\n    controller: StatisticsTileController,\n    templateUrl: 'statistics_tile/StatisticsTile.html'\n  }\n\n  angular\n    .module('pipDashboard')\n    .component('pipStatisticsTile', StatisticsTile);\n}","{\n  interface DraggableTileAttributes extends ng.IAttributes {\n    pipDraggableTiles: any;\n  }\n\n  function DraggableTileLink(\n    $scope: ng.IScope,\n    $elem: JQuery,\n    $attr: DraggableTileAttributes\n  ) {\n    const docFrag = document.createDocumentFragment(),\n      group = $scope.$eval($attr.pipDraggableTiles);\n\n    group.forEach(function (tile) {\n      const tpl = wrapComponent(tile.getCompiledTemplate());\n      docFrag.appendChild(tpl);\n    });\n\n    $elem.append(docFrag);\n\n    function wrapComponent(elem) {\n      return $('<div>')\n        .addClass('pip-draggable-tile')\n        .append(elem)\n        .get(0);\n    }\n  }\n\n  function DraggableTiles(): ng.IDirective {\n    return {\n      restrict: 'A',\n      link: function(\n        $scope: ng.IScope,\n        $elem: JQuery,\n        $attr: DraggableTileAttributes\n      ) {\n          new DraggableTileLink($scope, $elem, $attr);\n      }\n    };\n  }\n\n  angular\n    .module('pipDraggableTilesGroup')\n    .directive('pipDraggableTiles', DraggableTiles);\n}","export interface TilesGridConstructor {\n  new(tiles, options, columns, elem);\n}\n\nexport function ITilesGridConstructor(constructor: TilesGridConstructor, tiles, options, columns, elem): ITilesGridService {\n  return new constructor(tiles, options, columns, elem);\n}\n\nexport interface ITilesGridService {\n  tiles: any;\n  opts: any;\n  columns: any;\n  elem: any;\n  gridCells: any;\n  inline: boolean;\n  isMobileLayout: boolean;\n\n  addTile(tile): any;\n  getCellByPosition(row, col): any;\n  getCells(prevCell, rowSpan, colSpan): any;\n  getAvailableCellsDesktop(prevCell, rowSpan, colSpan): any;\n  getCell(src, basicRow, basicCol, columns): any;\n  getAvailableCellsMobile(prevCell, rowSpan, colSpan): any;\n  getBasicRow(prevCell): any;\n  isCellFree(row, col): any;\n  getCellIndex(srcCell): any;\n  reserveCells(start, end, elem): void;\n  clearElements(): void;\n  setAvailableColumns(columns): any;\n  generateGrid(singleTileWidth ? ): any;\n  setTilesDimensions(onlyPosition, draggedTile): any;\n  calcContainerHeight(): any;\n  getTileByNode(node): any;\n  getTileByCoordinates(coords, draggedTile): any;\n  getTileIndex(tile): any;\n  swapTiles(movedTile, beforeTile): any;\n  removeTile(removeTile): any;\n  updateTileOptions(opts): any;\n}\n\nconst MOBILE_LAYOUT_COLUMNS = 2;\n\nexport class TilesGridService implements ITilesGridService {\n  public tiles: any;\n  public opts: any;\n  public columns: any;\n  public elem: any;\n  public gridCells: any = [];\n  public inline: boolean = false;\n  public isMobileLayout: boolean;\n\n  constructor(tiles, options, columns, elem) {\n    this.tiles = tiles;\n    this.opts = options;\n    this.columns = columns || 0; // available columns in a row\n    this.elem = elem;\n    this.gridCells = [];\n    this.inline = options.inline || false;\n    this.isMobileLayout = columns === MOBILE_LAYOUT_COLUMNS;\n  }\n\n  public addTile(tile): any {\n    this.tiles.push(tile);\n    if (this.tiles.length === 1) {\n      this.generateGrid();\n    }\n\n    return this;\n  };\n\n  public getCellByPosition(row, col): any {\n    return this.gridCells[row][col];\n  };\n\n  public getCells(prevCell, rowSpan, colSpan): any {\n    if (this.isMobileLayout) {\n      return this.getAvailableCellsMobile(prevCell, rowSpan, colSpan);\n    } else {\n      return this.getAvailableCellsDesktop(prevCell, rowSpan, colSpan);\n    }\n  };\n\n  public getAvailableCellsDesktop(prevCell, rowSpan, colSpan): any {\n    let leftCornerCell;\n    let rightCornerCell;\n    const basicCol = prevCell && prevCell.col || 0;\n    const basicRow = this.getBasicRow(prevCell);\n\n    // Small tile\n    if (colSpan === 1 && rowSpan === 1) {\n      const gridCopy = this.gridCells.slice();\n\n      if (!prevCell) {\n        leftCornerCell = gridCopy[0][0];\n      } else {\n        leftCornerCell = this.getCell(gridCopy, basicRow, basicCol, this.columns);\n\n        if (!leftCornerCell) {\n          const rowShift = this.isMobileLayout ? 1 : 2;\n          leftCornerCell = this.getCell(gridCopy, basicRow + rowShift, 0, this.columns);\n        }\n      }\n    }\n\n    // Medium tile\n    if (colSpan === 2 && rowSpan === 1) {\n      const prevTileSize = prevCell && prevCell.elem.size || null;\n\n      if (!prevTileSize) {\n        leftCornerCell = this.getCellByPosition(basicRow, basicCol);\n        rightCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\n      } else if (prevTileSize.colSpan === 2 && prevTileSize.rowSpan === 2) {\n        if (this.columns - basicCol - 2 > 0) {\n          leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\n          rightCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\n        } else {\n          leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\n          rightCornerCell = this.getCellByPosition(basicRow + 2, 1);\n        }\n      } else if (prevTileSize.colSpan === 2 && prevTileSize.rowSpan === 1) {\n        if (prevCell.row % 2 === 0) {\n          leftCornerCell = this.getCellByPosition(basicRow + 1, basicCol - 1);\n          rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol);\n        } else {\n          if (this.columns - basicCol - 3 >= 0) {\n            leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\n            rightCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\n          } else {\n            leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\n            rightCornerCell = this.getCellByPosition(basicRow + 2, 1);\n          }\n        }\n      } else if (prevTileSize.colSpan === 1 && prevTileSize.rowSpan === 1) {\n        if (this.columns - basicCol - 3 >= 0) {\n          if (this.isCellFree(basicRow, basicCol + 1)) {\n            leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\n            rightCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\n          } else {\n            leftCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\n            rightCornerCell = this.getCellByPosition(basicRow, basicCol + 3);\n          }\n        } else {\n          leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\n          rightCornerCell = this.getCellByPosition(basicRow + 2, 1);\n        }\n      }\n    }\n\n    // Big tile\n    if (!prevCell && rowSpan === 2 && colSpan === 2) {\n      leftCornerCell = this.getCellByPosition(basicRow, basicCol);\n      rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol + 1);\n    } else if (rowSpan === 2 && colSpan === 2) {\n      if (this.columns - basicCol - 2 > 0) {\n        if (this.isCellFree(basicRow, basicCol + 1)) {\n          leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\n          rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol + 2);\n        } else {\n          leftCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\n          rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol + 3);\n        }\n      } else {\n        leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\n        rightCornerCell = this.getCellByPosition(basicRow + 3, 1);\n      }\n    }\n\n    return {\n      start: leftCornerCell,\n      end: rightCornerCell\n    };\n  };\n\n  public getCell(src, basicRow, basicCol, columns): any {\n    let cell, col, row;\n\n    if (this.isMobileLayout) {\n      // mobile layout\n      for (col = basicCol; col < columns; col++) {\n        if (!src[basicRow][col].elem) {\n          cell = src[basicRow][col];\n          break;\n        }\n      }\n\n      return cell;\n    }\n\n    // desktop\n    for (col = basicCol; col < columns; col++) {\n      for (row = 0; row < 2; row++) {\n        if (!src[row + basicRow][col].elem) {\n          cell = src[row + basicRow][col];\n          break;\n        }\n      }\n\n      if (cell) {\n        return cell;\n      }\n    }\n  };\n\n  public getAvailableCellsMobile(prevCell, rowSpan, colSpan): any {\n    let leftCornerCell;\n    let rightCornerCell;\n    const basicRow = this.getBasicRow(prevCell);\n    const basicCol = prevCell && prevCell.col || 0;\n\n\n    if (colSpan === 1 && rowSpan === 1) {\n      const gridCopy = this.gridCells.slice();\n\n      if (!prevCell) {\n        leftCornerCell = gridCopy[0][0];\n      } else {\n        leftCornerCell = this.getCell(gridCopy, basicRow, basicCol, this.columns);\n\n        if (!leftCornerCell) {\n          const rowShift = this.isMobileLayout ? 1 : 2;\n          leftCornerCell = this.getCell(gridCopy, basicRow + rowShift, 0, this.columns);\n        }\n      }\n    }\n\n    if (!prevCell) {\n      leftCornerCell = this.getCellByPosition(basicRow, 0);\n      rightCornerCell = this.getCellByPosition(basicRow + rowSpan - 1, 1);\n    } else if (colSpan === 2) {\n      leftCornerCell = this.getCellByPosition(basicRow + 1, 0);\n      rightCornerCell = this.getCellByPosition(basicRow + rowSpan, 1);\n    }\n\n    return {\n      start: leftCornerCell,\n      end: rightCornerCell\n    };\n  };\n\n  public getBasicRow(prevCell): any {\n    let basicRow;\n\n    if (this.isMobileLayout) {\n      if (prevCell) {\n        basicRow = prevCell && prevCell.row || 0;\n      } else {\n        basicRow = 0;\n      }\n    } else {\n      if (prevCell) {\n        basicRow = prevCell.row % 2 === 0 ? prevCell.row : prevCell.row - 1;\n      } else {\n        basicRow = 0;\n      }\n    }\n\n    return basicRow;\n  };\n\n  public isCellFree(row, col): any {\n    return !this.gridCells[row][col].elem;\n  };\n\n  public getCellIndex(srcCell): any {\n    const self = this;\n    let index;\n\n    this.gridCells.forEach((row, rowIndex) => {\n      index = _.findIndex(self.gridCells[rowIndex], (cell) => {\n        return cell === srcCell;\n      });\n\n      if (index !== -1) {\n        return;\n      }\n    });\n\n    return index !== -1 ? index : 0;\n  };\n\n  public reserveCells(start, end, elem) {\n    this.gridCells.forEach((row) => {\n      row.forEach((cell) => {\n        if (cell.row >= start.row && cell.row <= end.row &&\n          cell.col >= start.col && cell.col <= end.col) {\n          cell.elem = elem;\n        }\n      });\n    });\n  };\n\n  public clearElements() {\n    this.gridCells.forEach((row) => {\n      row.forEach((tile) => {\n        tile.elem = null;\n      });\n    });\n  };\n\n  public setAvailableColumns(columns): any {\n    this.isMobileLayout = columns === MOBILE_LAYOUT_COLUMNS;\n    this.columns = columns;\n\n    return this;\n  };\n\n  public generateGrid(singleTileWidth ? ): any {\n    const self = this,\n      tileWidth = singleTileWidth || this.opts.tileWidth,\n      offset = document.querySelector('.pip-draggable-group-title').getBoundingClientRect();\n    let colsInRow = 0,\n      rows = 0,\n      gridInRow = [];\n\n    this.gridCells = [];\n\n    this.tiles.forEach((tile, index, srcTiles) => {\n      const tileSize = tile.getSize();\n\n      generateCells(tileSize.colSpan);\n\n      if (srcTiles.length === index + 1) {\n        if (colsInRow < self.columns) {\n          generateCells(self.columns - colsInRow);\n        }\n\n        // Generate more cells for extends tile size to big\n        if (self.tiles.length * 2 > self.gridCells.length) {\n          Array.apply(null, Array(self.tiles.length * 2 - self.gridCells.length)).forEach(() => {\n            generateCells(self.columns);\n          });\n        }\n      }\n    });\n\n    function generateCells(newCellCount) {\n      Array.apply(null, Array(newCellCount)).forEach(() => {\n        if (self.columns < colsInRow + 1) {\n          rows++;\n          colsInRow = 0;\n\n          self.gridCells.push(gridInRow);\n          gridInRow = [];\n        }\n\n        let top = rows * self.opts.tileHeight + (rows ? rows * self.opts.gutter : 0) + offset.height;\n        let left = colsInRow * tileWidth + (colsInRow ? colsInRow * self.opts.gutter : 0);\n\n        // Describe grid cell size through block corners coordinates\n        gridInRow.push({\n          top: top,\n          left: left,\n          bottom: top + self.opts.tileHeight,\n          right: left + tileWidth,\n          row: rows,\n          col: colsInRow\n        });\n\n        colsInRow++;\n      });\n    }\n\n    return this;\n  };\n\n  public setTilesDimensions(onlyPosition, draggedTile): any {\n    const self = this;\n    let currIndex = 0;\n    let prevCell;\n\n    if (onlyPosition) {\n      self.clearElements();\n    }\n\n    this.tiles.forEach((tile) => {\n      const tileSize = tile.getSize();\n      let startCell;\n      let width;\n      let height;\n      let cells;\n\n      tile.updateElem('.pip-draggable-tile');\n      if (tileSize.colSpan === 1) {\n        if (prevCell && prevCell.elem.size.colSpan === 2 && prevCell.elem.size.rowSpan === 1) {\n          startCell = self.getCells(self.getCellByPosition(prevCell.row, prevCell.col - 1), 1, 1).start;\n        } else {\n          startCell = self.getCells(prevCell, 1, 1).start;\n        }\n\n\n        if (!onlyPosition) {\n          width = startCell.right - startCell.left;\n          height = startCell.bottom - startCell.top;\n        }\n\n        prevCell = startCell;\n\n        self.reserveCells(startCell, startCell, tile);\n\n        currIndex++;\n      } else if (tileSize.colSpan === 2) {\n        cells = self.getCells(prevCell, tileSize.rowSpan, tileSize.colSpan);\n        startCell = cells.start;\n\n        if (!onlyPosition) {\n          width = cells.end.right - cells.start.left;\n          height = cells.end.bottom - cells.start.top;\n        }\n\n        prevCell = cells.end;\n\n        self.reserveCells(cells.start, cells.end, tile);\n\n        currIndex += 2;\n      }\n\n      // Render preview\n      // while tiles from group is dragged\n      if (draggedTile === tile) {\n        tile.setPreviewPosition({\n          left: startCell.left,\n          top: startCell.top\n        });\n\n        return;\n      }\n\n      if (!onlyPosition) {\n        tile.setSize(width, height);\n      }\n\n      tile.setPosition(startCell.left, startCell.top);\n    });\n\n    return this;\n  };\n\n  public calcContainerHeight(): any {\n    let maxHeightSize, maxWidthSize;\n\n    if (!this.tiles.length) {\n      return this;\n    }\n\n    maxHeightSize = _.maxBy(this.tiles, (tile) => {\n      const tileSize = tile['getSize']();\n      return tileSize.top + tileSize.height;\n    })['getSize']();\n\n    this.elem.style.height = maxHeightSize.top + maxHeightSize.height + 'px';\n\n    if (this.inline) {\n      maxWidthSize = _.maxBy(this.tiles, (tile) => {\n        const tileSize = tile['getSize']();\n        return tileSize.left + tileSize.width;\n      })['getSize']();\n\n      this.elem.style.width = maxWidthSize.left + maxWidthSize.width + 'px';\n    }\n\n    return this;\n  };\n\n  public getTileByNode(node): any {\n    const foundTile = this.tiles.filter((tile) => {\n      return node === tile.getElem();\n    });\n\n    return foundTile.length ? foundTile[0] : null;\n  };\n\n  public getTileByCoordinates(coords, draggedTile): any {\n    return this.tiles\n      .filter((tile) => {\n        const tileSize = tile.getSize();\n\n        return tile !== draggedTile &&\n          tileSize.left <= coords.left && coords.left <= (tileSize.left + tileSize.width) &&\n          tileSize.top <= coords.top && coords.top <= (tileSize.top + tileSize.height);\n      })[0] || null;\n  };\n\n  public getTileIndex(tile): any {\n    return _.findIndex(this.tiles, tile);\n  };\n\n  public swapTiles(movedTile, beforeTile): any {\n    const movedTileIndex = _.findIndex(this.tiles, movedTile);\n    const beforeTileIndex = _.findIndex(this.tiles, beforeTile);\n\n    this.tiles.splice(movedTileIndex, 1);\n    this.tiles.splice(beforeTileIndex, 0, movedTile);\n\n    return this;\n  };\n\n  public removeTile(removeTile): any {\n    let droppedTile;\n\n    this.tiles.forEach((tile, index, tiles) => {\n      if (tile === removeTile) {\n        droppedTile = tiles.splice(index, 1)[0];\n        return false;\n      }\n    });\n\n    return droppedTile;\n  };\n\n  public updateTileOptions(opts): any {\n    const index = _.findIndex(this.tiles, (tile) => {\n      return tile['getOptions']() === opts;\n    });\n\n    if (index !== -1) {\n      this.tiles[index].setOptions(opts);\n      return true;\n    }\n\n    return false;\n  };\n}\n\n\nangular\n  .module('pipDraggableTilesGroup')\n  .service('pipTilesGrid', function () {\n    return function (tiles, options, columns, elem) {\n      const newGrid = new TilesGridService(tiles, options, columns, elem);\n\n      return newGrid;\n    }\n  });","angular\n    .module('pipDraggableTilesGroup', []);\n\nimport './TileGroupDirective';\nimport './TileGroupService';","export interface ITileTemplateService {\n    getTemplate(source, tpl ? , tileScope ? , strictCompile ? ): any;\n    setImageMarginCSS($element, image): void;\n} \n\n{\n    class tileTemplateService implements ITileTemplateService {\n        private _$interpolate: angular.IInterpolateService;\n        private _$compile: angular.ICompileService;\n        private _$templateRequest: angular.ITemplateRequestService;\n\n        constructor(\n            $interpolate: angular.IInterpolateService,\n            $compile: angular.ICompileService,\n            $templateRequest: angular.ITemplateRequestService\n        ) {\n            this._$interpolate = $interpolate;\n            this._$compile = $compile;\n            this._$templateRequest = $templateRequest;\n        }\n\n        public getTemplate(source, tpl ? , tileScope ? , strictCompile ? ): any {\n            const {\n                template,\n                templateUrl,\n                type\n            } = source;\n            let result;\n\n            if (type) {\n                const interpolated = tpl ? this._$interpolate(tpl)(source) : this._$interpolate(template)(source);\n                return strictCompile == true ?\n                    (tileScope ? this._$compile(interpolated)(tileScope) : this._$compile(interpolated)) :\n                    interpolated;\n            }\n\n            if (template) {\n                return tileScope ? this._$compile(template)(tileScope) : this._$compile(template);\n            }\n\n            if (templateUrl) {\n                this._$templateRequest(templateUrl, false).then((html) => {\n                    result = tileScope ? this._$compile(html)(tileScope) : this._$compile(html);\n                });\n            }\n\n            return result;\n        }\n\n        public setImageMarginCSS($element, image) {\n            let\n                containerWidth = $element.width ? $element.width() : $element.clientWidth,\n                containerHeight = $element.height ? $element.height() : $element.clientHeight,\n                imageWidth = (image[0] ? image[0].naturalWidth : image.naturalWidth) || image.width,\n                imageHeight = (image[0] ? image[0].naturalHeight : image.naturalWidth) || image.height,\n                margin = 0,\n                cssParams = {};\n\n            if ((imageWidth / containerWidth) > (imageHeight / containerHeight)) {\n                margin = -((imageWidth / imageHeight * containerHeight - containerWidth) / 2);\n                cssParams['margin-left'] = '' + margin + 'px';\n                cssParams['height'] = '' + containerHeight + 'px'; //'100%';\n                cssParams['width'] = '' + imageWidth * containerHeight / imageHeight + 'px'; //'100%';\n                cssParams['margin-top'] = '';\n            } else {\n                margin = -((imageHeight / imageWidth * containerWidth - containerHeight) / 2);\n                cssParams['margin-top'] = '' + margin + 'px';\n                cssParams['height'] = '' + imageHeight * containerWidth / imageWidth + 'px'; //'100%';\n                cssParams['width'] = '' + containerWidth + 'px'; //'100%';\n                cssParams['margin-left'] = '';\n            }\n\n            $(image).css(cssParams);\n        }\n    }\n\n    // image load directive TODO: remove to pipImageUtils\n    const ImageLoad = function ImageLoad($parse: ng.IParseService): ng.IDirective {\n        return {\n            restrict: 'A',\n            link: function (scope: ng.IScope, element: JQuery, attrs: any) {\n                const callback = $parse(attrs.pipImageLoad);\n\n                element.bind('load', (event) => {\n                    callback(scope, {\n                        $event: event\n                    });\n                });\n            }\n        }\n    }\n\n    angular\n        .module('pipDashboard')\n        .service('pipTileTemplate', tileTemplateService)\n        .directive('pipImageLoad', ImageLoad);\n}","(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('add_tile_dialog/AddTile.html',\n    '<md-dialog class=\"pip-dialog pip-add-component-dialog\"><md-dialog-content class=\"layout-column\"><div class=\"theme-divider p16 flex-auto\"><h3 class=\"hide-xs m0 bm16 theme-text-primary\" hide-xs=\"\">{{ \\'DASHBOARD_ADD_TILE_DIALOG_TITLE\\' | translate }}<md-input-container class=\"layout-row flex-auto m0 tm16\"><md-select class=\"flex-auto m0 theme-text-primary\" ng-model=\"dialogCtrl.activeGroupIndex\" placeholder=\"{{ \\'DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP\\' | translate }}\" aria-label=\"Group\"><md-option ng-value=\"$index\" ng-repeat=\"group in dialogCtrl.groups\">{{ group }}</md-option></md-select></md-input-container></h3></div><div class=\"pip-body pip-scroll p0 flex-auto\"><p class=\"md-body-1 theme-text-secondary m0 lp16 rp16\">{{ \\'DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS\\' | translate }}</p><md-list ng-init=\"groupIndex = $index\" ng-repeat=\"group in dialogCtrl.defaultWidgets\"><md-list-item class=\"layout-row pip-list-item lp16 rp16\" ng-repeat=\"item in group\"><div class=\"icon-holder flex-none\"><md-icon md-svg-icon=\"icons:{{:: item.icon }}\"></md-icon><div class=\"pip-badge theme-badge md-warn\" ng-if=\"item.amount\"><span>{{ item.amount }}</span></div></div><span class=\"flex-auto lm24 theme-text-primary\">{{:: item.title }}</span><md-button class=\"md-icon-button flex-none\" ng-click=\"dialogCtrl.encrease(groupIndex, $index)\" aria-label=\"Encrease\"><md-icon md-svg-icon=\"icons:plus-circle\"></md-icon></md-button><md-button class=\"md-icon-button flex-none\" ng-click=\"dialogCtrl.decrease(groupIndex, $index)\" aria-label=\"Decrease\"><md-icon md-svg-icon=\"icons:minus-circle\"></md-icon></md-button></md-list-item><md-divider class=\"lm72 tm8 bm8\" ng-if=\"groupIndex !== (dialogCtrl.defaultWidgets.length - 1)\"></md-divider></md-list></div></md-dialog-content><md-dialog-actions class=\"flex-none layout-align-end-center theme-divider divider-top theme-text-primary\"><md-button ng-click=\"dialogCtrl.cancel()\" aria-label=\"Cancel\">{{ \\'CANCEL\\' | translate }}</md-button><md-button ng-click=\"dialogCtrl.add()\" ng-disabled=\"dialogCtrl.totalWidgets === 0\" arial-label=\"Add\">{{ \\'ADD\\' | translate }}</md-button></md-dialog-actions></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('calendar_tile/CalendarTile.html',\n    '<div class=\"widget-box pip-calendar-widget {{ $ctrl.color }} layout-column layout-fill tp0\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\"><div class=\"widget-heading layout-row layout-align-end-center flex-none\"><pip-tile-menu></pip-tile-menu></div><div class=\"widget-content flex-auto layout-row layout-align-center-center\" ng-if=\"$ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1\"><span class=\"date lm24 rm12\">{{ $ctrl.options.date.getDate() }}</span><div class=\"flex-auto layout-column\"><span class=\"weekday md-headline\">{{ $ctrl.options.date | formatLongDayOfWeek }}</span> <span class=\"month-year md-headline\">{{ $ctrl.options.date | formatLongMonth }} {{ $ctrl.options.date | formatYear }}</span></div></div><div class=\"widget-content flex-auto layout-column layout-align-space-around-center\" ng-hide=\"$ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1\"><span class=\"weekday md-headline\" ng-hide=\"$ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1\">{{ $ctrl.options.date | formatLongDayOfWeek }}</span> <span class=\"weekday\" ng-show=\"$ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1\">{{ $ctrl.options.date | formatLongDayOfWeek }}</span> <span class=\"date lm12 rm12\">{{ $ctrl.options.date.getDate() }}</span> <span class=\"month-year md-headline\">{{ $ctrl.options.date | formatLongMonth }} {{ $ctrl.options.date | formatYear }}</span></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('calendar_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch bm16\">Date:<md-datepicker ng-model=\"$ctrl.date\" class=\"w-stretch\"></md-datepicker></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('config_tile_dialog/ConfigDialog.html',\n    '<md-dialog class=\"pip-dialog pip-tile-config-dialog {{ vm.params.dialogClass }}\" width=\"400\" md-theme=\"{{vm.theme}}\"><pip-tile-config-extend-component class=\"layout-column\" pip-dialog-scope=\"vm\" pip-extension-url=\"vm.extensionUrl\" pip-apply=\"vm.onApply(updatedData)\"></pip-tile-config-extend-component></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('config_tile_dialog/ConfigDialogExtendComponent.html',\n    '<h3 class=\"tm0 flex-none\">{{ \\'DASHBOARD_TILE_CONFIG_DIALOG_TITLE\\' | translate }}</h3><div class=\"pip-body pip-scroll p16 bp0 flex-auto\"><pip-extension-point></pip-extension-point><pip-toggle-buttons class=\"bm16\" ng-if=\"!$ctrl.hideSizes\" pip-buttons=\"$ctrl.sizes\" ng-model=\"$ctrl.sizeId\"></pip-toggle-buttons><pip-color-picker ng-if=\"!$ctrl.hideColors\" pip-colors=\"$ctrl.colors\" ng-model=\"$ctrl.color\"></pip-color-picker></div><div class=\"pip-footer flex-none\"><div><md-button class=\"md-accent\" ng-click=\"$ctrl.onCancel()\">{{ \\'CANCEL\\' | translate }}</md-button><md-button class=\"md-accent\" ng-click=\"$ctrl.onApply()\">{{ \\'APPLY\\' | translate }}</md-button></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('dashboard/Dashboard.html',\n    '<md-button class=\"md-accent md-raised md-fab layout-column layout-align-center-center\" aria-label=\"Add component\" ng-click=\"$ctrl.addComponent()\"><md-icon md-svg-icon=\"icons:plus\" class=\"md-headline centered-add-icon\"></md-icon></md-button><div class=\"pip-draggable-grid-holder\"><pip-draggable-grid pip-tiles-templates=\"$ctrl.groupedWidgets\" pip-tiles-context=\"$ctrl.widgetsContext\" pip-draggable-grid=\"$ctrl.draggableGridOptions\" pip-group-menu-actions=\"$ctrl.groupMenuActions\"></pip-draggable-grid><md-progress-circular md-mode=\"indeterminate\" class=\"progress-ring\"></md-progress-circular></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('event_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch\"><md-input-container class=\"w-stretch bm0\"><label>Title:</label> <input type=\"text\" ng-model=\"$ctrl.title\"></md-input-container>Date:<md-datepicker ng-model=\"$ctrl.date\" class=\"w-stretch bm8\"></md-datepicker><md-input-container class=\"w-stretch\"><label>Description:</label> <textarea type=\"text\" ng-model=\"$ctrl.text\">\\n' +\n    '    </textarea></md-input-container>Backdrop\\'s opacity:<md-slider aria-label=\"opacity\" type=\"number\" min=\"0.1\" max=\"0.9\" step=\"0.01\" ng-model=\"$ctrl.opacity\" ng-change=\"$ctrl.onOpacitytest($ctrl.opacity)\"></md-slider></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('event_tile/EventTile.html',\n    '<div class=\"widget-box pip-event-widget {{ $ctrl.color }} layout-column layout-fill\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\"><img ng-if=\"$ctrl.options.image\" ng-src=\"{{$ctrl.options.image}}\" alt=\"{{$ctrl.options.title || $ctrl.options.name}}\"><div class=\"text-backdrop\" style=\"background-color: rgba(0, 0, 0, {{ $ctrl.opacity }})\"><div class=\"widget-heading layout-row layout-align-start-center flex-none\"><span class=\"widget-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span><pip-tile-menu ng-if=\"!$ctrl.options.hideMenu\"></pip-tile-menu></div><div class=\"text-container flex-auto pip-scroll\"><p class=\"date flex-none\" ng-if=\"$ctrl.options.date\">{{ $ctrl.options.date | formatShortDate }}</p><p class=\"text flex-auto\">{{ $ctrl.options.text || $ctrl.options.description }}</p></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('draggable/Draggable.html',\n    '<div class=\"pip-draggable-holder\"><div class=\"pip-draggable-group\" ng-repeat=\"group in $ctrl.groups\" data-group-id=\"{{ $index }}\" pip-draggable-tiles=\"group.source\"><div class=\"pip-draggable-group-title layout-row layout-align-start-center\"><div class=\"title-input-container\" ng-click=\"$ctrl.onTitleClick(group, $event)\"><input ng-if=\"group.editingName\" ng-blur=\"$ctrl.onBlurTitleInput(group)\" ng-keypress=\"$ctrl.onKyepressTitleInput(group, $event)\" ng-model=\"group.title\"><div class=\"text-overflow flex-none\" ng-if=\"!group.editingName\">{{ group.title }}</div></div><md-button class=\"md-icon-button flex-none layout-align-center-center\" ng-show=\"group.editingName\" ng-click=\"$ctrl.cancelEditing(group)\" aria-label=\"Cancel\"><md-icon md-svg-icon=\"icons:cross\"></md-icon></md-button><md-menu class=\"flex-none layout-column\" md-position-mode=\"target-right target\" ng-show=\"!group.editingName\"><md-button class=\"md-icon-button flex-none layout-align-center-center\" ng-click=\"$mdOpenMenu(); groupId = $index\" aria-label=\"Menu\"><md-icon md-svg-icon=\"icons:dots\"></md-icon></md-button><md-menu-content width=\"4\"><md-menu-item ng-repeat=\"action in $ctrl.groupMenuActions\"><md-button ng-click=\"action.callback(groupId)\">{{ action.title }}</md-button></md-menu-item></md-menu-content></md-menu></div></div><div class=\"pip-draggable-group fict-group layout-align-center-center layout-column tm16\"><div class=\"fict-group-text-container\"><md-icon md-svg-icon=\"icons:plus\"></md-icon>{{ \\'DROP_TO_CREATE_NEW_GROUP\\' | translate }}</div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('menu_tile/MenuTile.html',\n    '<md-menu class=\"widget-menu\" md-position-mode=\"target-right target\"><md-button class=\"md-icon-button flex-none\" ng-click=\"$mdOpenMenu()\" aria-label=\"Menu\"><md-icon md-svg-icon=\"icons:vdots\"></md-icon></md-button><md-menu-content width=\"4\"><md-menu-item ng-repeat=\"item in $ctrl.menu\"><md-button ng-if=\"!item.submenu\" ng-click=\"$ctrl.callAction(item.action, item.params, item)\">{{:: item.title }}</md-button><md-menu ng-if=\"item.submenu\"><md-button ng-click=\"$ctrl.callAction(item.action)\">{{:: item.title }}</md-button><md-menu-content><md-menu-item ng-repeat=\"subitem in item.submenu\"><md-button ng-click=\"$ctrl.callAction(subitem.action, subitem.params, subitem)\">{{:: subitem.title }}</md-button></md-menu-item></md-menu-content></md-menu></md-menu-item></md-menu-content></md-menu>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('note_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch\"><md-input-container class=\"w-stretch bm0\"><label>Title:</label> <input type=\"text\" ng-model=\"$ctrl.title\"></md-input-container><md-input-container class=\"w-stretch tm0\"><label>Text:</label> <textarea type=\"text\" ng-model=\"$ctrl.text\">\\n' +\n    '    </textarea></md-input-container></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('note_tile/NoteTile.html',\n    '<div class=\"widget-box pip-notes-widget {{ $ctrl.color }} layout-column\"><div class=\"widget-heading layout-row layout-align-start-center flex-none\" ng-if=\"$ctrl.options.title || $ctrl.options.name\"><span class=\"widget-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span></div><pip-tile-menu ng-if=\"!$ctrl.options.hideMenu\"></pip-tile-menu><div class=\"text-container flex-auto pip-scroll\"><p>{{ $ctrl.options.text }}</p></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('picture_slider_tile/PictureSliderTile.html',\n    '<div class=\"widget-box pip-picture-slider-widget {{ $ctrl.color }} layout-column layout-fill\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\" index=\"{{ $ctrl.index }}\" group=\"{{ $ctrl.group }}\"><div class=\"widget-heading lp16 rp8 layout-row layout-align-end-center flex-none\"><span class=\"flex text-overflow\">{{ $ctrl.options.title }}</span><pip-tile-menu ng-if=\"!$ctrl.options.hideMenu\"></pip-tile-menu></div><div class=\"slider-container\"><div pip-image-slider=\"\" pip-animation-type=\"\\'fading\\'\" pip-animation-interval=\"$ctrl.animationInterval\" ng-if=\"$ctrl.animationType == \\'fading\\'\"><div class=\"pip-animation-block\" ng-repeat=\"slide in $ctrl.options.slides\"><img ng-src=\"{{ slide.image }}\" alt=\"{{ slide.image }}\" pip-image-load=\"$ctrl.onImageLoad($event)\"><p class=\"slide-text\" ng-if=\"slide.text\">{{ slide.text }}</p></div></div><div pip-image-slider=\"\" pip-animation-type=\"\\'carousel\\'\" pip-animation-interval=\"$ctrl.animationInterval\" ng-if=\"$ctrl.animationType == \\'carousel\\'\"><div class=\"pip-animation-block\" ng-repeat=\"slide in $ctrl.options.slides\"><img ng-src=\"{{ slide.image }}\" alt=\"{{ slide.image }}\" pip-image-load=\"$ctrl.onImageLoad($event)\"><p class=\"slide-text\" ng-if=\"slide.text\">{{ slide.text }}</p></div></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('position_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch\"><md-input-container class=\"w-stretch bm0\"><label>Location name:</label> <input type=\"text\" ng-model=\"$ctrl.locationName\"></md-input-container></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('position_tile/PositionTile.html',\n    '<div class=\"pip-position-widget widget-box p0 layout-column layout-fill\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\" index=\"{{ $ctrl.index }}\" group=\"{{ $ctrl.group }}\"><div class=\"position-absolute-right-top\" ng-if=\"!$ctrl.options.locationName\"><pip-tile-menu ng-if=\"!$ctrl.options.hideMenu\"></pip-tile-menu></div><div class=\"widget-heading lp16 rp8 layout-row layout-align-end-center flex-none\" ng-if=\"$ctrl.options.locationName\"><span class=\"flex text-overflow\">{{ $ctrl.options.locationName }}</span><pip-tile-menu ng-if=\"!$ctrl.options.hideMenu\"></pip-tile-menu></div><pip-location-map class=\"flex\" ng-if=\"$ctrl.showPosition\" pip-stretch=\"true\" pip-rebind=\"true\" pip-location-pos=\"$ctrl.options.location\"></pip-location-map></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('statistics_tile/StatisticsTile.html',\n    '<div class=\"widget-box pip-statistics-widget layout-column layout-fill\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\"><div class=\"widget-heading layout-row layout-align-start-center flex-none\"><span class=\"widget-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span><pip-tile-menu></pip-tile-menu></div><div class=\"widget-content flex-auto layout-row layout-align-center-center\" ng-if=\"$ctrl.options.series && !$ctrl.reset\"><pip-pie-chart pip-series=\"$ctrl.options.series\" ng-if=\"!$ctrl.options.chartType || $ctrl.options.chartType == \\'pie\\'\" pip-donut=\"true\" pip-pie-size=\"$ctrl.chartSize\" pip-show-total=\"true\" pip-centered=\"true\"></pip-pie-chart></div></div>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-dashboard-html.min.js.map\n"]}