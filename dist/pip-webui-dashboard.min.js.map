{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/add_tile_dialog/AddTileDialogController.ts","src/add_tile_dialog/AddTileProvider.ts","src/add_tile_dialog/index.ts","src/calendar_tile/CalendarTile.ts","src/common_tile/Tile.ts","src/config_tile_dialog/ConfigDialogController.ts","src/config_tile_dialog/ConfigDialogExtendComponent.ts","src/config_tile_dialog/ConfigDialogService.ts","src/config_tile_dialog/index.ts","src/dashboard/Dashboard.ts","src/draggable/Draggable.ts","src/draggable/DraggableTileService.ts","src/draggable/index.ts","src/event_tile/EventTile.ts","src/index.ts","src/menu_tile/MenuTileDirective.ts","src/menu_tile/MenuTileService.ts","src/menu_tile/index.ts","src/note_tile/NoteTile.ts","src/picture_slider_tile/PictureSliderTile.ts","src/position_tile/PositionTile.ts","src/statistics_tile/StatisticsTile.ts","src/tile_group/TileGroupDirective.ts","src/tile_group/TileGroupService.ts","src/tile_group/index.ts","src/utility/TileTemplateUtility.ts","temp/pip-webui-dashboard-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","dashboard","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","AddTileDialog","AddTileDialogController","groups","activeGroupIndex","widgetList","$mdDialog","totalTiles","_","isNumber","defaultTiles","cloneDeep","map","group","prototype","$onInit","add","hide","groupIndex","widgets","cancel","encrease","widgetIndex","amount","decrease","widget","AddTileDialogController_1","setTranslations","$injector","pipTranslate","has","get","DASHBOARD_ADD_TILE_DIALOG_TITLE","DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS","DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP","$inject","AddTileDialogService_1","show","_this","templateUrl","bindToController","controller","controllerAs","clickOutsideToClose","AddTileDialogProvider","_widgetList","configWidgetList","list","$get","_service","config","provider","Object","defineProperty","value","MenuTileService_1","CalendarTileController","_super","pipTileConfigDialogService","options","menu","union","push","title","onConfigClick","date","Date","color","__extends","dialogClass","size","extensionUrl","result","changeSize","MenuTileService","CalendarTile","component","DashboardTile","TileColors","all","TileSizes","name","id","TileConfigDialogController","params","colors","sizes","sizeId","angular","extend","colSpan","rowSpan","onCancel","onApply","updatedData","sizeX","Number","substr","sizeY","7","TileConfigExtendComponentBindings","pipExtensionUrl","pipDialogScope","pipApply","TileConfigExtendComponentChanges","TileConfigExtendComponentController","$templateRequest","$compile","$scope","$element","$attrs","$onChanges","changes","currentValue","then","html","find","replaceWith","pipTileConfigComponent","bindings","ConfigDialogController_1","DASHBOARD_TILE_CONFIG_DIALOG_TITLE","DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL","DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE","DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE","TileConfigDialogService","successCallback","cancelCallback","targetEvent","event","locals","key","9","./ConfigDialogExtendComponent","./ConfigDialogService","10","DROP_TO_CREATE_NEW_GROUP","pipAddTileDialogProvider","icon","configureAvailableWidgets","DEFAULT_GRID_OPTIONS_1","draggableOptions","tileWidth","DashboardController","$rootScope","$timeout","$interpolate","pipAddTileDialog","pipTileTemplate","defaultGroupMenuActions","callback","addComponent","removeGroup","console","log","_includeTpl","groupMenuActions","groupedWidgets","splice","addClass","draggableGridOptions","gridOptions","inline","groupAdditionalActions","widgetsContext","compileWidgets","removedWidgets","source","index","click","item","object","removeWidget","opts","template","getTemplate","data","activeGroup","addWidgets","widgetGroup","forEach","Array","apply","type","Dashboard","11","DraggableTileService_1","TileGroupService_1","DEFAULT_TILE_WIDTH","DEFAULT_TILE_HEIGHT","UPDATE_GROUPS_EVENT","DEFAULT_OPTIONS","tileHeight","gutter","DraggableController","pipDragTile","pipTilesGrid","pipMedia","sourceDropZoneElem","isSameDropzone","merge","breakpoints","xs","tilesTemplates","tile","tileScope","createTileScope","IDragTileConstructor","DragTileService","tpl","$watch","newVal","watch","debounce","getContainerWidth","getAvailableColumns","availableWidth","tileGroups","setAvailableColumns","availableColumns","generateGrid","getSingleTileWidthForMobile","setTilesDimensions","calcContainerHeight","$postLink","$container","prevVal","changedGroupIndex","addGroup","removeGroups","groupWidgetDiff","newTiles","slice","each","addTilesIntoGroup","groupsContainers","updateTilesGroups","removeTiles","updateTilesOptions","onTitleClick","editingName","oldTitle","clone","$","currentTarget","children","focus","cancelEditing","onBlurTitleInput","$broadcast","onKyepressTitleInput","keyCode","updateTilesTemplates","updateType","_a","fromIndex","from","elem","attributes","toIndex","to","tileOptions","fromTileIndex","reIndexTiles","$new","tilesContext","undefined","indexes","container","tiles","remove","gIndex","child","element","scope","newGroups","removeIndexes","remain","containers","findIndex","reverse","sourceGroup","$$phase","$apply","document","querySelectorAll","groupContaninerSelector","ITilesGridConstructor","TilesGridService","groupContainer","newTile","addTile","append","getCompiledTemplate","appendTo","optionsGroup","optionGroup","updateTileOptions","initTilesGroups","onlyPosition","draggedTile","width","mobileBreakpoint","Math","floor","getActiveGroupAndTile","foundTile","getTileByNode","active","onDragStartListener","activeEntities","target","parent","activeDraggedGroup","startDrag","onDragMoveListener","x","parseFloat","style","left","dx","y","top","dy","containerOffset","getContainerOffset","belowElement","getTileByCoordinates","pageX","pageY","getTileIndex","swapTiles","setGroupContainersHeight","onDragEndListener","stopDrag","removeClass","containerRect","getBoundingClientRect","tileGroup","moveTile","movedTile","removeTile","getElem","bind","onDropListener","droppedGroupIndex","droppedGroup","onDropToFictGroupListener","onDropEnterListener","dragEvent","dragEnter","classList","css","onDropDeactivateListener","activeDropzoneClass","onDropLeaveListener","initialize","draggable","enabled","speed","onstart","onmove","onend","dropzone","ondrop","ondragenter","ondropdeactivate","ondragleave","on","interact","trigger","DragComponent","../tile_group/TileGroupService","./DraggableTileService","12","constructor","DEFAULT_TILE_SIZE","getSize","setSize","height","setPosition","updateElem","preview","position","zIndex","after","isAnimate","onTransitionEnd","off","setPreviewPosition","coords","getOptions","setOptions","__","d","extendStatics","b","create","EventTileController","opacity","is","drawImage","image","onImageLoad","text","onOpacitytest","_oldOpacity","setImageMarginCSS","containerWidth","clientWidth","containerHeight","clientHeight","imageWidth","naturalWidth","imageHeight","naturalHeight","margin","cssParams","EventTile","../menu_tile/MenuTileService","15","./calendar_tile/CalendarTile","./common_tile/Tile","./config_tile_dialog","./dashboard/Dashboard","./draggable","./event_tile/EventTile","./menu_tile","./note_tile/NoteTile","./picture_slider_tile/PictureSliderTile","./position_tile/PositionTile","./statistics_tile/StatisticsTile","./tile_group/index","./utility/TileTemplateUtility","16","TileMenu","restrict","noop","action","callAction","actionName","MenuTileProvider","../common_tile/Tile","18","m","p","hasOwnProperty","NoteTileController","NoteTile","PictureSliderController","animationInterval","animationType","$event","PictureSliderTile","PositionTileController","pipLocationEditDialog","showPosition","openLocationEditDialog","location","reDrawPosition","locationName","hideColors","locationPos","newPosition","locatioName","PositionTile","StatisticsTileController","reset","chartSize","SMALL_CHART_1","_$timeout","setChartSize","StatisticsTile","23","DraggableTileLink","$elem","$attr","wrapComponent","docFrag","createDocumentFragment","$eval","pipDraggableTiles","appendChild","DraggableTiles","link","directive","24","columns","gridCells","isMobileLayout","MOBILE_LAYOUT_COLUMNS","getCellByPosition","row","col","getCells","prevCell","getAvailableCellsMobile","getAvailableCellsDesktop","leftCornerCell","basicCol","basicRow","getBasicRow","gridCopy","getCell","rowShift","prevTileSize","rightCornerCell","isCellFree","start","end","src","cell","getCellIndex","srcCell","rowIndex","reserveCells","clearElements","singleTileWidth","newCellCount","colsInRow","rows","gridInRow","offset","bottom","right","querySelector","srcTiles","generateCells","currIndex","startCell","cells","tileSize","maxHeightSize","maxWidthSize","maxBy","node","filter","beforeTile","movedTileIndex","beforeTileIndex","droppedTile","25","./TileGroupService","26","tileTemplateService","_$interpolate","_$compile","_$templateRequest","strictCompile","interpolated","$parse","attrs","pipImageLoad","ImageLoad","service","27","run","$templateCache","put"],"mappings":"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","file":"pip-webui-dashboard.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export class AddTileDialog {\r\n    title: string;\r\n    icon: string;\r\n    name: string;\r\n    amount: number;\r\n}\r\n\r\nexport class AddTileDialogController implements ng.IController {\r\n    public defaultTiles: [AddTileDialog[]];\r\n    public groups: any;\r\n    public totalTiles: number = 0;\r\n\r\n    constructor(\r\n        groups: any,\r\n        public activeGroupIndex: number,\r\n        widgetList: [AddTileDialog[]],\r\n        public $mdDialog: angular.material.IDialogService\r\n    ) {\r\n        this.activeGroupIndex = _.isNumber(activeGroupIndex) ? activeGroupIndex : -1;\r\n        this.defaultTiles = _.cloneDeep(widgetList);\r\n        this.groups = _.map(groups, function (group) {\r\n            return group['title'];\r\n        });\r\n    }\r\n\r\n    public $onInit() {}\r\n    \r\n    public add() {\r\n        this.$mdDialog.hide({\r\n            groupIndex: this.activeGroupIndex,\r\n            widgets: this.defaultTiles\r\n        });\r\n    };\r\n\r\n    public cancel() {\r\n        this.$mdDialog.cancel();\r\n    };\r\n\r\n    public encrease(groupIndex: number, widgetIndex: number) {\r\n        const widget = this.defaultTiles[groupIndex][widgetIndex];\r\n        widget.amount++;\r\n        this.totalTiles++;\r\n    };\r\n\r\n    public decrease(groupIndex: number, widgetIndex: number) {\r\n        const widget = this.defaultTiles[groupIndex][widgetIndex];\r\n        widget.amount = widget.amount ? widget.amount - 1 : 0;\r\n        this.totalTiles = this.totalTiles ? this.totalTiles - 1 : 0;\r\n    };\r\n}","import {\r\n  AddTileDialog,\r\n  AddTileDialogController\r\n} from './AddTileDialogController';\r\n\r\nexport interface IAddTileDialogService {\r\n  show(groups, activeGroupIndex): angular.IPromise < any > ;\r\n}\r\n\r\nexport interface IAddTileDialogprovider {\r\n  configWidgetList(list: [AddTileDialog[]]): void;\r\n}\r\n\r\n{\r\n  const setTranslations = function($injector: ng.auto.IInjectorService) {\r\n    const pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\r\n    if (pipTranslate) {\r\n      (<any>pipTranslate).setTranslations('en', {\r\n        DASHBOARD_ADD_TILE_DIALOG_TITLE: 'Add component',\r\n        DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS: 'Use \"Enter\" or \"+\" buttons on keyboard to encrease and \"Delete\" or \"-\" to decrease tiles amount',\r\n        DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP: 'Create new group'\r\n      });\r\n      (<any>pipTranslate).setTranslations('ru', {\r\n        DASHBOARD_ADD_TILE_DIALOG_TITLE: 'Добавить компонент',\r\n        DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS: 'Используйте \"Enter\" или \"+\" клавиши на клавиатуре чтобы увеличить и \"Delete\" or \"-\" чтобы уменшить количество тайлов',\r\n        DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP: 'Создать новую группу'\r\n      });\r\n    }\r\n  }\r\n\r\n  class AddTileDialogService implements IAddTileDialogService {\r\n    public constructor(\r\n      private widgetList: [AddTileDialog[]],\r\n      private $mdDialog: angular.material.IDialogService\r\n    ) {}\r\n\r\n    public show(groups, activeGroupIndex) {\r\n      return this.$mdDialog\r\n        .show({\r\n          templateUrl: 'add_tile_dialog/AddTile.html',\r\n          bindToController: true,\r\n          controller: AddTileDialogController,\r\n          controllerAs: 'dialogCtrl',\r\n          clickOutsideToClose: true,\r\n          resolve: {\r\n            groups: () => {\r\n              return groups;\r\n            },\r\n            activeGroupIndex: () => {\r\n              return activeGroupIndex;\r\n            },\r\n            widgetList: () => {\r\n              return (<any>this.widgetList);\r\n            }\r\n          }\r\n        });\r\n    };\r\n  }\r\n\r\n  class AddTileDialogProvider implements IAddTileDialogprovider {\r\n    private _service: AddTileDialogService;\r\n    private _widgetList: [AddTileDialog[]] = null;\r\n\r\n    constructor() {}\r\n\r\n    public configWidgetList = function (list: [AddTileDialog[]]) {\r\n      this._widgetList = list;\r\n    };\r\n\r\n    public $get($mdDialog: angular.material.IDialogService) {\r\n      \"ngInject\";\r\n\r\n      if (this._service == null)\r\n        this._service = new AddTileDialogService(this._widgetList, $mdDialog);\r\n\r\n      return this._service;\r\n    }\r\n  }\r\n\r\n  angular\r\n    .module('pipAddDashboardTileDialog')\r\n    .config(setTranslations)\r\n    .provider('pipAddTileDialog', AddTileDialogProvider);\r\n}","angular\r\n    .module('pipAddDashboardTileDialog', ['ngMaterial']);\r\n\r\nimport './AddTileDialogController';\r\nimport './AddTileProvider';","import {\r\n  MenuTileService\r\n} from '../menu_tile/MenuTileService';\r\nimport {\r\n  ITileConfigService\r\n} from '../config_tile_dialog/ConfigDialogService';\r\n\r\n{\r\n  class CalendarTileController extends MenuTileService {\r\n    constructor(\r\n      private pipTileConfigDialogService: ITileConfigService\r\n    ) {\r\n      super();\r\n\r\n      if (this.options) {\r\n        this.menu = this.options.menu ? _.union(this.menu, this.options.menu) : this.menu;\r\n        this.menu.push({\r\n          title: 'Configurate',\r\n          click: () => {\r\n            this.onConfigClick();\r\n          }\r\n        });\r\n        this.options.date = this.options.date || new Date();\r\n        this.color = this.options.color || 'blue';\r\n      }\r\n    }\r\n\r\n    private onConfigClick() {\r\n      this.pipTileConfigDialogService.show({\r\n        dialogClass: 'pip-calendar-config',\r\n        locals: {\r\n          color: this.color,\r\n          size: this.options.size,\r\n          date: this.options.date,\r\n        },\r\n        extensionUrl: 'calendar_tile/ConfigDialogExtension.html'\r\n      }, (result: any) => {\r\n        this.changeSize(result.size);\r\n\r\n        this.color = result.color;\r\n        this.options.color = result.color;\r\n        this.options.date = result.date;\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  const CalendarTile: ng.IComponentOptions = {\r\n    bindings: {\r\n      options: '=pipOptions',\r\n    },\r\n    controller: CalendarTileController,\r\n    templateUrl: 'calendar_tile/CalendarTile.html'\r\n  }\r\n\r\n  angular\r\n    .module('pipDashboard')\r\n    .component('pipCalendarTile', CalendarTile);\r\n\r\n}","export interface IDashboardTile {\r\n    options: any;\r\n    color: string;\r\n    size: Object | string | number;\r\n}\r\n\r\nexport class DashboardTile implements IDashboardTile {\r\n    public options: any;\r\n    public color: string;\r\n    public size: Object | string | number;\r\n\r\n    constructor() { }\r\n}","\r\nclass TileColors {\r\n    static all: string[] = ['purple', 'green', 'gray', 'orange', 'blue'];\r\n}\r\n\r\nclass TileSizes {\r\n    static all: any = [{\r\n            name: 'DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL',\r\n            id: '11'\r\n        },\r\n        {\r\n            name: 'DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE',\r\n            id: '21'\r\n        },\r\n        {\r\n            name: 'DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE',\r\n            id: '22'\r\n        }\r\n    ];\r\n}\r\n\r\nexport class TileConfigDialogController {\r\n    public colors: string[] = TileColors.all;\r\n    public sizes: any = TileSizes.all;\r\n    public sizeId: string = TileSizes.all[0].id;\r\n    public onCancel: Function;\r\n\r\n    constructor(\r\n        public params,\r\n        public extensionUrl,\r\n        public $mdDialog: angular.material.IDialogService\r\n    ) {\r\n        \"ngInject\";\r\n\r\n        angular.extend(this, this.params);\r\n        this.sizeId = '' + this.params.size.colSpan + this.params.size.rowSpan;\r\n\r\n        this.onCancel = () => {\r\n            this.$mdDialog.cancel();\r\n        }\r\n    }\r\n\r\n    public onApply(updatedData) {\r\n        this['size'].sizeX = Number(this.sizeId.substr(0, 1));\r\n        this['size'].sizeY = Number(this.sizeId.substr(1, 1));\r\n        this.$mdDialog.hide(updatedData);\r\n    }\r\n}","{    \r\n    interface ITileConfigExtendComponentBindings {\r\n        [key: string]: any;\r\n\r\n        pipExtensionUrl: any;\r\n        pipDialogScope: any;\r\n        pipApply: any;\r\n    }\r\n\r\n    const TileConfigExtendComponentBindings: ITileConfigExtendComponentBindings = {\r\n        pipExtensionUrl: '<',\r\n        pipDialogScope: '<',\r\n        pipApply: '&'\r\n    }\r\n\r\n    class TileConfigExtendComponentChanges implements ng.IOnChangesObject, ITileConfigExtendComponentBindings {\r\n        [key: string]: ng.IChangesObject<any>;\r\n\r\n        pipExtensionUrl: ng.IChangesObject<string>;\r\n        pipDialogScope: ng.IChangesObject<ng.IScope>;\r\n\r\n        pipApply: ng.IChangesObject<({updatedData: any}) => ng.IPromise<void>>;\r\n    }\r\n\r\n    interface ITileConfigExtendComponentAttributes extends ng.IAttributes {\r\n        pipExtensionUrl: string\r\n    }\r\n\r\n    class TileConfigExtendComponentController implements ITileConfigExtendComponentBindings {\r\n        public pipExtensionUrl: string;\r\n        public pipDialogScope: ng.IScope;\r\n        public pipApply: (param: {updatedData: any}) => ng.IPromise<void>;\r\n\r\n        constructor(\r\n            private $templateRequest: angular.ITemplateRequestService,\r\n            private $compile: angular.ICompileService,\r\n            private $scope: angular.IScope, \r\n            private $element: JQuery, \r\n            private $attrs: ITileConfigExtendComponentAttributes\r\n        ) { }\r\n\r\n        public $onChanges(changes: TileConfigExtendComponentChanges) {\r\n            if (changes.pipDialogScope) {\r\n                delete changes.pipDialogScope.currentValue['$scope'];\r\n                angular.extend(this, changes.pipDialogScope.currentValue);\r\n            }\r\n            if (changes.pipExtensionUrl && changes.pipExtensionUrl.currentValue) {\r\n                this.$templateRequest(changes.pipExtensionUrl.currentValue, false).then((html) => {\r\n                    this.$element.find('pip-extension-point').replaceWith(this.$compile(html)(this.$scope));\r\n                });\r\n            }\r\n        }\r\n\r\n        public onApply() {\r\n            this.pipApply({updatedData: this});\r\n        }\r\n    }\r\n\r\n    const pipTileConfigComponent: ng.IComponentOptions = {\r\n        templateUrl: 'config_tile_dialog/ConfigDialogExtendComponent.html',\r\n        controller: TileConfigExtendComponentController,\r\n        bindings: TileConfigExtendComponentBindings\r\n    }\r\n\r\n    angular\r\n        .module('pipConfigDashboardTileDialog')\r\n        .component('pipTileConfigExtendComponent', pipTileConfigComponent);\r\n}","import { TileConfigDialogController } from './ConfigDialogController';\r\n\r\nexport interface ITileConfigService {\r\n    show(params: ITileConfigDialogOptions, successCallback ? : (key) => void, cancelCallback ? : () => void): any;\r\n}\r\n\r\nexport interface ITileConfigDialogOptions extends angular.material.IDialogOptions {\r\n    dialogClass?: string;\r\n    extensionUrl?: string;\r\n    event?: any;\r\n}\r\n\r\n{\r\n    const setTranslations = function($injector: ng.auto.IInjectorService) {\r\n        const pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\r\n        if (pipTranslate) {\r\n            ( < any > pipTranslate).setTranslations('en', {\r\n                DASHBOARD_TILE_CONFIG_DIALOG_TITLE: 'Edit tile',\r\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL: 'Small',\r\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE: 'Wide',\r\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE: 'Large'\r\n            });\r\n            ( < any > pipTranslate).setTranslations('ru', {\r\n                DASHBOARD_TILE_CONFIG_DIALOG_TITLE: 'Изменить виджет',\r\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL: 'Мален.',\r\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE: 'Широкий',\r\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE: 'Большой'\r\n            });\r\n        }\r\n    }\r\n\r\n    class TileConfigDialogService {\r\n        public constructor(\r\n            public $mdDialog: angular.material.IDialogService\r\n        ) {}\r\n\r\n        public show(params: ITileConfigDialogOptions, successCallback ? : (key) => void, cancelCallback ? : () => void) {\r\n            this.$mdDialog.show({\r\n                    targetEvent: params.event,\r\n                    templateUrl: params.templateUrl || 'dialogs/tile_config/ConfigDialog.html',\r\n                    controller: TileConfigDialogController,\r\n                    bindToController: true,\r\n                    controllerAs: 'vm',\r\n                    locals: {\r\n                        extensionUrl: params.extensionUrl,\r\n                        params: params.locals\r\n                    },\r\n                    clickOutsideToClose: true\r\n                })\r\n                .then((key) => {\r\n                    if (successCallback) {\r\n                        successCallback(key);\r\n                    }\r\n                }, () => {\r\n                    if (cancelCallback) {\r\n                        cancelCallback();\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module('pipConfigDashboardTileDialog')\r\n        .config(setTranslations)\r\n        .service('pipTileConfigDialogService', TileConfigDialogService);\r\n}","\r\nangular\r\n    .module('pipConfigDashboardTileDialog', ['ngMaterial']);\r\n\r\nimport './ConfigDialogController';\r\nimport './ConfigDialogService';\r\nimport './ConfigDialogExtendComponent';","import {\r\n  ITileTemplateService\r\n} from '../utility/TileTemplateUtility';\r\nimport {\r\n  IAddTileDialogService,\r\n  IAddTileDialogprovider\r\n} from '../add_tile_dialog/AddTileProvider'\r\n\r\n{\r\n  const setTranslations = function ($injector: ng.auto.IInjectorService) {\r\n    const pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\r\n    if (pipTranslate) {\r\n      ( < any > pipTranslate).setTranslations('en', {\r\n        DROP_TO_CREATE_NEW_GROUP: 'Drop here to create new group',\r\n      });\r\n      ( < any > pipTranslate).setTranslations('ru', {\r\n        DROP_TO_CREATE_NEW_GROUP: 'Перетащите сюда для создания новой группы'\r\n      });\r\n    }\r\n  }\r\n\r\n  const configureAvailableWidgets = function (pipAddTileDialogProvider: IAddTileDialogprovider) {\r\n    pipAddTileDialogProvider.configWidgetList([\r\n      [{\r\n          title: 'Event',\r\n          icon: 'document',\r\n          name: 'event',\r\n          amount: 0\r\n        },\r\n        {\r\n          title: 'Position',\r\n          icon: 'location',\r\n          name: 'position',\r\n          amount: 0\r\n        }\r\n      ],\r\n      [{\r\n          title: 'Calendar',\r\n          icon: 'date',\r\n          name: 'calendar',\r\n          amount: 0\r\n        },\r\n        {\r\n          title: 'Sticky Notes',\r\n          icon: 'note-take',\r\n          name: 'notes',\r\n          amount: 0\r\n        },\r\n        {\r\n          title: 'Statistics',\r\n          icon: 'tr-statistics',\r\n          name: 'statistics',\r\n          amount: 0\r\n        }\r\n      ]\r\n    ]);\r\n  }\r\n\r\n  class draggableOptions {\r\n    tileWidth: number;\r\n    tileHeight: number;\r\n    gutter: number;\r\n    inline: boolean;\r\n  }\r\n\r\n  const DEFAULT_GRID_OPTIONS: draggableOptions = {\r\n    tileWidth: 150, // 'px'\r\n    tileHeight: 150, // 'px'\r\n    gutter: 10, // 'px'\r\n    inline: false\r\n  };\r\n\r\n  interface DashboardBindings {\r\n      gridOptions: any;\r\n      groupAdditionalActions: any;\r\n      groupedWidgets: any;\r\n  }\r\n\r\n  class DashboardController implements ng.IController, DashboardBindings {\r\n    private defaultGroupMenuActions: any = [{\r\n        title: 'Add Component',\r\n        callback: (groupIndex) => {\r\n          this.addComponent(groupIndex);\r\n        }\r\n      },\r\n      {\r\n        title: 'Remove',\r\n        callback: (groupIndex) => {\r\n          this.removeGroup(groupIndex);\r\n        }\r\n      },\r\n      {\r\n        title: 'Configurate',\r\n        callback: (groupIndex) => {\r\n          console.log('configurate group with index:', groupIndex);\r\n        }\r\n      }\r\n    ];\r\n    private _includeTpl: string = '<pip-{{ type }}-tile group=\"groupIndex\" index=\"index\"' +\r\n      'pip-options=\"$parent.$ctrl.groupedWidgets[groupIndex][\\'source\\'][index].opts\">' +\r\n      '</pip-{{ type }}-tile>';\r\n\r\n    public groupedWidgets: any;\r\n    public draggableGridOptions: draggableOptions;\r\n    public widgetsTemplates: any;\r\n    public groupMenuActions: any = this.defaultGroupMenuActions;\r\n    public widgetsContext: any;\r\n    public gridOptions: any;\r\n    public groupAdditionalActions: any;\r\n\r\n    constructor(\r\n      $scope: angular.IScope,\r\n      private $rootScope: angular.IRootScopeService,\r\n      private $attrs: any,\r\n      private $element: any,\r\n      private $timeout: angular.ITimeoutService,\r\n      private $interpolate: angular.IInterpolateService,\r\n      private pipAddTileDialog: IAddTileDialogService,\r\n      private pipTileTemplate: ITileTemplateService\r\n    ) {\r\n      // Add class to style scroll bar\r\n      $element.addClass('pip-scroll');\r\n\r\n      // Set tiles grid options\r\n      this.draggableGridOptions = this.gridOptions || DEFAULT_GRID_OPTIONS;\r\n\r\n      // Switch inline displaying\r\n      if (this.draggableGridOptions.inline === true) {\r\n        $element.addClass('inline-grid');\r\n      }\r\n      // Extend group's menu actions\r\n      if (this.groupAdditionalActions) angular.extend(this.groupMenuActions, this.groupAdditionalActions);\r\n\r\n      // Compile widgets\r\n      this.widgetsContext = $scope;\r\n      this.compileWidgets();\r\n\r\n      this.$timeout(() => {\r\n        this.$element.addClass('visible');\r\n      }, 700);\r\n    }\r\n\r\n    private compileWidgets() {\r\n      _.each(this.groupedWidgets, (group, groupIndex) => {\r\n        group.removedWidgets = group.removedWidgets || [],\r\n          group.source = group.source.map((widget, index) => {\r\n            // Establish default props\r\n            widget.size = widget.size || {\r\n              colSpan: 1,\r\n              rowSpan: 1\r\n            };\r\n            widget.index = index;\r\n            widget.groupIndex = groupIndex;\r\n            widget.menu = widget.menu || {};\r\n            angular.extend(widget.menu, [{\r\n              title: 'Remove',\r\n              click: (item, params, object) => {\r\n                this.removeWidget(item, params, object);\r\n              }\r\n            }]);\r\n\r\n            return {\r\n              opts: widget,\r\n              template: this.pipTileTemplate.getTemplate(widget, this._includeTpl)\r\n            };\r\n          })\r\n      });\r\n    }\r\n\r\n    public addComponent(groupIndex) {\r\n      this.pipAddTileDialog\r\n        .show(this.groupedWidgets, groupIndex)\r\n        .then((data) => {\r\n          var activeGroup;\r\n\r\n          if (!data) {\r\n            return;\r\n          }\r\n\r\n          if (data.groupIndex !== -1) {\r\n            activeGroup = this.groupedWidgets[data.groupIndex];\r\n          } else {\r\n            activeGroup = {\r\n              title: 'New group',\r\n              source: []\r\n            };\r\n          }\r\n\r\n          this.addWidgets(activeGroup.source, data.widgets);\r\n\r\n          if (data.groupIndex === -1) {\r\n            this.groupedWidgets.push(activeGroup);\r\n          }\r\n\r\n          this.compileWidgets();\r\n        });\r\n    };\r\n\r\n    public removeGroup = (groupIndex) => {\r\n      console.log('removeGroup', groupIndex);\r\n      this.groupedWidgets.splice(groupIndex, 1);\r\n    }\r\n\r\n    private addWidgets(group, widgets) {\r\n      widgets.forEach((widgetGroup) => {\r\n        widgetGroup.forEach((widget) => {\r\n          if (widget.amount) {\r\n            Array.apply(null, Array(widget.amount)).forEach(() => {\r\n              group.push({\r\n                type: widget.name\r\n              });\r\n            });\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    private removeWidget(item, params, object) {\r\n      this.groupedWidgets[params.options.groupIndex].removedWidgets = [];\r\n      this.groupedWidgets[params.options.groupIndex].removedWidgets.push(params.options.index);\r\n      this.groupedWidgets[params.options.groupIndex].source.splice(params.options.index, 1);\r\n      this.$timeout(() => {\r\n        this.groupedWidgets[params.options.groupIndex].removedWidgets = [];\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  const Dashboard: ng.IComponentOptions = {\r\n    bindings: {\r\n      gridOptions: '=pipGridOptions',\r\n      groupAdditionalActions: '=pipGroupActions',\r\n      groupedWidgets: '=pipGroups'\r\n    },\r\n    controller: DashboardController,\r\n    templateUrl: 'dashboard/Dashboard.html'\r\n  }\r\n\r\n  angular\r\n    .module('pipDashboard')\r\n    .config(configureAvailableWidgets)\r\n    .config(setTranslations)\r\n    .component('pipDashboard', Dashboard);\r\n\r\n}","declare var interact;\r\n\r\nimport {\r\n  DragTileService,\r\n  IDragTileService,\r\n  IDragTileConstructor\r\n} from './DraggableTileService';\r\nimport {\r\n  TilesGridService,\r\n  ITilesGridService,\r\n  ITilesGridConstructor\r\n} from '../tile_group/TileGroupService';\r\n\r\nexport const DEFAULT_TILE_WIDTH: number = 150;\r\nexport const DEFAULT_TILE_HEIGHT: number = 150;\r\nexport const UPDATE_GROUPS_EVENT = \"pipUpdateDashboardGroupsConfig\";\r\n\r\nconst SIMPLE_LAYOUT_COLUMNS_COUNT: number = 2;\r\nconst DEFAULT_OPTIONS = {\r\n  tileWidth: DEFAULT_TILE_WIDTH, // 'px'\r\n  tileHeight: DEFAULT_TILE_HEIGHT, // 'px'\r\n  gutter: 20, // 'px'\r\n  container: 'pip-draggable-grid:first-of-type',\r\n  //mobileBreakpoint       : XXX,   // Get from pipMedia Service in the constructor\r\n  activeDropzoneClass: 'dropzone-active',\r\n  groupContaninerSelector: '.pip-draggable-group:not(.fict-group)',\r\n};\r\n\r\n{\r\n  interface IDraggableBindings {\r\n      tilesTemplates: any;\r\n      tilesContext: any;\r\n      options: any;\r\n      groupMenuActions: any;\r\n      $container: JQuery;\r\n  }\r\n\r\n  interface IDraggableControllerScope extends ng.IScope {\r\n    $container: JQuery;\r\n    tilesTemplates: any;\r\n    options: any;\r\n  }\r\n\r\n  interface ITileScope extends ng.IScope {\r\n    index: number | string;\r\n    groupIndex: number | string;\r\n  }\r\n\r\n  class DraggableController implements ng.IComponentController, IDraggableBindings {\r\n    public opts: any;\r\n    public groups: any;\r\n    public sourceDropZoneElem: any = null;\r\n    public isSameDropzone: boolean = true;\r\n    public tileGroups: any = null;\r\n    public availableWidth: number;\r\n    public availableColumns: number;\r\n    public groupsContainers: any;\r\n    public container: any;\r\n    public activeDraggedGroup: any;\r\n    public draggedTile: any;\r\n    public containerOffset: any;\r\n    public tilesTemplates: any;\r\n    public tilesContext: any;\r\n    public options: any;\r\n    public groupMenuActions: any;\r\n    public $container: JQuery;\r\n\r\n    constructor(\r\n      private $scope: IDraggableControllerScope,\r\n      private $rootScope: angular.IRootScopeService,\r\n      private $compile: angular.ICompileService,\r\n      private $timeout: angular.ITimeoutService,\r\n      private $element: JQuery,\r\n      pipDragTile: IDragTileService,\r\n      pipTilesGrid: ITilesGridService,\r\n      pipMedia: pip.layouts.IMediaService\r\n    ) {\r\n      this.opts = _.merge({\r\n        mobileBreakpoint: pipMedia.breakpoints.xs\r\n      }, DEFAULT_OPTIONS, this.options);\r\n\r\n      this.groups = this.tilesTemplates.map((group, groupIndex) => {\r\n        return {\r\n          title: group.title,\r\n          editingName: false,\r\n          index: groupIndex,\r\n          source: group.source.map((tile) => {\r\n            const tileScope = this.createTileScope(tile);\r\n\r\n            return IDragTileConstructor(DragTileService, {\r\n              tpl: $compile(tile.template)(tileScope),\r\n              options: tile.opts,\r\n              size: tile.opts.size\r\n            });\r\n          })\r\n        };\r\n      });\r\n\r\n      // Add templates watcher\r\n      $scope.$watch('$ctrl.tilesTemplates', (newVal) => {\r\n        this.watch(newVal);\r\n      }, true);\r\n\r\n      // Initialize data\r\n      this.initialize();\r\n\r\n      // Resize handler TODO: replace by pip resize watchers\r\n      $(window).on('resize', _.debounce(() => {\r\n        this.availableWidth = this.getContainerWidth();\r\n        this.availableColumns = this.getAvailableColumns(this.availableWidth);\r\n\r\n        this.tileGroups.forEach((group) => {\r\n          group\r\n            .setAvailableColumns(this.availableColumns)\r\n            .generateGrid(this.getSingleTileWidthForMobile(this.availableWidth))\r\n            .setTilesDimensions()\r\n            .calcContainerHeight();\r\n        });\r\n      }, 50));\r\n    }\r\n\r\n    // Post link function\r\n    public $postLink() {\r\n      this.$container = this.$element;\r\n    }\r\n\r\n    // Watch handler\r\n    private watch(newVal) {\r\n      const prevVal = this.groups;\r\n      let changedGroupIndex = null;\r\n\r\n      if (newVal.length > prevVal.length) {\r\n        this.addGroup(newVal[newVal.length - 1]);\r\n\r\n        return;\r\n      }\r\n\r\n      if (newVal.length < prevVal.length) {\r\n        this.removeGroups(newVal);\r\n\r\n        return;\r\n      }\r\n\r\n      for (let i = 0; i < newVal.length; i++) {\r\n        const groupWidgetDiff = prevVal[i].source.length - newVal[i].source.length;\r\n        if (groupWidgetDiff || (newVal[i].removedWidgets && newVal[i].removedWidgets.length > 0)) {\r\n          changedGroupIndex = i;\r\n\r\n          if (groupWidgetDiff < 0) {\r\n            const newTiles = newVal[changedGroupIndex].source.slice(groupWidgetDiff);\r\n\r\n            _.each(newTiles, (tile) => {\r\n              console.log('tile', tile);\r\n            });\r\n\r\n            this.addTilesIntoGroup(newTiles, this.tileGroups[changedGroupIndex], this.groupsContainers[changedGroupIndex]);\r\n\r\n            this.$timeout(() => {\r\n              this.updateTilesGroups();\r\n            });\r\n          } else {\r\n            this.removeTiles(this.tileGroups[changedGroupIndex], newVal[changedGroupIndex].removedWidgets, this.groupsContainers[changedGroupIndex]);\r\n            this.updateTilesOptions(newVal);\r\n            this.$timeout(() => {\r\n              this.updateTilesGroups();\r\n            });\r\n          }\r\n\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (newVal && this.tileGroups) {\r\n        this.updateTilesOptions(newVal);\r\n        this.$timeout(() => {\r\n          this.updateTilesGroups();\r\n        });\r\n      }\r\n    }\r\n\r\n    // Inline edit group handlers\r\n    public onTitleClick(group, event) {\r\n      if (!group.editingName) {\r\n        group.oldTitle = _.clone(group.title);\r\n        group.editingName = true;\r\n        this.$timeout(() => {\r\n          $(event.currentTarget.children[0]).focus();\r\n        });\r\n      }\r\n    }\r\n\r\n    public cancelEditing(group) {\r\n      group.title = group.oldTitle;\r\n    }\r\n\r\n    public onBlurTitleInput(group) {\r\n      this.$timeout(() => {\r\n        group.editingName = false;\r\n        this.$rootScope.$broadcast(UPDATE_GROUPS_EVENT, this.groups);\r\n        // Update title in outer scope\r\n        this.tilesTemplates[group.index].title = group.title;\r\n      }, 100);\r\n    }\r\n\r\n    public onKyepressTitleInput(group, event) {\r\n      if (event.keyCode === 13) {\r\n        this.onBlurTitleInput(group);\r\n      }\r\n    }\r\n\r\n    // Update outer scope functions\r\n    private updateTilesTemplates(updateType: string, source ? : any) {\r\n      switch (updateType) {\r\n        case 'addGroup':\r\n          if (this.groups.length !== this.tilesTemplates.length) {\r\n            this.tilesTemplates.push(source);\r\n          }\r\n          break;\r\n        case 'moveTile':\r\n          const {\r\n            fromIndex,\r\n            toIndex,\r\n            tileOptions,\r\n            fromTileIndex\r\n          } = {\r\n            fromIndex: source.from.elem.attributes['data-group-id'].value,\r\n            toIndex: source.to.elem.attributes['data-group-id'].value,\r\n            tileOptions: source.tile.opts.options,\r\n            fromTileIndex: source.tile.opts.options.index\r\n          }\r\n          this.tilesTemplates[fromIndex].source.splice(fromTileIndex, 1);\r\n          this.tilesTemplates[toIndex].source.push({\r\n            opts: tileOptions\r\n          });\r\n\r\n          this.reIndexTiles(source.from.elem);\r\n          this.reIndexTiles(source.to.elem);\r\n          break;\r\n      }\r\n    }\r\n\r\n    // Manage tiles functions\r\n    private createTileScope(tile: any): ITileScope {\r\n      const tileScope = < ITileScope > this.$rootScope.$new(false, this.tilesContext);\r\n      tileScope.index = tile.opts.index == undefined ? tile.opts.options.index : tile.opts.index;\r\n      tileScope.groupIndex = tile.opts.groupIndex == undefined ? tile.opts.options.groupIndex : tile.opts.groupIndex;\r\n\r\n      return tileScope;\r\n    }\r\n\r\n    private removeTiles(group, indexes, container) {\r\n      const tiles = $(container).find('.pip-draggable-tile');\r\n\r\n      _.each(indexes, (index) => {\r\n        group.tiles.splice(index, 1);\r\n        tiles[index].remove();\r\n      });\r\n\r\n      this.reIndexTiles(container);\r\n    }\r\n\r\n    private reIndexTiles(container, gIndex ? ) {\r\n      const tiles = $(container).find('.pip-draggable-tile'),\r\n        groupIndex = gIndex === undefined ? container.attributes['data-group-id'].value : gIndex;\r\n\r\n      _.each(tiles, (tile, index) => {\r\n        const child = $(tile).children()[0];\r\n        angular.element(child).scope()['index'] = index;\r\n        angular.element(child).scope()['groupIndex'] = groupIndex;\r\n      });\r\n    }\r\n\r\n    private removeGroups(newGroups) {\r\n      const removeIndexes = [],\r\n        remain = [],\r\n        containers = [];\r\n\r\n\r\n      _.each(this.groups, (group, index) => {\r\n        if (_.findIndex(newGroups, (g) => {\r\n            return g['title'] === group.title\r\n          }) < 0) {\r\n          removeIndexes.push(index);\r\n        } else {\r\n          remain.push(index);\r\n        }\r\n      });\r\n\r\n      _.each(removeIndexes.reverse(), (index) => {\r\n        this.groups.splice(index, 1);\r\n        this.tileGroups.splice(index, 1);\r\n      });\r\n\r\n      _.each(remain, (index) => {\r\n        containers.push(this.groupsContainers[index]);\r\n      });\r\n\r\n      this.groupsContainers = containers;\r\n\r\n      _.each(this.groupsContainers, (container, index) => {\r\n        this.reIndexTiles(container, index);\r\n      });\r\n    }\r\n\r\n    private addGroup(sourceGroup) {\r\n      const group = {\r\n        title: sourceGroup.title,\r\n        source: sourceGroup.source.map((tile) => {\r\n          const tileScope = this.createTileScope(tile);\r\n\r\n          return IDragTileConstructor(DragTileService, {\r\n            tpl: this.$compile(tile.template)(tileScope),\r\n            options: tile.opts,\r\n            size: tile.opts.size\r\n          });\r\n        })\r\n      };\r\n\r\n      this.groups.push(group);\r\n      if (!this.$scope.$$phase) this.$scope.$apply();\r\n\r\n      this.$timeout(() => {\r\n        this.groupsContainers = document.querySelectorAll(this.opts.groupContaninerSelector);\r\n        this.tileGroups.push(\r\n          ITilesGridConstructor(TilesGridService, group.source, this.opts, this.availableColumns, this.groupsContainers[this.groupsContainers.length - 1])\r\n          .generateGrid(this.getSingleTileWidthForMobile(this.availableWidth))\r\n          .setTilesDimensions()\r\n          .calcContainerHeight()\r\n        );\r\n      });\r\n\r\n      this.updateTilesTemplates('addGroup', sourceGroup);\r\n    }\r\n\r\n    private addTilesIntoGroup(newTiles, group, groupContainer) {\r\n      newTiles.forEach((tile) => {\r\n        const tileScope = this.createTileScope(tile);\r\n\r\n        const newTile = IDragTileConstructor(DragTileService, {\r\n          tpl: this.$compile(tile.template)(tileScope),\r\n          options: tile.opts,\r\n          size: tile.opts.size\r\n        });\r\n\r\n        group.addTile(newTile);\r\n\r\n        $('<div>')\r\n          .addClass('pip-draggable-tile')\r\n          .append(newTile.getCompiledTemplate())\r\n          .appendTo(groupContainer);\r\n      });\r\n    }\r\n\r\n    private updateTilesOptions(optionsGroup) {\r\n      optionsGroup.forEach((optionGroup) => {\r\n        optionGroup.source.forEach((tileOptions) => {\r\n          this.tileGroups.forEach((group) => {\r\n            group.updateTileOptions(tileOptions.opts);\r\n          });\r\n        });\r\n      });\r\n    }\r\n\r\n    private initTilesGroups(tileGroups, opts, groupsContainers) {\r\n      return tileGroups.map((group, index) => {\r\n        return ITilesGridConstructor(TilesGridService, group.source, opts, this.availableColumns, groupsContainers[index])\r\n          .generateGrid(this.getSingleTileWidthForMobile(this.availableWidth))\r\n          .setTilesDimensions()\r\n          .calcContainerHeight();\r\n      });\r\n    }\r\n\r\n    private updateTilesGroups(onlyPosition ? , draggedTile ? ) {\r\n      this.tileGroups.forEach((group) => {\r\n        if (!onlyPosition) {\r\n          group.generateGrid(this.getSingleTileWidthForMobile(this.availableWidth));\r\n        }\r\n\r\n        group\r\n          .setTilesDimensions(onlyPosition, draggedTile)\r\n          .calcContainerHeight();\r\n      });\r\n    }\r\n\r\n    private getContainerWidth(): any {\r\n      const container = this.$container || $('body');\r\n      return container.width();\r\n    }\r\n\r\n    private getAvailableColumns(availableWidth): any {\r\n      return this.opts.mobileBreakpoint > availableWidth ? SIMPLE_LAYOUT_COLUMNS_COUNT :\r\n        Math.floor(availableWidth / (this.opts.tileWidth + this.opts.gutter));\r\n    }\r\n\r\n    private getActiveGroupAndTile(elem): any {\r\n      const active = {};\r\n\r\n      this.tileGroups.forEach((group) => {\r\n        const foundTile = group.getTileByNode(elem);\r\n\r\n        if (foundTile) {\r\n          active['group'] = group;\r\n          active['tile'] = foundTile;\r\n          return;\r\n        }\r\n      });\r\n\r\n      return active;\r\n    }\r\n\r\n    private getSingleTileWidthForMobile(availableWidth): any {\r\n      return this.opts.mobileBreakpoint > availableWidth ? availableWidth / 2 - this.opts.gutter : null;\r\n    }\r\n\r\n    private onDragStartListener(event) {\r\n      const activeEntities = this.getActiveGroupAndTile(event.target);\r\n\r\n      this.container = $(event.target).parent('.pip-draggable-group').get(0);\r\n      this.draggedTile = activeEntities['tile'];\r\n      this.activeDraggedGroup = activeEntities['group'];\r\n\r\n      this.$element.addClass('drag-transfer');\r\n\r\n      this.draggedTile.startDrag();\r\n    }\r\n\r\n    private onDragMoveListener(event) {\r\n      const target = event.target;\r\n      const x = (parseFloat(target.style.left) || 0) + event.dx;\r\n      const y = (parseFloat(target.style.top) || 0) + event.dy;\r\n\r\n      this.containerOffset = this.getContainerOffset();\r\n\r\n      target.style.left = x + 'px'; // TODO [apidhirnyi] Extract units into options section\r\n      target.style.top = y + 'px';\r\n\r\n      const belowElement = this.activeDraggedGroup.getTileByCoordinates({\r\n        left: event.pageX - this.containerOffset.left,\r\n        top: event.pageY - this.containerOffset.top\r\n      }, this.draggedTile);\r\n\r\n      if (belowElement) {\r\n        const draggedTileIndex = this.activeDraggedGroup.getTileIndex(this.draggedTile);\r\n        const belowElemIndex = this.activeDraggedGroup.getTileIndex(belowElement);\r\n\r\n        if ((draggedTileIndex + 1) === belowElemIndex) {\r\n          return;\r\n        }\r\n\r\n        this.activeDraggedGroup\r\n          .swapTiles(this.draggedTile, belowElement)\r\n          .setTilesDimensions(true, this.draggedTile);\r\n\r\n        this.$timeout(() => {\r\n          this.setGroupContainersHeight();\r\n        }, 0);\r\n      }\r\n    }\r\n\r\n    private onDragEndListener() {\r\n      this.draggedTile.stopDrag(this.isSameDropzone);\r\n\r\n      this.$element.removeClass('drag-transfer');\r\n      this.activeDraggedGroup = null;\r\n      this.draggedTile = null;\r\n    }\r\n\r\n    private getContainerOffset() {\r\n      const containerRect = this.container.getBoundingClientRect();\r\n\r\n      return {\r\n        left: containerRect.left,\r\n        top: containerRect.top\r\n      };\r\n    }\r\n\r\n    private setGroupContainersHeight() {\r\n      this.tileGroups.forEach((tileGroup) => {\r\n        tileGroup.calcContainerHeight();\r\n      });\r\n    }\r\n\r\n    private moveTile(from, to, tile) {\r\n      let elem;\r\n      const movedTile = from.removeTile(tile);\r\n      const tileScope = this.createTileScope(tile);\r\n\r\n      $(this.groupsContainers[_.findIndex(this.tileGroups, from)])\r\n        .find(movedTile.getElem())\r\n        .remove();\r\n\r\n      if (to !== null) {\r\n        to.addTile(movedTile);\r\n\r\n        elem = this.$compile(movedTile.getElem())(tileScope);\r\n\r\n        $(this.groupsContainers[_.findIndex(this.tileGroups, to)])\r\n          .append(elem);\r\n\r\n        this.$timeout(to.setTilesDimensions.bind(to, true));\r\n      }\r\n\r\n      this.updateTilesTemplates('moveTile', {\r\n        from: from,\r\n        to: to,\r\n        tile: movedTile\r\n      });\r\n    }\r\n\r\n    private onDropListener(event) {\r\n      const droppedGroupIndex = event.target.attributes['data-group-id'].value;\r\n      const droppedGroup = this.tileGroups[droppedGroupIndex];\r\n\r\n      if (this.activeDraggedGroup !== droppedGroup) {\r\n        this.moveTile(this.activeDraggedGroup, droppedGroup, this.draggedTile);\r\n      }\r\n\r\n      this.updateTilesGroups(true);\r\n      this.sourceDropZoneElem = null;\r\n    }\r\n\r\n    private onDropToFictGroupListener(event) {\r\n      const from = this.activeDraggedGroup;\r\n      const tile = this.draggedTile;\r\n\r\n      this.addGroup({\r\n        title: 'New group',\r\n        source: []\r\n      });\r\n      this.$timeout(() => {\r\n        this.moveTile(from, this.tileGroups[this.tileGroups.length - 1], tile);\r\n        this.updateTilesGroups(true);\r\n      });\r\n\r\n      this.sourceDropZoneElem = null;\r\n    }\r\n\r\n    private onDropEnterListener(event) {\r\n      if (!this.sourceDropZoneElem) {\r\n        this.sourceDropZoneElem = event.dragEvent.dragEnter;\r\n      }\r\n\r\n      if (this.sourceDropZoneElem !== event.dragEvent.dragEnter) {\r\n        event.dragEvent.dragEnter.classList.add('dropzone-active');\r\n        $('body').css('cursor', 'copy');\r\n        this.isSameDropzone = false;\r\n      } else {\r\n        $('body').css('cursor', '');\r\n        this.isSameDropzone = true;\r\n      }\r\n    }\r\n\r\n    private onDropDeactivateListener(event) {\r\n      if (this.sourceDropZoneElem !== event.target) {\r\n        event.target.classList.remove(this.opts.activeDropzoneClass);\r\n        $('body').css('cursor', '');\r\n      }\r\n    }\r\n\r\n    private onDropLeaveListener(event) {\r\n      event.target.classList.remove(this.opts.activeDropzoneClass);\r\n    }\r\n\r\n    private initialize() {\r\n      this.$timeout(() => {\r\n        this.availableWidth = this.getContainerWidth();\r\n        this.availableColumns = this.getAvailableColumns(this.availableWidth);\r\n        this.groupsContainers = document.querySelectorAll(this.opts.groupContaninerSelector);\r\n        this.tileGroups = this.initTilesGroups(this.groups, this.opts, this.groupsContainers);\r\n\r\n        interact('.pip-draggable-tile')\r\n          .draggable({\r\n            autoScroll: {\r\n              enabled: true,\r\n              container: $('#content').get(0),\r\n              speed: 500\r\n            },\r\n            onstart: (event) => {\r\n              this.onDragStartListener(event)\r\n            },\r\n            onmove: (event) => {\r\n              this.onDragMoveListener(event)\r\n            },\r\n            onend: (event) => {\r\n              this.onDragEndListener()\r\n            }\r\n          });\r\n\r\n        interact('.pip-draggable-group.fict-group')\r\n          .dropzone({\r\n            ondrop: (event) => {\r\n              this.onDropToFictGroupListener(event)\r\n            },\r\n            ondragenter: (event) => {\r\n              this.onDropEnterListener(event)\r\n            },\r\n            ondropdeactivate: (event) => {\r\n              this.onDropDeactivateListener(event)\r\n            },\r\n            ondragleave: (event) => {\r\n              this.onDropLeaveListener(event)\r\n            }\r\n          });\r\n\r\n        interact('.pip-draggable-group')\r\n          .dropzone({\r\n            ondrop: (event) => {\r\n              this.onDropListener(event)\r\n            },\r\n            ondragenter: (event) => {\r\n              this.onDropEnterListener(event)\r\n            },\r\n            ondropdeactivate: (event) => {\r\n              this.onDropDeactivateListener(event)\r\n            },\r\n            ondragleave: (event) => {\r\n              this.onDropLeaveListener(event)\r\n            }\r\n          });\r\n\r\n        this.$container\r\n          .on('mousedown touchstart', 'md-menu .md-icon-button', () => {\r\n            interact('.pip-draggable-tile').draggable(false);\r\n            $(this).trigger('click');\r\n          })\r\n          .on('mouseup touchend', () => {\r\n            interact('.pip-draggable-tile').draggable(true);\r\n          });\r\n          \r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  const DragComponent: ng.IComponentOptions = {\r\n    bindings: {\r\n      tilesTemplates: '=pipTilesTemplates',\r\n      tilesContext: '=pipTilesContext',\r\n      options: '=pipDraggableGrid',\r\n      groupMenuActions: '=pipGroupMenuActions'\r\n    },\r\n    //controllerAs: 'DraggedCtrl',\r\n    templateUrl: 'draggable/Draggable.html',\r\n    controller: DraggableController\r\n  }\r\n\r\n  angular.module('pipDraggableTiles')\r\n    .component('pipDraggableGrid', DragComponent);\r\n}","export interface DragTileConstructor {\r\n  new (options: any);\r\n}\r\n\r\nexport function IDragTileConstructor(constructor: DragTileConstructor, options: any): IDragTileService {\r\n  return new constructor(options);\r\n}\r\n\r\nexport interface IDragTileService {\r\n  tpl: any;\r\n  opts: any;\r\n  size: any;\r\n  elem: any;\r\n  preview: any;\r\n  getSize(): any;\r\n  setSize(width, height): any;\r\n  setPosition(left, top): any;\r\n  getCompiledTemplate(): any;\r\n  updateElem(parent): any;\r\n  getElem(): any;\r\n  startDrag(): any;\r\n  stopDrag(isAnimate): any;\r\n  setPreviewPosition(coords): void;\r\n  getOptions(): any;\r\n  setOptions(options): any;\r\n}\r\n\r\nlet DEFAULT_TILE_SIZE = {\r\n  colSpan: 1,\r\n  rowSpan: 1\r\n};\r\n\r\nexport class DragTileService implements IDragTileService {\r\n  public tpl: any;\r\n  public opts: any;\r\n  public size: any;\r\n  public elem: any;\r\n  public preview: any;\r\n\r\n  constructor (options: any) {\r\n    this.tpl = options.tpl.get(0);\r\n    this.opts = options;\r\n    this.size = _.merge({}, DEFAULT_TILE_SIZE, options.size);\r\n    this.elem = null;\r\n  }\r\n\r\n  public getSize(): any {\r\n    return this.size;\r\n  }\r\n\r\n  public setSize(width, height): any {\r\n    this.size.width = width;\r\n    this.size.height = height;\r\n\r\n    if (this.elem) {\r\n      this.elem.css({\r\n        width: width,\r\n        height: height\r\n      });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public setPosition(left, top): any {\r\n    this.size.left = left;\r\n    this.size.top = top;\r\n\r\n    if (this.elem) {\r\n      this.elem.css({\r\n        left: left,\r\n        top: top\r\n      });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getCompiledTemplate(): any {\r\n    return this.tpl;\r\n  };\r\n\r\n  public updateElem(parent): any {\r\n    this.elem = $(this.tpl).parent(parent);\r\n\r\n    return this;\r\n  };\r\n\r\n  public getElem(): any {\r\n    return this.elem.get(0);\r\n  };\r\n\r\n  public startDrag(): any {\r\n    this.preview = $('<div>')\r\n      .addClass('pip-dragged-preview')\r\n      .css({\r\n        position: 'absolute',\r\n        left: this.elem.css('left'),\r\n        top: this.elem.css('top'),\r\n        width: this.elem.css('width'),\r\n        height: this.elem.css('height')\r\n      });\r\n\r\n    this.elem\r\n      .addClass('no-animation')\r\n      .css({\r\n        zIndex: '9999'\r\n      })\r\n      .after(this.preview);\r\n\r\n    return this;\r\n  };\r\n\r\n  public stopDrag(isAnimate): any {\r\n    let self = this;\r\n\r\n    if (isAnimate) {\r\n      this.elem\r\n        .removeClass('no-animation')\r\n        .css({\r\n          left: this.preview.css('left'),\r\n          top: this.preview.css('top')\r\n        })\r\n        .on('transitionend', onTransitionEnd);\r\n    } else {\r\n      self.elem\r\n        .css({\r\n          left: self.preview.css('left'),\r\n          top: self.preview.css('top'),\r\n          zIndex: ''\r\n        })\r\n        .removeClass('no-animation');\r\n\r\n      self.preview.remove();\r\n      self.preview = null;\r\n    }\r\n\r\n    return this;\r\n\r\n    function onTransitionEnd() {\r\n      if (self.preview) {\r\n        self.preview.remove();\r\n        self.preview = null;\r\n      }\r\n\r\n      self.elem\r\n        .css('zIndex', '')\r\n        .off('transitionend', onTransitionEnd);\r\n    }\r\n  };\r\n\r\n  public setPreviewPosition(coords) {\r\n    this.preview.css(coords);\r\n  };\r\n\r\n  public getOptions(): any {\r\n    return this.opts.options;\r\n  };\r\n\r\n  public setOptions(options): any {\r\n    _.merge(this.opts.options, options);\r\n    _.merge(this.size, options.size);\r\n\r\n    return this;\r\n  };\r\n}\r\n\r\nangular\r\n  .module('pipDraggableTiles')\r\n  .service('pipDragTile', function () {\r\n    return function (options) {\r\n      let newTile = new DragTileService(options);\r\n\r\n      return newTile;\r\n    }\r\n  });","angular.module('pipDraggableTiles', []);\r\n\r\nimport './DraggableTileService';\r\nimport './Draggable';","import {\r\n  MenuTileService\r\n} from '../menu_tile/MenuTileService';\r\nimport {\r\n  ITileConfigService\r\n} from '../config_tile_dialog/ConfigDialogService';\r\n{\r\n  class EventTileController extends MenuTileService {\r\n    private _oldOpacity: number;\r\n\r\n    public opacity: number = 0.57;\r\n\r\n    constructor(\r\n      $scope: ng.IScope,\r\n      private $element: JQuery,\r\n      private $timeout: angular.ITimeoutService,\r\n      private pipTileConfigDialogService: ITileConfigService\r\n    ) {\r\n      super();\r\n\r\n      if (this.options) {\r\n        if (this.options.menu) this.menu = _.union(this.menu, this.options.menu);\r\n      }\r\n\r\n      this.menu.push({\r\n        title: 'Configurate',\r\n        click: () => {\r\n          this.onConfigClick();\r\n        }\r\n      });\r\n      this.color = this.options.color || 'gray';\r\n      this.opacity = this.options.opacity || this.opacity;\r\n\r\n      this.drawImage();\r\n\r\n      // TODO it doesn't work\r\n      $scope.$watch(() => {\r\n        return $element.is(':visible');\r\n      }, (newVal) => {\r\n        this.drawImage();\r\n      });\r\n    }\r\n\r\n    private drawImage() {\r\n      if (this.options.image) {\r\n        this.$timeout(() => {\r\n          this.onImageLoad(this.$element.find('img'));\r\n        }, 500);\r\n      }\r\n    }\r\n\r\n    private onConfigClick() {\r\n      this._oldOpacity = _.clone(this.opacity);\r\n      this.pipTileConfigDialogService.show({\r\n        dialogClass: 'pip-calendar-config',\r\n        locals: {\r\n          color: this.color,\r\n          size: this.options.size || {\r\n            colSpan: 1,\r\n            rowSpan: 1\r\n          },\r\n          date: this.options.date,\r\n          title: this.options.title,\r\n          text: this.options.text,\r\n          opacity: this.opacity,\r\n          onOpacitytest: (opacity) => {\r\n            this.opacity = opacity;\r\n          }\r\n        },\r\n        extensionUrl: 'event_tile/ConfigDialogExtension.html'\r\n      }, (result: any) => {\r\n        this.changeSize(result.size);\r\n\r\n        this.color = result.color;\r\n        this.options.color = result.color;\r\n        this.options.date = result.date;\r\n        this.options.title = result.title;\r\n        this.options.text = result.text;\r\n        this.options.opacity = result.opacity;\r\n      }, () => {\r\n        this.opacity = this._oldOpacity;\r\n      });\r\n    }\r\n\r\n    private onImageLoad(image) {\r\n      this.setImageMarginCSS(this.$element.parent(), image);\r\n    }\r\n\r\n    public changeSize(params) {\r\n      this.options.size.colSpan = params.sizeX;\r\n      this.options.size.rowSpan = params.sizeY;\r\n\r\n      if (this.options.image) {\r\n        this.$timeout(() => {\r\n          this.setImageMarginCSS(this.$element.parent(), this.$element.find('img'));\r\n        }, 500);\r\n      }\r\n    }\r\n\r\n    // Later replace by pipImageUtils sevice's function\r\n    private setImageMarginCSS($element, image) {\r\n      let\r\n        containerWidth = $element.width ? $element.width() : $element.clientWidth, // || 80,\r\n        containerHeight = $element.height ? $element.height() : $element.clientHeight, // || 80,\r\n        imageWidth = image[0].naturalWidth || image.width,\r\n        imageHeight = image[0].naturalHeight || image.height,\r\n        margin = 0,\r\n        cssParams = {};\r\n\r\n      if ((imageWidth / containerWidth) > (imageHeight / containerHeight)) {\r\n        margin = -((imageWidth / imageHeight * containerHeight - containerWidth) / 2);\r\n        cssParams['margin-left'] = '' + margin + 'px';\r\n        cssParams['height'] = '' + containerHeight + 'px'; //'100%';\r\n        cssParams['width'] = '' + imageWidth * containerHeight / imageHeight + 'px'; //'100%';\r\n        cssParams['margin-top'] = '';\r\n      } else {\r\n        margin = -((imageHeight / imageWidth * containerWidth - containerHeight) / 2);\r\n        cssParams['margin-top'] = '' + margin + 'px';\r\n        cssParams['height'] = '' + imageHeight * containerWidth / imageWidth + 'px'; //'100%';\r\n        cssParams['width'] = '' + containerWidth + 'px'; //'100%';\r\n        cssParams['margin-left'] = '';\r\n      }\r\n\r\n      image.css(cssParams);\r\n    }\r\n  }\r\n\r\n\r\n  const EventTile: ng.IComponentOptions = {\r\n    bindings: {\r\n      options: '=pipOptions'\r\n    },\r\n    controller: EventTileController,\r\n    templateUrl: 'event_tile/EventTile.html'\r\n  }\r\n\r\n  angular\r\n    .module('pipDashboard')\r\n    .component('pipEventTile', EventTile);\r\n}","// Import services\r\nimport './tile_group/index';\r\nimport './draggable';\r\n\r\n// Import tile services\r\nimport './menu_tile';\r\n\r\n// Import dialogs\r\nimport './add_tile_dialog';\r\nimport './config_tile_dialog';\r\n\r\nangular.module('pipDashboard', [\r\n  // Services\r\n  'pipDraggableTiles',\r\n  'pipDraggableTilesGroup',\r\n  // Tile services\r\n  'pipMenuTile',\r\n  // Dialogs\r\n  'pipConfigDashboardTileDialog',\r\n  'pipAddDashboardTileDialog',\r\n  //Templates\r\n  'pipDashboard.Templates',\r\n  // External pip modules\r\n  'pipLayout',\r\n  'pipLocations',\r\n  'pipDateTime',\r\n  'pipCharts',\r\n  'pipTranslate',\r\n  'pipControls',\r\n  'pipButtons'\r\n]);\r\n\r\n// Import utility \r\nimport './utility/TileTemplateUtility';\r\n// Import tiles\r\nimport './common_tile/Tile';\r\nimport './calendar_tile/CalendarTile';\r\nimport './event_tile/EventTile';\r\nimport './note_tile/NoteTile';\r\nimport './picture_slider_tile/PictureSliderTile';\r\nimport './position_tile/PositionTile';\r\nimport './statistics_tile/StatisticsTile';\r\n// Import common component\r\nimport './dashboard/Dashboard';\r\n","{\r\n  const TileMenu = ():ng.IDirective => {\r\n    return {\r\n      restrict: 'EA',\r\n      templateUrl: 'menu_tile/MenuTile.html'\r\n    };\r\n  }\r\n\r\n  angular\r\n    .module('pipMenuTile')\r\n    .directive('pipTileMenu', TileMenu);\r\n}","import { DashboardTile } from '../common_tile/Tile';\r\n\r\nexport class MenuTileService extends DashboardTile {\r\n  public menu: any = [{\r\n    title: 'Change Size',\r\n    action: angular.noop,\r\n    submenu: [{\r\n        title: '1 x 1',\r\n        action: 'changeSize',\r\n        params: {\r\n          sizeX: 1,\r\n          sizeY: 1\r\n        }\r\n      },\r\n      {\r\n        title: '2 x 1',\r\n        action: 'changeSize',\r\n        params: {\r\n          sizeX: 2,\r\n          sizeY: 1\r\n        }\r\n      },\r\n      {\r\n        title: '2 x 2',\r\n        action: 'changeSize',\r\n        params: {\r\n          sizeX: 2,\r\n          sizeY: 2\r\n        }\r\n      }\r\n    ]\r\n  }];\r\n\r\n  constructor() {\r\n    \"ngInject\";\r\n\r\n    super();\r\n  }\r\n\r\n  public callAction(actionName, params, item) {\r\n    if (this[actionName]) {\r\n      this[actionName].call(this, params);\r\n    }\r\n\r\n    if (item['click']) {\r\n      item['click'].call(item, params, this);\r\n    }\r\n  };\r\n\r\n  public changeSize(params) {\r\n    this.options.size.colSpan = params.sizeX;\r\n    this.options.size.rowSpan = params.sizeY;\r\n  };\r\n}\r\n\r\n{\r\n  class MenuTileProvider {\r\n    private _service: MenuTileService;\r\n\r\n    constructor() {}\r\n\r\n    public $get() {\r\n      \"ngInject\";\r\n\r\n      if (this._service == null)\r\n        this._service = new MenuTileService();\r\n\r\n      return this._service;\r\n    }\r\n  }\r\n\r\n  angular\r\n    .module('pipMenuTile')\r\n    .provider('pipMenuTile', MenuTileProvider);\r\n}","angular\r\n    .module('pipMenuTile', []);\r\n\r\nimport './MenuTileDirective';\r\nimport './MenuTileService';\r\n\r\nexport * from './MenuTileService';","import {\r\n  MenuTileService\r\n} from '../menu_tile/MenuTileService';\r\nimport {\r\n  ITileConfigService\r\n} from '../config_tile_dialog/ConfigDialogService';\r\n\r\n{\r\n  class NoteTileController extends MenuTileService {\r\n\r\n    constructor(\r\n      private pipTileConfigDialogService: ITileConfigService\r\n    ) {\r\n      super();\r\n\r\n      if (this.options) {\r\n        this.menu = this.options.menu ? _.union(this.menu, this.options.menu) : this.menu;\r\n      }\r\n\r\n      this.menu.push({\r\n        title: 'Configurate',\r\n        click: () => {\r\n          this.onConfigClick();\r\n        }\r\n      });\r\n      this.color = this.options.color || 'orange';\r\n    }\r\n\r\n    private onConfigClick() {\r\n      this.pipTileConfigDialogService.show({\r\n        locals: {\r\n          color: this.color,\r\n          size: this.options.size,\r\n          title: this.options.title,\r\n          text: this.options.text,\r\n        },\r\n        extensionUrl: 'note_tile/ConfigDialogExtension.html'\r\n      }, (result: any) => {\r\n        this.color = result.color;\r\n        this.options.color = result.color;\r\n        this.changeSize(result.size);\r\n        this.options.text = result.text;\r\n        this.options.title = result.title;\r\n      });\r\n    }\r\n  }\r\n\r\n  const NoteTile: ng.IComponentOptions = {\r\n    bindings: {\r\n      options: '=pipOptions'\r\n    },\r\n    controller: NoteTileController,\r\n    templateUrl: 'note_tile/NoteTile.html'\r\n  }\r\n\r\n  angular\r\n    .module('pipDashboard')\r\n    .component('pipNoteTile', NoteTile);\r\n}","'use strict';\r\n\r\nimport {\r\n  MenuTileService\r\n} from '../menu_tile/MenuTileService';\r\nimport {\r\n  ITileConfigService\r\n} from '../config_tile_dialog/ConfigDialogService';\r\nimport {\r\n  ITileTemplateService\r\n} from '../utility/TileTemplateUtility';\r\n\r\n{\r\n  class PictureSliderController extends MenuTileService {\r\n    public animationType: string = 'fading';\r\n    public animationInterval: number = 5000;\r\n\r\n    constructor(\r\n      private $scope: angular.IScope,\r\n      private $element: any,\r\n      private $timeout: angular.ITimeoutService,\r\n      private pipTileTemplate: ITileTemplateService\r\n    ) {\r\n      super();\r\n\r\n      if (this.options) {\r\n        this.animationType = this.options.animationType || this.animationType;\r\n        this.animationInterval = this.options.animationInterval || this.animationInterval;\r\n      }\r\n    }\r\n\r\n    public onImageLoad($event) {\r\n      this.$timeout(() => {\r\n        this.pipTileTemplate.setImageMarginCSS(this.$element.parent(), $event.target);\r\n      });\r\n    }\r\n\r\n    public changeSize(params) {\r\n      this.options.size.colSpan = params.sizeX;\r\n      this.options.size.rowSpan = params.sizeY;\r\n\r\n      this.$timeout(() => {\r\n        _.each(this.$element.find('img'), (image) => {\r\n          this.pipTileTemplate.setImageMarginCSS(this.$element.parent(), image);\r\n        });\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  const PictureSliderTile: ng.IComponentOptions = {\r\n    bindings: {\r\n      options: '=pipOptions'\r\n    },\r\n    controller: PictureSliderController,\r\n    templateUrl: 'picture_slider_tile/PictureSliderTile.html'\r\n  }\r\n\r\n  angular\r\n    .module('pipDashboard')\r\n    .component('pipPictureSliderTile', PictureSliderTile);\r\n}","import {\r\n  MenuTileService\r\n} from '../menu_tile/MenuTileService';\r\nimport {\r\n  ITileConfigService\r\n} from '../config_tile_dialog/ConfigDialogService';\r\n\r\n{\r\n  class PositionTileController extends MenuTileService {\r\n    public showPosition: boolean = true;\r\n\r\n    constructor(\r\n      $scope: angular.IScope,\r\n      private $timeout: angular.ITimeoutService,\r\n      private $element: any,\r\n      private pipTileConfigDialogService: ITileConfigService,\r\n      private pipLocationEditDialog: any,\r\n    ) {\r\n      super();\r\n\r\n      if (this.options) {\r\n        if (this.options.menu) this.menu = _.union(this.menu, this.options.menu);\r\n      }\r\n\r\n      this.menu.push({\r\n        title: 'Configurate',\r\n        click: () => {\r\n          this.onConfigClick();\r\n        }\r\n      });\r\n      this.menu.push({\r\n        title: 'Change location',\r\n        click: () => {\r\n          this.openLocationEditDialog();\r\n        }\r\n      });\r\n\r\n      this.options.location = this.options.location || this.options.position;\r\n\r\n      $scope.$watch('$ctrl.options.location', () => {\r\n        this.reDrawPosition();\r\n      });\r\n\r\n      // TODO it doesn't work\r\n      $scope.$watch(() => {\r\n        return $element.is(':visible');\r\n      }, (newVal) => {\r\n        if (newVal == true) this.reDrawPosition();\r\n      });\r\n    }\r\n\r\n    private onConfigClick() {\r\n      this.pipTileConfigDialogService.show({\r\n        dialogClass: 'pip-position-config',\r\n        locals: {\r\n          size: this.options.size,\r\n          locationName: this.options.locationName,\r\n          hideColors: true,\r\n        },\r\n        extensionUrl: 'position_tile/ConfigDialogExtension.html'\r\n      }, (result: any) => {\r\n        this.changeSize(result.size);\r\n        this.options.locationName = result.locationName;\r\n      });\r\n    }\r\n\r\n    public changeSize(params) {\r\n      this.options.size.colSpan = params.sizeX;\r\n      this.options.size.rowSpan = params.sizeY;\r\n\r\n      this.reDrawPosition();\r\n    }\r\n\r\n    public openLocationEditDialog() {\r\n      this.pipLocationEditDialog.show({\r\n        locationName: this.options.locationName,\r\n        locationPos: this.options.location\r\n      }, (newPosition) => {\r\n        if (newPosition) {\r\n          this.options.location = newPosition.location;\r\n          this.options.locationName = newPosition.locatioName;\r\n        }\r\n      });\r\n    }\r\n\r\n    private reDrawPosition() {\r\n      this.showPosition = false;\r\n      this.$timeout(() => {\r\n        this.showPosition = true;\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n\r\n  const PositionTile: ng.IComponentOptions = {\r\n    bindings: {\r\n      options: '=pipOptions'\r\n    },\r\n    controller: PositionTileController,\r\n    templateUrl: 'position_tile/PositionTile.html'\r\n  }\r\n\r\n  angular\r\n    .module('pipDashboard')\r\n    .component('pipPositionTile', PositionTile);\r\n}","import {\r\n  MenuTileService\r\n} from '../menu_tile/MenuTileService';\r\n\r\n{\r\n  const SMALL_CHART: number = 70;\r\n  const BIG_CHART: number = 250;\r\n\r\n  class StatisticsTileController extends MenuTileService {\r\n    private _$scope: angular.IScope;\r\n    private _$timeout: angular.ITimeoutService;\r\n\r\n    public reset: boolean = false;\r\n    public chartSize: number = SMALL_CHART;\r\n\r\n    constructor(\r\n      $scope: angular.IScope,\r\n      $timeout: angular.ITimeoutService\r\n    ) {\r\n      super();\r\n      this._$scope = $scope;\r\n      this._$timeout = $timeout;\r\n\r\n      if (this.options) {\r\n        this.menu = this.options.menu ? _.union(this.menu, this.options.menu) : this.menu;\r\n      }\r\n\r\n      this.setChartSize();\r\n    }\r\n\r\n    public changeSize(params) {\r\n      this.options.size.colSpan = params.sizeX;\r\n      this.options.size.rowSpan = params.sizeY;\r\n\r\n      this.reset = true;\r\n      this.setChartSize();\r\n      this._$timeout(() => {\r\n        this.reset = false;\r\n      }, 500);\r\n    }\r\n\r\n    private setChartSize() {\r\n      this.chartSize = this.options.size.colSpan == 2 && this.options.size.rowSpan == 2 ? BIG_CHART : SMALL_CHART;\r\n    }\r\n  }\r\n\r\n\r\n  const StatisticsTile: ng.IComponentOptions = {\r\n    bindings: {\r\n      options: '=pipOptions'\r\n    },\r\n    controller: StatisticsTileController,\r\n    templateUrl: 'statistics_tile/StatisticsTile.html'\r\n  }\r\n\r\n  angular\r\n    .module('pipDashboard')\r\n    .component('pipStatisticsTile', StatisticsTile);\r\n}","{\r\n  interface DraggableTileAttributes extends ng.IAttributes {\r\n    pipDraggableTiles: any;\r\n  }\r\n\r\n  function DraggableTileLink(\r\n    $scope: ng.IScope,\r\n    $elem: JQuery,\r\n    $attr: DraggableTileAttributes\r\n  ) {\r\n    const docFrag = document.createDocumentFragment(),\r\n      group = $scope.$eval($attr.pipDraggableTiles);\r\n\r\n    group.forEach(function (tile) {\r\n      const tpl = wrapComponent(tile.getCompiledTemplate());\r\n      docFrag.appendChild(tpl);\r\n    });\r\n\r\n    $elem.append(docFrag);\r\n\r\n    function wrapComponent(elem) {\r\n      return $('<div>')\r\n        .addClass('pip-draggable-tile')\r\n        .append(elem)\r\n        .get(0);\r\n    }\r\n  }\r\n\r\n  function DraggableTiles(): ng.IDirective {\r\n    return {\r\n      restrict: 'A',\r\n      link: function(\r\n        $scope: ng.IScope,\r\n        $elem: JQuery,\r\n        $attr: DraggableTileAttributes\r\n      ) {\r\n          new DraggableTileLink($scope, $elem, $attr);\r\n      }\r\n    };\r\n  }\r\n\r\n  angular\r\n    .module('pipDraggableTilesGroup')\r\n    .directive('pipDraggableTiles', DraggableTiles);\r\n}","export interface TilesGridConstructor {\r\n  new(tiles, options, columns, elem);\r\n}\r\n\r\nexport function ITilesGridConstructor(constructor: TilesGridConstructor, tiles, options, columns, elem): ITilesGridService {\r\n  return new constructor(tiles, options, columns, elem);\r\n}\r\n\r\nexport interface ITilesGridService {\r\n  tiles: any;\r\n  opts: any;\r\n  columns: any;\r\n  elem: any;\r\n  gridCells: any;\r\n  inline: boolean;\r\n  isMobileLayout: boolean;\r\n\r\n  addTile(tile): any;\r\n  getCellByPosition(row, col): any;\r\n  getCells(prevCell, rowSpan, colSpan): any;\r\n  getAvailableCellsDesktop(prevCell, rowSpan, colSpan): any;\r\n  getCell(src, basicRow, basicCol, columns): any;\r\n  getAvailableCellsMobile(prevCell, rowSpan, colSpan): any;\r\n  getBasicRow(prevCell): any;\r\n  isCellFree(row, col): any;\r\n  getCellIndex(srcCell): any;\r\n  reserveCells(start, end, elem): void;\r\n  clearElements(): void;\r\n  setAvailableColumns(columns): any;\r\n  generateGrid(singleTileWidth ? ): any;\r\n  setTilesDimensions(onlyPosition, draggedTile): any;\r\n  calcContainerHeight(): any;\r\n  getTileByNode(node): any;\r\n  getTileByCoordinates(coords, draggedTile): any;\r\n  getTileIndex(tile): any;\r\n  swapTiles(movedTile, beforeTile): any;\r\n  removeTile(removeTile): any;\r\n  updateTileOptions(opts): any;\r\n}\r\n\r\nconst MOBILE_LAYOUT_COLUMNS = 2;\r\n\r\nexport class TilesGridService implements ITilesGridService {\r\n  public tiles: any;\r\n  public opts: any;\r\n  public columns: any;\r\n  public elem: any;\r\n  public gridCells: any = [];\r\n  public inline: boolean = false;\r\n  public isMobileLayout: boolean;\r\n\r\n  constructor(tiles, options, columns, elem) {\r\n    this.tiles = tiles;\r\n    this.opts = options;\r\n    this.columns = columns || 0; // available columns in a row\r\n    this.elem = elem;\r\n    this.gridCells = [];\r\n    this.inline = options.inline || false;\r\n    this.isMobileLayout = columns === MOBILE_LAYOUT_COLUMNS;\r\n  }\r\n\r\n  public addTile(tile): any {\r\n    this.tiles.push(tile);\r\n    if (this.tiles.length === 1) {\r\n      this.generateGrid();\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  public getCellByPosition(row, col): any {\r\n    return this.gridCells[row][col];\r\n  };\r\n\r\n  public getCells(prevCell, rowSpan, colSpan): any {\r\n    if (this.isMobileLayout) {\r\n      return this.getAvailableCellsMobile(prevCell, rowSpan, colSpan);\r\n    } else {\r\n      return this.getAvailableCellsDesktop(prevCell, rowSpan, colSpan);\r\n    }\r\n  };\r\n\r\n  public getAvailableCellsDesktop(prevCell, rowSpan, colSpan): any {\r\n    let leftCornerCell;\r\n    let rightCornerCell;\r\n    const basicCol = prevCell && prevCell.col || 0;\r\n    const basicRow = this.getBasicRow(prevCell);\r\n\r\n    // Small tile\r\n    if (colSpan === 1 && rowSpan === 1) {\r\n      const gridCopy = this.gridCells.slice();\r\n\r\n      if (!prevCell) {\r\n        leftCornerCell = gridCopy[0][0];\r\n      } else {\r\n        leftCornerCell = this.getCell(gridCopy, basicRow, basicCol, this.columns);\r\n\r\n        if (!leftCornerCell) {\r\n          const rowShift = this.isMobileLayout ? 1 : 2;\r\n          leftCornerCell = this.getCell(gridCopy, basicRow + rowShift, 0, this.columns);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Medium tile\r\n    if (colSpan === 2 && rowSpan === 1) {\r\n      const prevTileSize = prevCell && prevCell.elem.size || null;\r\n\r\n      if (!prevTileSize) {\r\n        leftCornerCell = this.getCellByPosition(basicRow, basicCol);\r\n        rightCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\r\n      } else if (prevTileSize.colSpan === 2 && prevTileSize.rowSpan === 2) {\r\n        if (this.columns - basicCol - 2 > 0) {\r\n          leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\r\n          rightCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\r\n        } else {\r\n          leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\r\n          rightCornerCell = this.getCellByPosition(basicRow + 2, 1);\r\n        }\r\n      } else if (prevTileSize.colSpan === 2 && prevTileSize.rowSpan === 1) {\r\n        if (prevCell.row % 2 === 0) {\r\n          leftCornerCell = this.getCellByPosition(basicRow + 1, basicCol - 1);\r\n          rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol);\r\n        } else {\r\n          if (this.columns - basicCol - 3 >= 0) {\r\n            leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\r\n            rightCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\r\n          } else {\r\n            leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\r\n            rightCornerCell = this.getCellByPosition(basicRow + 2, 1);\r\n          }\r\n        }\r\n      } else if (prevTileSize.colSpan === 1 && prevTileSize.rowSpan === 1) {\r\n        if (this.columns - basicCol - 3 >= 0) {\r\n          if (this.isCellFree(basicRow, basicCol + 1)) {\r\n            leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\r\n            rightCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\r\n          } else {\r\n            leftCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\r\n            rightCornerCell = this.getCellByPosition(basicRow, basicCol + 3);\r\n          }\r\n        } else {\r\n          leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\r\n          rightCornerCell = this.getCellByPosition(basicRow + 2, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Big tile\r\n    if (!prevCell && rowSpan === 2 && colSpan === 2) {\r\n      leftCornerCell = this.getCellByPosition(basicRow, basicCol);\r\n      rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol + 1);\r\n    } else if (rowSpan === 2 && colSpan === 2) {\r\n      if (this.columns - basicCol - 2 > 0) {\r\n        if (this.isCellFree(basicRow, basicCol + 1)) {\r\n          leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\r\n          rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol + 2);\r\n        } else {\r\n          leftCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\r\n          rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol + 3);\r\n        }\r\n      } else {\r\n        leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\r\n        rightCornerCell = this.getCellByPosition(basicRow + 3, 1);\r\n      }\r\n    }\r\n\r\n    return {\r\n      start: leftCornerCell,\r\n      end: rightCornerCell\r\n    };\r\n  };\r\n\r\n  public getCell(src, basicRow, basicCol, columns): any {\r\n    let cell, col, row;\r\n\r\n    if (this.isMobileLayout) {\r\n      // mobile layout\r\n      for (col = basicCol; col < columns; col++) {\r\n        if (!src[basicRow][col].elem) {\r\n          cell = src[basicRow][col];\r\n          break;\r\n        }\r\n      }\r\n\r\n      return cell;\r\n    }\r\n\r\n    // desktop\r\n    for (col = basicCol; col < columns; col++) {\r\n      for (row = 0; row < 2; row++) {\r\n        if (!src[row + basicRow][col].elem) {\r\n          cell = src[row + basicRow][col];\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (cell) {\r\n        return cell;\r\n      }\r\n    }\r\n  };\r\n\r\n  public getAvailableCellsMobile(prevCell, rowSpan, colSpan): any {\r\n    let leftCornerCell;\r\n    let rightCornerCell;\r\n    const basicRow = this.getBasicRow(prevCell);\r\n    const basicCol = prevCell && prevCell.col || 0;\r\n\r\n\r\n    if (colSpan === 1 && rowSpan === 1) {\r\n      const gridCopy = this.gridCells.slice();\r\n\r\n      if (!prevCell) {\r\n        leftCornerCell = gridCopy[0][0];\r\n      } else {\r\n        leftCornerCell = this.getCell(gridCopy, basicRow, basicCol, this.columns);\r\n\r\n        if (!leftCornerCell) {\r\n          const rowShift = this.isMobileLayout ? 1 : 2;\r\n          leftCornerCell = this.getCell(gridCopy, basicRow + rowShift, 0, this.columns);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!prevCell) {\r\n      leftCornerCell = this.getCellByPosition(basicRow, 0);\r\n      rightCornerCell = this.getCellByPosition(basicRow + rowSpan - 1, 1);\r\n    } else if (colSpan === 2) {\r\n      leftCornerCell = this.getCellByPosition(basicRow + 1, 0);\r\n      rightCornerCell = this.getCellByPosition(basicRow + rowSpan, 1);\r\n    }\r\n\r\n    return {\r\n      start: leftCornerCell,\r\n      end: rightCornerCell\r\n    };\r\n  };\r\n\r\n  public getBasicRow(prevCell): any {\r\n    let basicRow;\r\n\r\n    if (this.isMobileLayout) {\r\n      if (prevCell) {\r\n        basicRow = prevCell && prevCell.row || 0;\r\n      } else {\r\n        basicRow = 0;\r\n      }\r\n    } else {\r\n      if (prevCell) {\r\n        basicRow = prevCell.row % 2 === 0 ? prevCell.row : prevCell.row - 1;\r\n      } else {\r\n        basicRow = 0;\r\n      }\r\n    }\r\n\r\n    return basicRow;\r\n  };\r\n\r\n  public isCellFree(row, col): any {\r\n    return !this.gridCells[row][col].elem;\r\n  };\r\n\r\n  public getCellIndex(srcCell): any {\r\n    const self = this;\r\n    let index;\r\n\r\n    this.gridCells.forEach((row, rowIndex) => {\r\n      index = _.findIndex(self.gridCells[rowIndex], (cell) => {\r\n        return cell === srcCell;\r\n      });\r\n\r\n      if (index !== -1) {\r\n        return;\r\n      }\r\n    });\r\n\r\n    return index !== -1 ? index : 0;\r\n  };\r\n\r\n  public reserveCells(start, end, elem) {\r\n    this.gridCells.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        if (cell.row >= start.row && cell.row <= end.row &&\r\n          cell.col >= start.col && cell.col <= end.col) {\r\n          cell.elem = elem;\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  public clearElements() {\r\n    this.gridCells.forEach((row) => {\r\n      row.forEach((tile) => {\r\n        tile.elem = null;\r\n      });\r\n    });\r\n  };\r\n\r\n  public setAvailableColumns(columns): any {\r\n    this.isMobileLayout = columns === MOBILE_LAYOUT_COLUMNS;\r\n    this.columns = columns;\r\n\r\n    return this;\r\n  };\r\n\r\n  public generateGrid(singleTileWidth ? ): any {\r\n    const self = this,\r\n      tileWidth = singleTileWidth || this.opts.tileWidth,\r\n      offset = document.querySelector('.pip-draggable-group-title').getBoundingClientRect();\r\n    let colsInRow = 0,\r\n      rows = 0,\r\n      gridInRow = [];\r\n\r\n    this.gridCells = [];\r\n\r\n    this.tiles.forEach((tile, index, srcTiles) => {\r\n      const tileSize = tile.getSize();\r\n\r\n      generateCells(tileSize.colSpan);\r\n\r\n      if (srcTiles.length === index + 1) {\r\n        if (colsInRow < self.columns) {\r\n          generateCells(self.columns - colsInRow);\r\n        }\r\n\r\n        // Generate more cells for extends tile size to big\r\n        if (self.tiles.length * 2 > self.gridCells.length) {\r\n          Array.apply(null, Array(self.tiles.length * 2 - self.gridCells.length)).forEach(() => {\r\n            generateCells(self.columns);\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    function generateCells(newCellCount) {\r\n      Array.apply(null, Array(newCellCount)).forEach(() => {\r\n        if (self.columns < colsInRow + 1) {\r\n          rows++;\r\n          colsInRow = 0;\r\n\r\n          self.gridCells.push(gridInRow);\r\n          gridInRow = [];\r\n        }\r\n\r\n        let top = rows * self.opts.tileHeight + (rows ? rows * self.opts.gutter : 0) + offset.height;\r\n        let left = colsInRow * tileWidth + (colsInRow ? colsInRow * self.opts.gutter : 0);\r\n\r\n        // Describe grid cell size through block corners coordinates\r\n        gridInRow.push({\r\n          top: top,\r\n          left: left,\r\n          bottom: top + self.opts.tileHeight,\r\n          right: left + tileWidth,\r\n          row: rows,\r\n          col: colsInRow\r\n        });\r\n\r\n        colsInRow++;\r\n      });\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  public setTilesDimensions(onlyPosition, draggedTile): any {\r\n    const self = this;\r\n    let currIndex = 0;\r\n    let prevCell;\r\n\r\n    if (onlyPosition) {\r\n      self.clearElements();\r\n    }\r\n\r\n    this.tiles.forEach((tile) => {\r\n      const tileSize = tile.getSize();\r\n      let startCell;\r\n      let width;\r\n      let height;\r\n      let cells;\r\n\r\n      tile.updateElem('.pip-draggable-tile');\r\n      if (tileSize.colSpan === 1) {\r\n        if (prevCell && prevCell.elem.size.colSpan === 2 && prevCell.elem.size.rowSpan === 1) {\r\n          startCell = self.getCells(self.getCellByPosition(prevCell.row, prevCell.col - 1), 1, 1).start;\r\n        } else {\r\n          startCell = self.getCells(prevCell, 1, 1).start;\r\n        }\r\n\r\n\r\n        if (!onlyPosition) {\r\n          width = startCell.right - startCell.left;\r\n          height = startCell.bottom - startCell.top;\r\n        }\r\n\r\n        prevCell = startCell;\r\n\r\n        self.reserveCells(startCell, startCell, tile);\r\n\r\n        currIndex++;\r\n      } else if (tileSize.colSpan === 2) {\r\n        cells = self.getCells(prevCell, tileSize.rowSpan, tileSize.colSpan);\r\n        startCell = cells.start;\r\n\r\n        if (!onlyPosition) {\r\n          width = cells.end.right - cells.start.left;\r\n          height = cells.end.bottom - cells.start.top;\r\n        }\r\n\r\n        prevCell = cells.end;\r\n\r\n        self.reserveCells(cells.start, cells.end, tile);\r\n\r\n        currIndex += 2;\r\n      }\r\n\r\n      // Render preview\r\n      // while tiles from group is dragged\r\n      if (draggedTile === tile) {\r\n        tile.setPreviewPosition({\r\n          left: startCell.left,\r\n          top: startCell.top\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      if (!onlyPosition) {\r\n        tile.setSize(width, height);\r\n      }\r\n\r\n      tile.setPosition(startCell.left, startCell.top);\r\n    });\r\n\r\n    return this;\r\n  };\r\n\r\n  public calcContainerHeight(): any {\r\n    let maxHeightSize, maxWidthSize;\r\n\r\n    if (!this.tiles.length) {\r\n      return this;\r\n    }\r\n\r\n    maxHeightSize = _.maxBy(this.tiles, (tile) => {\r\n      const tileSize = tile['getSize']();\r\n      return tileSize.top + tileSize.height;\r\n    })['getSize']();\r\n\r\n    this.elem.style.height = maxHeightSize.top + maxHeightSize.height + 'px';\r\n\r\n    if (this.inline) {\r\n      maxWidthSize = _.maxBy(this.tiles, (tile) => {\r\n        const tileSize = tile['getSize']();\r\n        return tileSize.left + tileSize.width;\r\n      })['getSize']();\r\n\r\n      this.elem.style.width = maxWidthSize.left + maxWidthSize.width + 'px';\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  public getTileByNode(node): any {\r\n    const foundTile = this.tiles.filter((tile) => {\r\n      return node === tile.getElem();\r\n    });\r\n\r\n    return foundTile.length ? foundTile[0] : null;\r\n  };\r\n\r\n  public getTileByCoordinates(coords, draggedTile): any {\r\n    return this.tiles\r\n      .filter((tile) => {\r\n        const tileSize = tile.getSize();\r\n\r\n        return tile !== draggedTile &&\r\n          tileSize.left <= coords.left && coords.left <= (tileSize.left + tileSize.width) &&\r\n          tileSize.top <= coords.top && coords.top <= (tileSize.top + tileSize.height);\r\n      })[0] || null;\r\n  };\r\n\r\n  public getTileIndex(tile): any {\r\n    return _.findIndex(this.tiles, tile);\r\n  };\r\n\r\n  public swapTiles(movedTile, beforeTile): any {\r\n    const movedTileIndex = _.findIndex(this.tiles, movedTile);\r\n    const beforeTileIndex = _.findIndex(this.tiles, beforeTile);\r\n\r\n    this.tiles.splice(movedTileIndex, 1);\r\n    this.tiles.splice(beforeTileIndex, 0, movedTile);\r\n\r\n    return this;\r\n  };\r\n\r\n  public removeTile(removeTile): any {\r\n    let droppedTile;\r\n\r\n    this.tiles.forEach((tile, index, tiles) => {\r\n      if (tile === removeTile) {\r\n        droppedTile = tiles.splice(index, 1)[0];\r\n        return false;\r\n      }\r\n    });\r\n\r\n    return droppedTile;\r\n  };\r\n\r\n  public updateTileOptions(opts): any {\r\n    const index = _.findIndex(this.tiles, (tile) => {\r\n      return tile['getOptions']() === opts;\r\n    });\r\n\r\n    if (index !== -1) {\r\n      this.tiles[index].setOptions(opts);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n}\r\n\r\n\r\nangular\r\n  .module('pipDraggableTilesGroup')\r\n  .service('pipTilesGrid', function () {\r\n    return function (tiles, options, columns, elem) {\r\n      const newGrid = new TilesGridService(tiles, options, columns, elem);\r\n\r\n      return newGrid;\r\n    }\r\n  });","angular\r\n    .module('pipDraggableTilesGroup', []);\r\n\r\nimport './TileGroupDirective';\r\nimport './TileGroupService';","export interface ITileTemplateService {\r\n    getTemplate(source, tpl ? , tileScope ? , strictCompile ? ): any;\r\n    setImageMarginCSS($element, image): void;\r\n} \r\n\r\n{\r\n    class tileTemplateService implements ITileTemplateService {\r\n        private _$interpolate: angular.IInterpolateService;\r\n        private _$compile: angular.ICompileService;\r\n        private _$templateRequest: angular.ITemplateRequestService;\r\n\r\n        constructor(\r\n            $interpolate: angular.IInterpolateService,\r\n            $compile: angular.ICompileService,\r\n            $templateRequest: angular.ITemplateRequestService\r\n        ) {\r\n            this._$interpolate = $interpolate;\r\n            this._$compile = $compile;\r\n            this._$templateRequest = $templateRequest;\r\n        }\r\n\r\n        public getTemplate(source, tpl ? , tileScope ? , strictCompile ? ): any {\r\n            const {\r\n                template,\r\n                templateUrl,\r\n                type\r\n            } = source;\r\n            let result;\r\n\r\n            if (type) {\r\n                const interpolated = tpl ? this._$interpolate(tpl)(source) : this._$interpolate(template)(source);\r\n                return strictCompile == true ?\r\n                    (tileScope ? this._$compile(interpolated)(tileScope) : this._$compile(interpolated)) :\r\n                    interpolated;\r\n            }\r\n\r\n            if (template) {\r\n                return tileScope ? this._$compile(template)(tileScope) : this._$compile(template);\r\n            }\r\n\r\n            if (templateUrl) {\r\n                this._$templateRequest(templateUrl, false).then((html) => {\r\n                    result = tileScope ? this._$compile(html)(tileScope) : this._$compile(html);\r\n                });\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public setImageMarginCSS($element, image) {\r\n            let\r\n                containerWidth = $element.width ? $element.width() : $element.clientWidth,\r\n                containerHeight = $element.height ? $element.height() : $element.clientHeight,\r\n                imageWidth = (image[0] ? image[0].naturalWidth : image.naturalWidth) || image.width,\r\n                imageHeight = (image[0] ? image[0].naturalHeight : image.naturalWidth) || image.height,\r\n                margin = 0,\r\n                cssParams = {};\r\n\r\n            if ((imageWidth / containerWidth) > (imageHeight / containerHeight)) {\r\n                margin = -((imageWidth / imageHeight * containerHeight - containerWidth) / 2);\r\n                cssParams['margin-left'] = '' + margin + 'px';\r\n                cssParams['height'] = '' + containerHeight + 'px'; //'100%';\r\n                cssParams['width'] = '' + imageWidth * containerHeight / imageHeight + 'px'; //'100%';\r\n                cssParams['margin-top'] = '';\r\n            } else {\r\n                margin = -((imageHeight / imageWidth * containerWidth - containerHeight) / 2);\r\n                cssParams['margin-top'] = '' + margin + 'px';\r\n                cssParams['height'] = '' + imageHeight * containerWidth / imageWidth + 'px'; //'100%';\r\n                cssParams['width'] = '' + containerWidth + 'px'; //'100%';\r\n                cssParams['margin-left'] = '';\r\n            }\r\n\r\n            $(image).css(cssParams);\r\n        }\r\n    }\r\n\r\n    // image load directive TODO: remove to pipImageUtils\r\n    const ImageLoad = function ImageLoad($parse: ng.IParseService): ng.IDirective {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope: ng.IScope, element: JQuery, attrs: any) {\r\n                const callback = $parse(attrs.pipImageLoad);\r\n\r\n                element.bind('load', (event) => {\r\n                    callback(scope, {\r\n                        $event: event\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module('pipDashboard')\r\n        .service('pipTileTemplate', tileTemplateService)\r\n        .directive('pipImageLoad', ImageLoad);\r\n}","(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('add_tile_dialog/AddTile.html',\n    '<md-dialog class=\"pip-dialog pip-add-component-dialog\"><md-dialog-content class=\"layout-column\"><div class=\"theme-divider p16 flex-auto\"><h3 class=\"hide-xs m0 bm16 theme-text-primary\" hide-xs=\"\">{{ \\'DASHBOARD_ADD_TILE_DIALOG_TITLE\\' | translate }}<md-input-container class=\"layout-row flex-auto m0 tm16\"><md-select class=\"flex-auto m0 theme-text-primary\" ng-model=\"dialogCtrl.activeGroupIndex\" placeholder=\"{{ \\'DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP\\' | translate }}\" aria-label=\"Group\"><md-option ng-value=\"$index\" ng-repeat=\"group in dialogCtrl.groups\">{{ group }}</md-option></md-select></md-input-container></h3></div><div class=\"pip-body pip-scroll p0 flex-auto\"><p class=\"md-body-1 theme-text-secondary m0 lp16 rp16\">{{ \\'DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS\\' | translate }}</p><md-list ng-init=\"groupIndex = $index\" ng-repeat=\"group in dialogCtrl.defaultWidgets\"><md-list-item class=\"layout-row pip-list-item lp16 rp16\" ng-repeat=\"item in group\"><div class=\"icon-holder flex-none\"><md-icon md-svg-icon=\"icons:{{:: item.icon }}\"></md-icon><div class=\"pip-badge theme-badge md-warn\" ng-if=\"item.amount\"><span>{{ item.amount }}</span></div></div><span class=\"flex-auto lm24 theme-text-primary\">{{:: item.title }}</span><md-button class=\"md-icon-button flex-none\" ng-click=\"dialogCtrl.encrease(groupIndex, $index)\" aria-label=\"Encrease\"><md-icon md-svg-icon=\"icons:plus-circle\"></md-icon></md-button><md-button class=\"md-icon-button flex-none\" ng-click=\"dialogCtrl.decrease(groupIndex, $index)\" aria-label=\"Decrease\"><md-icon md-svg-icon=\"icons:minus-circle\"></md-icon></md-button></md-list-item><md-divider class=\"lm72 tm8 bm8\" ng-if=\"groupIndex !== (dialogCtrl.defaultWidgets.length - 1)\"></md-divider></md-list></div></md-dialog-content><md-dialog-actions class=\"flex-none layout-align-end-center theme-divider divider-top theme-text-primary\"><md-button ng-click=\"dialogCtrl.cancel()\" aria-label=\"Cancel\">{{ \\'CANCEL\\' | translate }}</md-button><md-button ng-click=\"dialogCtrl.add()\" ng-disabled=\"dialogCtrl.totalWidgets === 0\" arial-label=\"Add\">{{ \\'ADD\\' | translate }}</md-button></md-dialog-actions></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('calendar_tile/CalendarTile.html',\n    '<div class=\"widget-box pip-calendar-widget {{ $ctrl.color }} layout-column layout-fill tp0\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\"><div class=\"widget-heading layout-row layout-align-end-center flex-none\"><pip-tile-menu></pip-tile-menu></div><div class=\"widget-content flex-auto layout-row layout-align-center-center\" ng-if=\"$ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1\"><span class=\"date lm24 rm12\">{{ $ctrl.options.date.getDate() }}</span><div class=\"flex-auto layout-column\"><span class=\"weekday md-headline\">{{ $ctrl.options.date | formatLongDayOfWeek }}</span> <span class=\"month-year md-headline\">{{ $ctrl.options.date | formatLongMonth }} {{ $ctrl.options.date | formatYear }}</span></div></div><div class=\"widget-content flex-auto layout-column layout-align-space-around-center\" ng-hide=\"$ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1\"><span class=\"weekday md-headline\" ng-hide=\"$ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1\">{{ $ctrl.options.date | formatLongDayOfWeek }}</span> <span class=\"weekday\" ng-show=\"$ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1\">{{ $ctrl.options.date | formatLongDayOfWeek }}</span> <span class=\"date lm12 rm12\">{{ $ctrl.options.date.getDate() }}</span> <span class=\"month-year md-headline\">{{ $ctrl.options.date | formatLongMonth }} {{ $ctrl.options.date | formatYear }}</span></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('calendar_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch bm16\">Date:<md-datepicker ng-model=\"$ctrl.date\" class=\"w-stretch\"></md-datepicker></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('config_tile_dialog/ConfigDialog.html',\n    '<md-dialog class=\"pip-dialog pip-tile-config-dialog {{ vm.params.dialogClass }}\" width=\"400\" md-theme=\"{{vm.theme}}\"><pip-tile-config-extend-component class=\"layout-column\" pip-dialog-scope=\"vm\" pip-extension-url=\"vm.extensionUrl\" pip-apply=\"vm.onApply(updatedData)\"></pip-tile-config-extend-component></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('config_tile_dialog/ConfigDialogExtendComponent.html',\n    '<h3 class=\"tm0 flex-none\">{{ \\'DASHBOARD_TILE_CONFIG_DIALOG_TITLE\\' | translate }}</h3><div class=\"pip-body pip-scroll p16 bp0 flex-auto\"><pip-extension-point></pip-extension-point><pip-toggle-buttons class=\"bm16\" ng-if=\"!$ctrl.hideSizes\" pip-buttons=\"$ctrl.sizes\" ng-model=\"$ctrl.sizeId\"></pip-toggle-buttons><pip-color-picker ng-if=\"!$ctrl.hideColors\" pip-colors=\"$ctrl.colors\" ng-model=\"$ctrl.color\"></pip-color-picker></div><div class=\"pip-footer flex-none\"><div><md-button class=\"md-accent\" ng-click=\"$ctrl.onCancel()\">{{ \\'CANCEL\\' | translate }}</md-button><md-button class=\"md-accent\" ng-click=\"$ctrl.onApply()\">{{ \\'APPLY\\' | translate }}</md-button></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('dashboard/Dashboard.html',\n    '<md-button class=\"md-accent md-raised md-fab layout-column layout-align-center-center\" aria-label=\"Add component\" ng-click=\"$ctrl.addComponent()\"><md-icon md-svg-icon=\"icons:plus\" class=\"md-headline centered-add-icon\"></md-icon></md-button><div class=\"pip-draggable-grid-holder\"><pip-draggable-grid pip-tiles-templates=\"$ctrl.groupedWidgets\" pip-tiles-context=\"$ctrl.widgetsContext\" pip-draggable-grid=\"$ctrl.draggableGridOptions\" pip-group-menu-actions=\"$ctrl.groupMenuActions\"></pip-draggable-grid><md-progress-circular md-mode=\"indeterminate\" class=\"progress-ring\"></md-progress-circular></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('draggable/Draggable.html',\n    '<div class=\"pip-draggable-holder\"><div class=\"pip-draggable-group\" ng-repeat=\"group in $ctrl.groups\" data-group-id=\"{{ $index }}\" pip-draggable-tiles=\"group.source\"><div class=\"pip-draggable-group-title layout-row layout-align-start-center\"><div class=\"title-input-container\" ng-click=\"$ctrl.onTitleClick(group, $event)\"><input ng-if=\"group.editingName\" ng-blur=\"$ctrl.onBlurTitleInput(group)\" ng-keypress=\"$ctrl.onKyepressTitleInput(group, $event)\" ng-model=\"group.title\"><div class=\"text-overflow flex-none\" ng-if=\"!group.editingName\">{{ group.title }}</div></div><md-button class=\"md-icon-button flex-none layout-align-center-center\" ng-show=\"group.editingName\" ng-click=\"$ctrl.cancelEditing(group)\" aria-label=\"Cancel\"><md-icon md-svg-icon=\"icons:cross\"></md-icon></md-button><md-menu class=\"flex-none layout-column\" md-position-mode=\"target-right target\" ng-show=\"!group.editingName\"><md-button class=\"md-icon-button flex-none layout-align-center-center\" ng-click=\"$mdOpenMenu(); groupId = $index\" aria-label=\"Menu\"><md-icon md-svg-icon=\"icons:dots\"></md-icon></md-button><md-menu-content width=\"4\"><md-menu-item ng-repeat=\"action in $ctrl.groupMenuActions\"><md-button ng-click=\"action.callback(groupId)\">{{ action.title }}</md-button></md-menu-item></md-menu-content></md-menu></div></div><div class=\"pip-draggable-group fict-group layout-align-center-center layout-column tm16\"><div class=\"fict-group-text-container\"><md-icon md-svg-icon=\"icons:plus\"></md-icon>{{ \\'DROP_TO_CREATE_NEW_GROUP\\' | translate }}</div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('event_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch\"><md-input-container class=\"w-stretch bm0\"><label>Title:</label> <input type=\"text\" ng-model=\"$ctrl.title\"></md-input-container>Date:<md-datepicker ng-model=\"$ctrl.date\" class=\"w-stretch bm8\"></md-datepicker><md-input-container class=\"w-stretch\"><label>Description:</label> <textarea type=\"text\" ng-model=\"$ctrl.text\">\\n' +\n    '    </textarea></md-input-container>Backdrop\\'s opacity:<md-slider aria-label=\"opacity\" type=\"number\" min=\"0.1\" max=\"0.9\" step=\"0.01\" ng-model=\"$ctrl.opacity\" ng-change=\"$ctrl.onOpacitytest($ctrl.opacity)\"></md-slider></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('event_tile/EventTile.html',\n    '<div class=\"widget-box pip-event-widget {{ $ctrl.color }} layout-column layout-fill\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\"><img ng-if=\"$ctrl.options.image\" ng-src=\"{{$ctrl.options.image}}\" alt=\"{{$ctrl.options.title || $ctrl.options.name}}\"><div class=\"text-backdrop\" style=\"background-color: rgba(0, 0, 0, {{ $ctrl.opacity }})\"><div class=\"widget-heading layout-row layout-align-start-center flex-none\"><span class=\"widget-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span><pip-tile-menu ng-if=\"!$ctrl.options.hideMenu\"></pip-tile-menu></div><div class=\"text-container flex-auto pip-scroll\"><p class=\"date flex-none\" ng-if=\"$ctrl.options.date\">{{ $ctrl.options.date | formatShortDate }}</p><p class=\"text flex-auto\">{{ $ctrl.options.text || $ctrl.options.description }}</p></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('menu_tile/MenuTile.html',\n    '<md-menu class=\"widget-menu\" md-position-mode=\"target-right target\"><md-button class=\"md-icon-button flex-none\" ng-click=\"$mdOpenMenu()\" aria-label=\"Menu\"><md-icon md-svg-icon=\"icons:vdots\"></md-icon></md-button><md-menu-content width=\"4\"><md-menu-item ng-repeat=\"item in $ctrl.menu\"><md-button ng-if=\"!item.submenu\" ng-click=\"$ctrl.callAction(item.action, item.params, item)\">{{:: item.title }}</md-button><md-menu ng-if=\"item.submenu\"><md-button ng-click=\"$ctrl.callAction(item.action)\">{{:: item.title }}</md-button><md-menu-content><md-menu-item ng-repeat=\"subitem in item.submenu\"><md-button ng-click=\"$ctrl.callAction(subitem.action, subitem.params, subitem)\">{{:: subitem.title }}</md-button></md-menu-item></md-menu-content></md-menu></md-menu-item></md-menu-content></md-menu>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('note_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch\"><md-input-container class=\"w-stretch bm0\"><label>Title:</label> <input type=\"text\" ng-model=\"$ctrl.title\"></md-input-container><md-input-container class=\"w-stretch tm0\"><label>Text:</label> <textarea type=\"text\" ng-model=\"$ctrl.text\">\\n' +\n    '    </textarea></md-input-container></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('note_tile/NoteTile.html',\n    '<div class=\"widget-box pip-notes-widget {{ $ctrl.color }} layout-column\"><div class=\"widget-heading layout-row layout-align-start-center flex-none\" ng-if=\"$ctrl.options.title || $ctrl.options.name\"><span class=\"widget-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span></div><pip-tile-menu ng-if=\"!$ctrl.options.hideMenu\"></pip-tile-menu><div class=\"text-container flex-auto pip-scroll\"><p>{{ $ctrl.options.text }}</p></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('picture_slider_tile/PictureSliderTile.html',\n    '<div class=\"widget-box pip-picture-slider-widget {{ $ctrl.color }} layout-column layout-fill\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\" index=\"{{ $ctrl.index }}\" group=\"{{ $ctrl.group }}\"><div class=\"widget-heading lp16 rp8 layout-row layout-align-end-center flex-none\"><span class=\"flex text-overflow\">{{ $ctrl.options.title }}</span><pip-tile-menu ng-if=\"!$ctrl.options.hideMenu\"></pip-tile-menu></div><div class=\"slider-container\"><div pip-image-slider=\"\" pip-animation-type=\"\\'fading\\'\" pip-animation-interval=\"$ctrl.animationInterval\" ng-if=\"$ctrl.animationType == \\'fading\\'\"><div class=\"pip-animation-block\" ng-repeat=\"slide in $ctrl.options.slides\"><img ng-src=\"{{ slide.image }}\" alt=\"{{ slide.image }}\" pip-image-load=\"$ctrl.onImageLoad($event)\"><p class=\"slide-text\" ng-if=\"slide.text\">{{ slide.text }}</p></div></div><div pip-image-slider=\"\" pip-animation-type=\"\\'carousel\\'\" pip-animation-interval=\"$ctrl.animationInterval\" ng-if=\"$ctrl.animationType == \\'carousel\\'\"><div class=\"pip-animation-block\" ng-repeat=\"slide in $ctrl.options.slides\"><img ng-src=\"{{ slide.image }}\" alt=\"{{ slide.image }}\" pip-image-load=\"$ctrl.onImageLoad($event)\"><p class=\"slide-text\" ng-if=\"slide.text\">{{ slide.text }}</p></div></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('position_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch\"><md-input-container class=\"w-stretch bm0\"><label>Location name:</label> <input type=\"text\" ng-model=\"$ctrl.locationName\"></md-input-container></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('position_tile/PositionTile.html',\n    '<div class=\"pip-position-widget widget-box p0 layout-column layout-fill\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\" index=\"{{ $ctrl.index }}\" group=\"{{ $ctrl.group }}\"><div class=\"position-absolute-right-top\" ng-if=\"!$ctrl.options.locationName\"><pip-tile-menu ng-if=\"!$ctrl.options.hideMenu\"></pip-tile-menu></div><div class=\"widget-heading lp16 rp8 layout-row layout-align-end-center flex-none\" ng-if=\"$ctrl.options.locationName\"><span class=\"flex text-overflow\">{{ $ctrl.options.locationName }}</span><pip-tile-menu ng-if=\"!$ctrl.options.hideMenu\"></pip-tile-menu></div><pip-location-map class=\"flex\" ng-if=\"$ctrl.showPosition\" pip-stretch=\"true\" pip-rebind=\"true\" pip-location-pos=\"$ctrl.options.location\"></pip-location-map></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('statistics_tile/StatisticsTile.html',\n    '<div class=\"widget-box pip-statistics-widget layout-column layout-fill\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\"><div class=\"widget-heading layout-row layout-align-start-center flex-none\"><span class=\"widget-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span><pip-tile-menu></pip-tile-menu></div><div class=\"widget-content flex-auto layout-row layout-align-center-center\" ng-if=\"$ctrl.options.series && !$ctrl.reset\"><pip-pie-chart pip-series=\"$ctrl.options.series\" ng-if=\"!$ctrl.options.chartType || $ctrl.options.chartType == \\'pie\\'\" pip-donut=\"true\" pip-pie-size=\"$ctrl.chartSize\" pip-show-total=\"true\" pip-centered=\"true\"></pip-pie-chart></div></div>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-dashboard-html.min.js.map\n"]}