{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/add_tile_dialog/AddTileDialogController.ts","src/add_tile_dialog/AddTileProvider.ts","src/add_tile_dialog/index.ts","src/calendar_tile/CalendarTile.ts","src/common_tile/Tile.ts","src/config_tile_dialog/ConfigDialogController.ts","src/config_tile_dialog/ConfigDialogExtendComponent.ts","src/config_tile_dialog/ConfigDialogService.ts","src/config_tile_dialog/index.ts","src/dashboard/Dashboard.ts","src/draggable/Draggable.ts","src/draggable/DraggableTileService.ts","src/draggable/index.ts","src/event_tile/EventTile.ts","src/index.ts","src/menu_tile/MenuTileDirective.ts","src/menu_tile/MenuTileService.ts","src/menu_tile/index.ts","src/note_tile/NoteTile.ts","src/picture_slider_tile/PictureSliderTile.ts","src/position_tile/PositionTile.ts","src/statistics_tile/StatisticsTile.ts","src/tile_group/TileGroupDirective.ts","src/tile_group/TileGroupService.ts","src/tile_group/index.ts","src/utility/TileTemplateUtility.ts","temp/pip-webui-dashboard-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","dashboard","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","AddTileDialog","AddTileDialogController","groups","activeGroupIndex","widgetList","$mdDialog","totalTiles","_","isNumber","defaultTiles","cloneDeep","map","group","prototype","add","hide","groupIndex","widgets","cancel","encrease","widgetIndex","widget","amount","decrease","AddTileDialogController_1","setTranslations","$injector","pipTranslate","has","get","DASHBOARD_ADD_TILE_DIALOG_TITLE","DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS","DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP","$inject","AddTileDialogService_1","show","_this","templateUrl","bindToController","controller","controllerAs","clickOutsideToClose","AddTileDialogProvider","_widgetList","configWidgetList","list","$get","_service","config","provider","MenuTileService_1","CalendarTileController","_super","pipTileConfigDialogService","options","menu","union","push","title","onConfigClick","date","Date","color","__extends","dialogClass","size","extensionUrl","result","changeSize","MenuTileService","CalendarTile","component","DashboardTile","TileColors","all","TileSizes","name","id","TileConfigDialogController","params","colors","sizes","sizeId","angular","extend","colSpan","rowSpan","onCancel","onApply","updatedData","sizeX","Number","substr","sizeY","7","TileConfigExtendComponentBindings","pipExtensionUrl","pipDialogScope","pipApply","TileConfigExtendComponentChanges","TileConfigExtendComponentController","$templateRequest","$compile","$scope","$element","$attrs","$onChanges","changes","currentValue","then","html","find","replaceWith","pipTileConfigComponent","bindings","8","ConfigDialogController_1","DASHBOARD_TILE_CONFIG_DIALOG_TITLE","DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL","DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE","DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE","TileConfigDialogService","successCallback","cancelCallback","targetEvent","event","locals","key","service","./ConfigDialogController","9","./ConfigDialogExtendComponent","./ConfigDialogService","10","DROP_TO_CREATE_NEW_GROUP","pipAddTileDialogProvider","icon","configureAvailableWidgets","DEFAULT_GRID_OPTIONS_1","draggableOptions","tileWidth","DashboardController","$rootScope","$timeout","$interpolate","pipAddTileDialog","pipTileTemplate","defaultGroupMenuActions","callback","addComponent","removeGroup","console","log","_includeTpl","groupMenuActions","groupedWidgets","splice","addClass","draggableGridOptions","gridOptions","inline","groupAdditionalActions","widgetsContext","compileWidgets","removedWidgets","source","index","click","item","object","removeWidget","opts","template","getTemplate","data","activeGroup","addWidgets","widgetGroup","forEach","Array","apply","type","Dashboard","11","DraggableTileService_1","TileGroupService_1","DEFAULT_TILE_WIDTH","DEFAULT_TILE_HEIGHT","UPDATE_GROUPS_EVENT","SIMPLE_LAYOUT_COLUMNS_COUNT","DEFAULT_OPTIONS","tileHeight","gutter","DraggableController","pipDragTile","pipTilesGrid","pipMedia","sourceDropZoneElem","isSameDropzone","merge","breakpoints","xs","tilesTemplates","tile","tileScope","createTileScope","IDragTileConstructor","DragTileService","tpl","$watch","newVal","watch","debounce","getContainerWidth","getAvailableColumns","availableWidth","tileGroups","setAvailableColumns","availableColumns","generateGrid","getSingleTileWidthForMobile","setTilesDimensions","calcContainerHeight","$postLink","$container","prevVal","changedGroupIndex","addGroup","removeGroups","groupWidgetDiff","newTiles","slice","each","addTilesIntoGroup","groupsContainers","updateTilesGroups","removeTiles","updateTilesOptions","onTitleClick","editingName","oldTitle","clone","$","currentTarget","children","focus","cancelEditing","onBlurTitleInput","$broadcast","onKyepressTitleInput","keyCode","updateTilesTemplates","updateType","_a","fromIndex","from","elem","attributes","value","toIndex","to","tileOptions","fromTileIndex","reIndexTiles","$new","tilesContext","undefined","indexes","container","tiles","remove","gIndex","child","element","scope","newGroups","removeIndexes","remain","containers","findIndex","reverse","sourceGroup","$$phase","$apply","document","querySelectorAll","groupContaninerSelector","ITilesGridConstructor","TilesGridService","groupContainer","newTile","addTile","append","getCompiledTemplate","appendTo","optionsGroup","optionGroup","updateTileOptions","initTilesGroups","onlyPosition","draggedTile","width","mobileBreakpoint","Math","floor","getActiveGroupAndTile","foundTile","getTileByNode","active","onDragStartListener","activeEntities","target","parent","activeDraggedGroup","startDrag","onDragMoveListener","x","parseFloat","style","left","dx","y","top","dy","containerOffset","getContainerOffset","belowElement","getTileByCoordinates","pageX","pageY","getTileIndex","draggedTileIndex","belowElemIndex","swapTiles","setGroupContainersHeight","onDragEndListener","stopDrag","removeClass","containerRect","getBoundingClientRect","tileGroup","moveTile","movedTile","removeTile","getElem","bind","onDropListener","droppedGroupIndex","droppedGroup","onDropToFictGroupListener","onDropEnterListener","dragEvent","dragEnter","classList","css","onDropDeactivateListener","activeDropzoneClass","onDropLeaveListener","initialize","draggable","enabled","speed","onstart","onmove","onend","dropzone","ondrop","ondragenter","ondropdeactivate","ondragleave","on","interact","trigger","DragComponent","../tile_group/TileGroupService","./DraggableTileService","12","constructor","DEFAULT_TILE_SIZE","getSize","setSize","height","setPosition","updateElem","preview","position","zIndex","after","isAnimate","onTransitionEnd","off","setPreviewPosition","coords","getOptions","setOptions","d","b","__","p","hasOwnProperty","Object","create","EventTileController","opacity","is","drawImage","image","onImageLoad","text","onOpacitytest","_oldOpacity","setImageMarginCSS","containerWidth","clientWidth","containerHeight","clientHeight","imageWidth","naturalWidth","imageHeight","naturalHeight","margin","cssParams","EventTile","../menu_tile/MenuTileService","15","./calendar_tile/CalendarTile","./common_tile/Tile","./config_tile_dialog","./dashboard/Dashboard","./draggable","./event_tile/EventTile","./menu_tile","./note_tile/NoteTile","./picture_slider_tile/PictureSliderTile","./position_tile/PositionTile","./statistics_tile/StatisticsTile","./tile_group/index","./utility/TileTemplateUtility","16","MenuTile","restrict","noop","action","callAction","actionName","MenuTileProvider","18","__export","m","NoteTileController","NoteTile","PictureSliderController","animationInterval","animationType","$event","PictureSliderTile","PositionTileController","pipLocationEditDialog","showPosition","openLocationEditDialog","location","reDrawPosition","locationName","hideColors","locationPos","newPosition","locatioName","PositionTile","StatisticsTileController","pipTileMenu","reset","chartSize","SMALL_CHART_1","_$timeout","setChartSize","BIG_CHART_1","StatisticsTile","23","DraggableTileLink","$elem","$attr","wrapComponent","docFrag","createDocumentFragment","$eval","pipDraggableTiles","appendChild","DraggableTile","link","directive","24","columns","gridCells","isMobileLayout","MOBILE_LAYOUT_COLUMNS","getCellByPosition","row","col","getCells","prevCell","getAvailableCellsMobile","getAvailableCellsDesktop","leftCornerCell","basicCol","basicRow","getBasicRow","gridCopy","getCell","rowShift","prevTileSize","rightCornerCell","isCellFree","start","end","src","cell","getCellIndex","srcCell","rowIndex","reserveCells","clearElements","singleTileWidth","newCellCount","colsInRow","rows","gridInRow","offset","bottom","right","querySelector","srcTiles","tileSize","generateCells","currIndex","startCell","cells","maxHeightSize","maxWidthSize","maxBy","node","filter","beforeTile","movedTileIndex","beforeTileIndex","droppedTile","newGrid","25","./TileGroupService","26","tileTemplateService","_$interpolate","_$compile","_$templateRequest","strictCompile","interpolated","$parse","attrs","pipImageLoad","ImageLoad","27","run","$templateCache","put"],"mappings":"CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,MAAAJ,EAAAK,MAAAL,EAAAK,SAAAC,UAAAX,MAAA,WAAA,MAAA,SAAAY,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAjB,GAAA,GAAAsB,OAAA,uBAAAL,EAAA,IAAA,MAAAjB,GAAAuB,KAAA,mBAAAvB,EAAA,GAAAwB,GAAAV,EAAAG,IAAAhB,WAAAY,GAAAI,GAAA,GAAAQ,KAAAD,EAAAvB,QAAA,SAAAW,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAvB,QAAAW,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAhB,QAAA,IAAA,GAAAoB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAlB,EAAAD,eCAA,IAAA2B,GAAA,WAAA,QAAAA,MAKA,MAAAA,KALa3B,GAAA2B,cAAAA,CAOb,IAAAC,GAAA,WAKI,QAAAA,GACIC,EACOC,EACPC,EACOC,GAFAxB,KAAAsB,iBAAAA,EAEAtB,KAAAwB,UAAAA,EANJxB,KAAAyB,WAAqB,EAQxBzB,KAAKsB,iBAAmBI,EAAEC,SAASL,GAAoBA,GAAmB,EAC1EtB,KAAK4B,aAAeF,EAAEG,UAAUN,GAChCvB,KAAKqB,OAASK,EAAEI,IAAIT,EAAQ,SAAUU,GAClC,MAAOA,GAAa,QA0BhC,MAtBWX,GAAAY,UAAAC,IAAP,WACIjC,KAAKwB,UAAUU,MACXC,WAAYnC,KAAKsB,iBACjBc,QAASpC,KAAK4B,gBAIfR,EAAAY,UAAAK,OAAP,WACIrC,KAAKwB,UAAUa,UAGZjB,EAAAY,UAAAM,SAAP,SAAgBH,EAAoBI,GAChC,GAAMC,GAASxC,KAAK4B,aAAaO,GAAYI,EAC7CC,GAAOC,SACPzC,KAAKyB,cAGFL,EAAAY,UAAAU,SAAP,SAAgBP,EAAoBI,GAChC,GAAMC,GAASxC,KAAK4B,aAAaO,GAAYI,EAC7CC,GAAOC,OAASD,EAAOC,OAASD,EAAOC,OAAS,EAAI,EACpDzC,KAAKyB,WAAazB,KAAKyB,WAAazB,KAAKyB,WAAa,EAAI,GAElEL,IAxCa5B,GAAA4B,wBAAAA,sCCPb,IAAAuB,GAAAhC,EAAA,6BAcQiC,EAAkB,SAASC,GAC/B,GAAMC,GAAeD,EAAUE,IAAI,wBAA0BF,EAAUG,IAAI,wBAA0B,IACjGF,KACIA,EAAcF,gBAAgB,MAClCK,gCAAiC,gBACjCC,uCAAwC,kGACxCC,2CAA4C,qBAExCL,EAAcF,gBAAgB,MAClCK,gCAAiC,qBACjCC,uCAAwC,uHACxCC,2CAA4C,0BAKlDP,GAAAQ,SAAA,gBACEC,GAAA,mBACUA,GAAU9B,EAAmBC,GAC7BxB,KAAAuB,WAAAA,EACNvB,KAAAwB,UAAAA,EAJN,SA0BGQ,UAAAsB,KAAA,SAAAjC,EAAAC,GAnBC,GAAAiC,GAAYvD,WACTA,MAAKwB,UACJ8B,MACAE,YAAA,+BACAC,kBAAY,EACZC,WAAYf,EAAcvB,wBAC1BuC,aAAA,aACAC,qBAAS,kBAEL,WACD,MAAAvC,qBAEQ,WACR,MAAAC,eAEc,WACd,MAAAiC,GAAAhC,gBAIV8B,KAMCQ,EAAA,mBAFQA,KAID7D,KAAA8D,YAAA,UACLC,iBAAmB,SAAKC,GACxBhE,KAAA8D,YAAAE,GARJ,SAWehC,UAAAiC,MAAA,YAAA,SAAAzC,GAEX,UAID,OAHmB,OAAhBxB,KAAKkE,WAEPlE,KAAOkE,SAAa,GAACb,GAAArD,KAAA8D,YAAAtC,IACtBxB,KAAAkE,WACFL,aAIEpE,OAAO,6BACP0E,OAAAvB,GACJwB,SAAA,mBAAAP,wDCnFD,qBAGApE,OAAA,6BAAmC,eACnCkB,EAAA,6UCGC0D,EAAA1D,EAAA,gCACsC2D,EAAA,SAAAC,WACnCD,GAGEE,GAFQ,GAAAjB,GAAAgB,EAAAvD,KAAAhB,OAA0BA,IAenC,OAXCuD,GAAIiB,2BAAeA,EACjBjB,EAAKkB,UACLlB,EAAKmB,KAAKnB,EAAKkB,QAAAC,KAAAhD,EAAAiD,MAAApB,EAAAmB,KAAAnB,EAAAkB,QAAAC,MAAAnB,EAAAmB,OACbA,KAAOE,MACPC,MAAO,oBACL,WACDtB,EAAAuB,mBAGHvB,EAAKkB,QAAQM,KAAKxB,EAAOkB,QAAMM,MAAU,GAACC,MAC3CzB,EAAA0B,MAAA1B,EAAAkB,QAAAQ,OAAA,QACF1B,EAjBkC,MACnC2B,GAAAZ,EACUC,KAiCTvC,UAAA8C,cAAA,WAfC,GAAIvB,GAACvD,UACHwE,2BAAalB,MACb6B,YAAQ,8BAENF,MAAMjF,KAAKiF,MACXG,KAAMpF,KAAKyE,QAAQW,KACpBL,KAAA/E,KAAAyE,QAAAM,MAEAM,aAAC,qDACGC,GAEL/B,EAAKgC,WAAQD,EAAOF,MACpB7B,EAAK0B,MAAQK,EAAKL,MAClB1B,EAAKkB,QAAQQ,MAAOK,EAAOL,MAC1B1B,EAAAkB,QAAAM,KAAAO,EAAAP,QAlC8BT,GAuCrCD,EAA2CmB,iBACzCC,aAEChB,QAAA,eAEDf,WAAWY,EACZd,YAAA,2CAIE/D,OAAA,gBAEJiG,UAAA,kBAAAD,4DCrDD,gBAKIE,GAAA,WAAgB,QAACA,MALrB,MAMCA,gDCXD,gBAAAC,GAAA,WAEA,QAACA,MAFD,MAAAA,KAIAA,GAAAC,KAAA,SAAA,QAAA,OAAA,SAAA,WAAAC,GAAA,WAcA,QAACA,MAdD,MAAAA,QAEYD,MACAE,KAAI,0CACPC,GAAA,OAGGD,KAAI,yCACPC,GAAA,OAGGD,KAAI,0CACPC,GAAA,UAULC,GAAA,mBAAAA,GAaCC,EAAAb,EAAA7D,GAZU,UACA,IAAA+B,GAAAvD,IACAA,MAAAkG,OAASA,EARblG,KAAAqF,aAAmBA,EACnBrF,KAAAwB,UAAaA,EACbxB,KAAAmG,OAAiBP,EAAUC,IAU9B7F,KAAAoG,MAAQN,EAAaD,IACrB7F,KAAKqG,OAASP,EAAUD,IAAA,GAAOG,GAE/BM,QAAKC,OAAQvG,KAAGA,KAAAkG,aACZG,OAAK,GAASrG,KAACkG,OAASd,KAAAoB,QAAAxG,KAAAkG,OAAAd,KAAAqB,QAC5BzG,KAAC0G,SAAA,WACJnD,EAAA/B,UAAAa,UAnBQ,SAWMe,SAAA,SAAA,eAAA,eAYUpB,UAAY2E,QAAO,SAAaC,GACrD5G,KAAK,KAAA6G,MAAeC,OAAA9G,KAAaqG,OAAAU,OAAA,EAAA,IACpC/G,KAAA,KAAAgH,MAAAF,OAAA9G,KAAAqG,OAAAU,OAAA,EAAA,IACL/G,KAAAwB,UAAAU,KAAA0E,IA1BaX,ICrBbzG,GAACyG,2BAAAA,OASGgB,GAAM,SAAAtG,EAAAlB,EAAAD,MAEF0H,IACAC,gBAAa,IAChBC,eAAA,IAEDC,SAAA,QAOC,WAAD,QAAAC,MAMA,MAAAA,MAMgB,mBACAC,GAAiCC,EAAAC,EAAAC,EAAAC,EAAAC,GACjC5H,KAAAwH,iBAAsBA,EACtBxH,KAAAyH,SAAAA,EACAzH,KAAA0H,OAAAA,EACP1H,KAAA2H,SAAAA,EAEE3H,KAAA4H,OAAAA,EAiBL,SAhB+B5F,UAAA6F,WAAA,SAAAC,MACzBvE,GAAOvD,IACP8H,GAAQV,uBACXU,GAAAV,eAAAW,aAAA,OACGzB,QAAQC,OAAAvG,KAAA8H,EAAmBV,eAAQW,iBAE/BZ,iBAAmBW,EAAAX,gBAAuBY,cAC9C/H,KAAGwH,iBAAAM,EAAAX,gBAAAY,cAAA,GAAAC,KAAA,SAAAC,GACN1E,EAAAoE,SAAAO,KAAA,uBAAAC,YAAA5E,EAAAkE,SAAAQ,GAAA1E,EAAAmE,YAKLH,EAACvF,UAAA2E,QAAA,WACL3G,KAAAqH,UAAAT,YAAA5G,QAEMuH,MAEFa,GACA5E,YAAU,sDACbE,WAAA6D,EAEDc,SAAOnB,WAGVzH,OAAA,iFCnED6I,GAAA,SAAA3H,EAAAlB,EAAAD,GAYA,gBACI+I,GAAwB5H,EAAS,4BAE7BiC,EAAkB,SAACC,MACLC,GAAcD,EAAAE,IAAgB,wBAAMF,EAAAG,IAAA,wBAAA,WAE1CJ,gBAAA,MACA4F,mCAAA,YACAC,wCAAyC,QAC1CC,uCAAA,OACOC,wCAAoC,YAE1C/F,gBAAA,MACA4F,mCAAA,kBACAC,wCAAyC,SAC1CC,uCAAA,UACNC,wCAAA,gBAKUvF,SAAA,gBACRwF,GAAC,mBAGKA,GAAepH,QACZA,UAAaA,QAFlBoH,GAAAxF,SAAA,eAIiBpB,UAAAsB,KAAA,SAAA4C,EAAA2C,EAA0BC,QACtCtH,UAAA8B,MACAyF,YAAY7C,EAAM8C,MAClBxF,YAAQ0C,EAAA1C,aAAA,mDACJ+E,EAAiCtC,6CACnB,eACjB,KACDgD,QACF5D,aAAAa,EAAAb,aACDa,OAAKA,EAAI+C,6BAEc,IAErBjB,KAAA,SAAAkB,GACKL,GACAA,EAAgBK,IAErB,WACVJ,GACLA,OAIWF,IAEdtC,0DChEM6C,QAAA,6BAAAP,KAGPQ,2BAAA,IAAAC,GAAkC,SAAA1I,EAAAlB,EAAAD,GAClC,YACA8G,6FCEA3F,EAAC,2BACO,8DACiB,EAAA2I,gCAAqC,EAAAC,wBAAiB,IAAAC,IAAA,SAA0B7I,EAAKlB,EAAAD,sBAGtG,SAAAqD,SACCA,EAAAE,IAAA,wBAAAF,EAAAG,IAAA,wBAAA,IACOF,OACRF,gBAAwB,MACvB6G,yBAAA,kCAEN3G,EAAAF,gBAAA,MAEK6G,yBAA4B,kDAI1BrG,SAAM,mBACO,SAAAsG,KACJ3F,oBAEXc,MAAA,QACE8E,KAAK,WACL5D,KAAM,QACNtD,OAAM,IAGToC,MAAA,WACA8E,KAAA,WACG5D,KAAK,WACLtD,OAAM,MAIRoC,MAAA,WACE8E,KAAK,OACL5D,KAAM,WACNtD,OAAM,IAGRoC,MAAA,eACE8E,KAAK,YACL5D,KAAM,QACNtD,OAAM,IAGToC,MAAA,aACA8E,KAAA,gBACJ5D,KAAA,aAEDtD,OAAA,MAOAmH,GAA0BxG,SAAqB,+BAa/CyG,IAZgB,WACd,QAAAC,MAEA,MAAMA,OAyCNC,UAAA,eAAA,WAEU,WACA,MAEA,mBACAC,GAAAtC,EAAyCuC,EAAArC,EAAAD,EAAAuC,EAAAC,EAAAC,EAAAC,GACzC,GAAA9G,GAAAvD,IACAA,MAAAiK,WAAAA,EAvCFjK,KAAA4H,OAAAA,gBACGD,gBACCuC,oBACDC,wBACNC,OACFC,gBAAAA,OACDC,0BACEzF,MAAO,gBACP0F,SAAU,SAACpI,GACToB,EAAKiH,aAAYrI,MAInB0C,MAAO,SACP0F,SAAU,SAACpI,GACToB,EAAAkH,YAAYtI,MAIV0C,MAAA,cACN0F,SAAA,SAAApI,GACAuI,QAAAC,IAAA,gCAA2BxI,WAoG3ByI,YAAK,iKA5EL5K,KAAK6K,iBAAA7K,KAAuBsK,wBAG5BtK,KAAIyK,YAAK,SAAoBtI,GAC3BuI,QAAQC,IAAC,cAASxI,GACnBoB,EAAAuH,eAAAC,OAAA5I,EAAA,MAEgC6I,SAAc,cAG/ChL,KAAKiL,qBAAuBjL,KAACkL,aAAArB,EACzB7J,KAACiL,qBAAiBE,UAAA,GAElBxD,EAASqD,SAAC,eAEXhL,KAAKoL,wBACT9E,QAAAC,OAAAvG,KAAA6K,iBAAA7K,KAAAoL,wBAEOpL,KAAAqL,eAAA3D,EAAR1H,KAAAsL,iBACEtL,KAAEkK,SAAU,WACV3G,EAAMoE,SAAAqD,SAAiB,0BAIjBhJ,UAAUsJ,eAAA,iDAEV,SAAAvJ,EAAAI,oBACaJ,EAAMwJ,qBACrBC,OAAOzJ,EAAUyJ,OAAG1J,IAAA,SAAWU,EAAAiJ,GAetC,MAdOjJ,GAAO4C,KAAO5C,EAAO4C,OACrBoB,QAAQ,UACD,WAEHiF,eACDtJ,IACAuC,KAAClC,EAAAkC,SAEJ4B,QAAOC,OAAA/D,EAAAkC,OACDG,MAAE,SACN6G,MAAU,SAAKC,EAAAzF,EAAgB0F,GAC/BrI,EAAAsI,aAAAF,EAAAzF,EAAA0F,QAKHE,KAAAtJ,EAAPuJ,SA2BCxI,EAAA8G,gBAAA2B,YAAAxJ,EAAAe,EAAAqH,qBArBiB5I,UAAAwI,aAAA,SAAArI,SACVnC,UACDoK,iBAED9G,KAAItD,KAAK8K,eAAkB3I,QACzB,SAAW8J,GACb,GAACC,EAAMD,SAGH9J,cAAU,EACVoB,EAAAuH,eAAAmB,EAAA9J,aAMF0C,MAAK,YACN2G,WAINjI,EAAA4I,WAAAD,EAAAV,OAAAS,EAAA7J,SAAC6J,EAAA9J,cAAA,GAOMoB,EAAAuH,eAAAlG,KAAAsH,GAEJ3I,EAAA+H,iCAIca,WAAW,SAAApK,EAAAK,sBAChBgK,KACFC,QAAA,SAAA7J,GACJA,EAAAC,QACA6J,MAAAC,MAAA,KAAAD,MAAA9J,EAAAC,SAAA4J,QAAA,WACFtK,EAAA6C,MACJ4H,KAAAhK,EAAAuD,gBAOQ/D,UAAe6J,aAAe,SAAWF,EAACzF,EAAA0F,GACjD,GAAGrI,GAAAvD,IACJA,MAAA8K,eAAA5E,EAAAzB,QAAAtC,YAAAoJ,kBAEHvL,KAAA8K,eAAA5E,EAACzB,QAAAtC,YAAAoJ,eAAA3G,KAAAsB,EAAAzB,QAAAgH,OAAAzL,KAAA8K,eAAA5E,EAAAzB,QAAAtC,YAAAqJ,OAAAT,OAAA7E,EAAAzB,QAAAgH,MAAA,GAEKzL,KAASkK,SAAyB,WAC9B3G,EAAEuH,eAAA5E,EAAAzB,QAAAtC,YAAAoJ,qBAGRvB,KAEFyC,GACApE,UACD6C,YAAA,kBAEME,uBAAA,mBACJN,eAAO,yBAEAd,cACG,2DChPf7F,OAAAyF,GAKAzF,OAAAvB,GAMa8C,UAAA,eAAiC+G,QAEjCC,IAAA,SAAA/L,EAAmBlB,EAAGD,GAEnC,YACA,IAAMmN,GAAkBhM,EAAA,0BACtBiM,EAAWjM,EAAA,oCACXkM,mBAAY,MACZC,oBAAU,MACVC,oBAAW,oCAEXC,GAAqB,EACrBC,GACAlD,UAAAvK,EAAAqN,mBAEDK,WAAA1N,EAAAsN,oBAoBCK,OAAA,aAmBE,uDAAA,0CACU,2CAGA,mBACAC,GAAgB1F,EAAAuC,EAAAxC,EAAAyC,EAAAvC,EAAA0F,EAAAC,EAAAC,GArBnB,GAAAhK,GAAAvD,IACAA,MAAA0H,OAAAA,EACA1H,KAAAiK,WAAkBA,EAwBvBjK,KAAKyH,SAASA,OACZyC,SAAAA,OACCvC,SAAAA,EAEH3H,KAAKwN,mBAAc,UACjBC,gBAAO,kBACE,eACP/L,EAAAgM,wBACOH,EAAUI,YAAAC,MACT5N,KAAMyE,qBACZzE,KAAM6N,eAAiB/L,IAAA,SAAAC,EAAqBI,kBAGrC0C,mBACL,iBAEC9C,EAAAyJ,OAAA1J,IAAA,SAAAgM,GACH,GAAAC,GAAAxK,EAAAyK,gBAAAF,EACF,OAAAnB,GAAAsB,qBAAAtB,EAAAuB,iBACDC,IAAA1G,EAAAqG,EAAA/B,UAAAgC,GAGWtJ,QAAAqJ,EAAAhC,KACD1G,KAAM0I,EAAEhC,KAAA1G,cASnBgJ,OAAK,uBAAwB,SAAAC,GAE7B9K,EAAK+K,MAAAD,uCAGA,SAAA3M,EAAY6M,SAAM,4BAClBhL,EAAoBiL,uCACpBjL,EAAsBkL,oBAAAlL,EAAAmL,gBAC3BnL,EAAGoL,WAAAtC,QAAA,SAAAtK,GACGA,EACT6M,oBAAArL,EAAAsL,kBAGMC,aAAAvL,EAAAwL,4BAAPxL,EAAAmL,iBACOM,qBACNC,yBAGD,cAEMjN,UAAoBkN,UAAK,WAE7BlP,KAAImP,WAAanP,KAAG2H,YAGX3F,UAAAsM,MAAA,SAAAD,GACT,GAAC9K,GAAAvD,KAEGoP,EAAOpP,KAAMqB,OACfgO,EAAkB,QAElBhB,EAAOpN,OAAAmO,EAAAnO,OAGL,WAFHjB,MAAAsP,SAAAjB,EAAAA,EAAApN,OAAA,OAICoN,EAAIpN,OAAAmO,EAAoBnO,wBACtBsO,aAAAlB,aAKG,EAACzN,EAAKyN,EAAQpN,OAAEL,IAAC,OACRwO,EAAUxO,GAAE4K,OAAMvK,OAAAoN,EAAAzN,GAAA4K,OAAAvK,aACzBoN,EAAAzN,GAAA2K,gBAAA8C,EAAAzN,GAAA2K,eAAAtK,OAAA,EAAA,MAEEL,EAEL4O,EAAc,EAAA,IACZC,GAAKpB,EAAAgB,GAAoB7D,OAAAkE,MAAAF,EAC3B9N,GAAEiO,KAACF,EAAA,SAAA3B,GACJpD,QAAAC,IAAA,OAAAmD,KACC9N,KAAK4P,kBAAiBH,EAAWzP,KAAA2O,WAAAU,GAA2BrP,KAAA6P,iBAAmBR,IAC/ErP,KAAKkK,SAAA,WACD3G,EAACuM,0BAKP9P,MAAO+P,YAAA/P,KAAA2O,WAAAU,GAAAhB,EAAAgB,GAAA9D,eAAAvL,KAAA6P,iBAAAR,IACRrP,KAAAgQ,mBAAA3B,GACFrO,KAAAkK,SAAA,WAEa3G,EAAKuM,qBAGf,SAGLzB,GAAArO,KAAA2O,aAGM3O,KAAAgQ,mBAAA3B,GACDrO,KAACkK,SAAM,WACT3G,EAAMuM,0BAIH9N,UAAAiO,aAAA,SAAAlO,EAAAiH,GACJjH,EAAAmO,cACFnO,EAAAoO,SAAAzO,EAAA0O,MAAArO,EAAA8C,OAEM9C,EAAAmO,aAAA,EACLlQ,KAAMkK,SAAQ,WACfmG,EAAArH,EAAAsH,cAAAC,SAAA,IAAAC,cAISxO,UAAcyO,cAAM,SAAA1O,KAC1B8C,MAAK9C,EAAUoO,YAGTnO,UAAA0O,iBAAA,SAAA3O,GACT,GAAAwB,GAAAvD,IAEMA,MAAAkK,SAAA,WACDnI,EAAMmO,aAAc,EACtB3M,EAAK0G,WAAA0G,WAAuBnR,EAACuN,oBAAAxJ,EAAAlC,QAC9BkC,EAAAsK,eAAA9L,EAAA0J,OAAA5G,MAAA9C,EAAA8C,OACF,QAIS7C,UAAa4O,qBAAA,SAAA7O,EAAAiH,GACJ,KAAfA,EAAK6H,cACHH,iBAAgB3O,MAGVC,UAAA8O,qBAAA,SAAAC,EAAAvF,UACRuF,OACQ,kGAUL,WACD,GAAIC,IACAC,UAACzF,EAAe0F,KAAOC,KAAEC,WAAY,iBAAAC,MACvCC,QAAM9F,EAAA+F,GAAWJ,KAAAC,WAAA,iBAAAC,MAChBG,YAAAhG,EAAAsC,KAAAhC,KAAArH,QAECgN,cAAcjG,EAAOsC,KAAKhC,KAAMrH,QAAAgH,OACpCwF,EAAKD,EAAaC,UAAUK,EAAMN,EAAAM,QAAAE,EAAAR,EAAAQ,YAAAC,EAAAT,EAAAS,aAClCzR,MAAK6N,eAACoD,GAAAzF,OAAAT,OAAA0G,EAAA,GACTzR,KAAA6N,eAAAyD,GAAA9F,OAAA5G,MACFkH,KAAA0F,IAIOxR,KAAS0R,aAAuBlG,EAAW0F,KAAKC,MACtDnR,KAAU0R,aAAalG,EAAU+F,GAAAJ,QAM3B/D,EAAApL,UAAAgM,gBAAR,SAAoBF,GAClB,GAAMC,GAAU/N,KAAAiK,WAAgB0H,MAAA,EAAA3R,KAAA4R,oBAEhC7D,GAAOtC,MAAeoG,QAAN/D,EAAAhC,KAACL,MAAKqC,EAAAhC,KAAArH,QAAAgH,MAAAqC,EAAAhC,KAAAL,QACdtJ,WAAuB0P,QAAV/D,EAAKhC,KAAK3J,WAAA2L,EAAAhC,KAAArH,QAAAtC,WAAA2L,EAAAhC,KAAA3J,WAC7B4L,KAGG/L,UAAa+N,YAAW,SAAAhO,EAAA+P,EAAAC,GAC9B,GAAAC,GAAA3B,EAAA0B,GAAA7J,KAAA,sBAEOxG,GAAAiO,KAAAmC,EAAA,SAAArG,GACA1J,EAAKiQ,MAAKjH,OAASU,EAAO,GAG9BuG,EAAKvG,GAAOwG,gBAEZP,aAAQK,MAEP/P,UAAA0P,aAAA,SAAAK,EAAAG,GACJ,GAAAF,GAAA3B,EAAA0B,GAAA7J,KAAA,uBAAA/F,EAAA0P,SAAAK,EAAAH,EAAAX,WAAA,iBAAAC,MAAAa,CAEOxQ,GAAAiO,KAAAqC,EAAA,SAAAlE,EAAArC,GAAR,GAAA0G,GAAA9B,EA8BCvC,GAAAyC,WAAA,EA7BOjK,SAAA8L,QAAgBD,GACpBE,QACA,MAAA5G,EAGAnF,QAAU8L,QAAQD,GAAAE,QAAa,WAAAlQ,OAGpBH,UAAAuN,aAAA,SAAA+C,SACTtS,KACFuS,KAACC,KAAAC,YAACzS,KAAMqB,OAAA,SAAAU,EAAA0J,GACN/J,EAAAgR,UAAYJ,EAAO,SAAA1S,GACpB,MAAAA,GAAA,QAAAmC,EAAA8C,QACA,EAEI0N,EAAc3N,KAAA6G,GAGlB+G,EAAA5N,KAAA6G,KAIH/J,EAAEiO,KAAC4C,EAAAI,UAAA,SAAAlH,GAEClI,EAAClC,OAAA0J,OAAmBU,EAAA,GAEtBlI,EAAKoL,WAAK5D,OAAgBU,EAAE,KAE9B/J,EAAEiO,KAAC6C,EAAA,SAAA/G,GACJgH,EAAA7N,KAAArB,EAAAsM,iBAAApE,MAEDzL,KAAA6P,iBA4BC4C,EA3BC/Q,EAAAiO,KAAM3P,KAAQ6P,iBAAA,SAAAkC,EAAAtG,GACZlI,EAAKmO,aAAcK,EAAKtG,QAIfzJ,UAAAsN,SAAA,SAAAsD,SACL5S,gBAEW6E,aACV+N,EAAApH,OAAA1J,IAAA,SAAAgM,GACH,GAAAC,GAAAxK,EAAAyK,gBAAAF,EACF,OAAAnB,GAAAsB,qBAAAtB,EAAAuB,iBAEUC,IAAK5K,EAAMkE,SAACqG,EAAA/B,UAAAgC,GACdtJ,QAAOqJ,EAAQhC,KAAM1G,KAAO0I,EAAMhC,KAAG1G,sBAM1CR,KAAA7C,QACA2F,OAAAmL,cACAnL,OAAAoL,SAEL9S,KAAGkK,SAAA,WAEC3G,EAACsM,iBAAqBkD,SAAYC,iBAAazP,EAAAuI,KAAAmH,yBACpD1P,EAAAoL,WAAA/J,KAAAgI,EAAAsG,sBAAAtG,EAAAuG,iBAAApR,EAAAyJ,OAAAjI,EAAAuI,KAAAvI,EAAAsL,iBAAAtL,EAAAsM,iBAAAtM,EAAAsM,iBAAA5O,OAAA,IAEO6N,aAAAvL,EAAAwL,4BAAkBxL,EAAAmL,iBAA1BM,qBACWC,8BAGP6B,qBAAgB,WAAA8B,MAEP5Q,UAAW4N,kBAAA,SAAAH,EAAA1N,EAAAqR,SACdpT,OACHqM,QAAA,SAAAyB,GAEH,GAAAC,GAAcxK,EAAQyK,gBAACF,GAErBuF,EAAQ1G,EAAAsB,qBAAAtB,EAAAuB,qBACP3K,EAASkE,SAAAqG,EAAA/B,UAAqBgC,WACvBD,EAAAhC,UACPgC,EAAShC,KAAA1G,MAEfrD,GAAAuR,QAAAD,GAEOhD,EAAA,SAARrF,SAQC,sBAPCuI,OAAaF,EAAQG,uBACnBC,SAAYL,QAGPpR,UAAAgO,mBAAA,SAAA0D,MACLnQ,GAAGvD,IACL0T,GAAGrH,QAAA,SAAAsH,GACJA,EAAAnI,OAAAa,QAAA,SAAAmF,GAEOjO,EAAAoL,WAAAtC,QAAA,SAAetK,GAAvBA,EAOC6R,kBAAApC,EAAA1F,eAFM9J,UAAA6R,gBAAsB,SAAAlF,EAAA7C,EAAA+D,GAC3B,GAAGtM,GAAAvD,IACJ,OAAA2O,GAAA7M,IAAA,SAAAC,EAAA0J,GAEO,MAAAmB,GAAAsG,sBAARtG,EAA2CuG,iBAAapR,EAAAyJ,OAAAM,EAAAvI,EAAAsL,iBAAAgB,EAAApE,IAAxDqD,aAUCvL,EAAAwL,4BAAAxL,EAAAmL,iBATMM,qBACEC,2BAIAjN,UAAA8N,kBAAA,SAAAgE,EAAAC,SACF/T,qBACAqM,QAAA,SAAsBtK,GACxB+R,GACJ/R,EAAA+M,aAAAvL,EAAAwL,4BAAAxL,EAAAmL,iBAGO3M,EACCiN,mBAAkB8E,EAAAC,GAC1B9E,2BAIcjN,UAAAwM,kBAA4B,WAC1C,GAAAuD,GAAA/R,KAAAmP,YAAAkB,EAAA,OAEO,OAAA0B,GAAAiC,WAGUhS,UAAQyM,oBAAM,SAAAC,SAC5B1O,MAAM8L,KAASmI,iBAASvF,EAAoB1B,EAE5CkH,KAAIC,MAAAzF,GAAY1O,KAAA8L,KAAA/B,UAAA/J,KAAA8L,KAAAqB,YAEPnL,UAAUoS,sBAAU,SAAAjD,WAa/B,aAXGxC,WAAAtC,QAAA,SAAAtK,GACA,GAAAsS,GAAAtS,EAAAuS,cAAAnD,EAEH,IAAOkD,EAIA,MAHRE,GAAA,MAAAxS,OAEOwS,EAAA,KAAAF,KAKAE,KAGUvS,UAAG+M,4BAAuB,SAAAL,GAC1C,MAAK1O,MAAA8L,KAAAmI,iBAAqBvF,EAAwBA,EAAA,EAAA1O,KAAA8L,KAAAqB,OAAA,QAIlCnL,UAAUwS,oBAAG,SAAAxL,GAC9B,GAAAyL,GAAAzU,KAAAoU,sBAAApL,EAAA0L,OAEO1U,MAAA+R,UAAA1B,EAAArH,EAAA0L,QAAAC,OAAA,wBAAwB3R,IAAA,GAAhChD,KAAA+T,YA+BCU,EAAA,KA9BCzU,KAAM4U,mBAAsBH,EAAA,MAC5BzU,KAAO2H,SAAIqD,SAAW,iBACtBhL,KAAO+T,YAAIc,eAIE7S,UAAW8S,mBAAK,SAAA9L,GAC7B,GAAAzF,GAAYvD,KAEN0U,EAAA1L,EAAe0L,OACnBK,GAAIC,WAAQN,EAAQO,MAAKC,OAAA,GAAgBlM,EAAImM,GAC7CC,GAAKJ,WAAWN,EAAOO,MAACI,MAAA,GAAgBrM,EAAGsM,QAC1CC,gBAAkBvV,KAAAwV,qBAErBd,EAAIO,MAAAC,KAAeH,EAAA,OACjBE,MAAMI,IAAAD,EAAA,QACNK,GAAMzV,KAAc4U,mBAAQc,sBAE5BR,KAAKlM,EAAA2M,MAAA3V,KAAoBuV,gBAAML,SAC7BlM,EAAO4M,MAAA5V,KAAAuV,gBAAAF,UACRtB,gBAED0B,EAAK,OACazV,KAAA4U,mBAA0BiB,aAAA7V,KAAA+T,eACzC/T,KAAmB4U,mBAAWiB,aAAaJ,EAE9C,IAAKK,EAAS,IAAAC,EACZ,MAEH/V,MAAA4U,mBACFoB,UAAAhW,KAAA+T,YAAA0B,GAEOzG,oBAAA,EAAAhP,KAAA+T,aACF/T,KAACkK,SAAY,WAEZ3G,EAAS0S,4BACT,KAIC7I,EAAApL,UAAAkU,kBAAkB,WACxBlW,KAAM+T,YAAaoC,SAAQnW,KAAAyN,gBAE3BzN,KAAA2H,SAAOyO,YAAA,sBACLxB,mBAAoB,UACpBb,YAAK,MAET3G,EAACpL,UAAAwT,mBAAA,WAEO,GAAAa,GAAArW,KAAA+R,UAAAuE,uBACN,QACEpB,KAAAmB,EAAUnB,KACTG,IAAAgB,EAAAhB,QAIMrT,UAAAiU,yBAAA,WACTjW,KAAM2O,WAAYtC,QAAK,SAAWkK,GAC5BA,EAAStH,2BAIHjN,UAAAwU,SAAA,SAAAtF,EAAAK,EAAAzD,GAEZ,GAAIqD,GACFsF,EAAWvF,EAAAwF,WAAW5I,GAEtBC,EAAY/N,KAAAgO,gBAAmBF,UAE7B+B,iBAAKnO,EAAAgR,UAAmB1S,KAAU2O,WAAKuC,UACtCuF,EAAWE,WAEd1E,SACD,OAAAV,IAEGA,EAAC+B,QAAAmD,GACHtF,EAAMnR,KAAIyH,SAAAgP,EAAAE,WAAA5I,GACVsC,EAAErQ,KAAI6P,iBAAAnO,EAAAgR,UAAA1S,KAAA2O,WAAA4C,KACFgC,OAAEpC,GACLnR,KAAAkK,SAAAqH,EAAAvC,mBAAA4H,KAAArF,GAAA,KAGGvR,KAAA8Q,qBAAA,YACAI,KAAAA,EACAK,GAAAA,EAEFzD,KAAK2I,OAIJzU,UAAkB6U,eAAM,SAAA7N,GAC7B,GAAI8N,GAAmB9N,EAAO0L,OAACtD,WAAA,iBAAAC,MAChC0F,EAAA/W,KAAA2O,WAAAmI,EAEO9W,MAAA4U,qBAAAmC,GAAR/W,KAAAwW,SAcCxW,KAAA4U,mBAAAmC,EAAA/W,KAAA+T,aAZC/T,KAAM8P,mBAAY,GAElB9P,KAAKwN,mBAAS,QAEFxL,UAAAgV,0BAAA,SAAAhO,MACTzF,GAAAvD,KACCkR,EAAClR,KAAS4U,mBACZ9G,EAAK9N,KAAA+T,iBACLzE,UACCzK,MAAA,YAEC2G,YAGExL,KAAAkK,SAAA,WACF3G,EAAMiT,SAAAtF,EAAA3N,EAAqBoL,WAAApL,EAAAoL,WAAA1N,OAAA,GAAA6M,GAC7BvK,EAAKuM,mBAAkB,KAGzB9P,KAAIwN,mBAAK,QAEGxL,UAAYiV,oBAAU,SAAAjO,GAChChJ,KAAKwN,qBACNxN,KAAAwN,mBAAAxE,EAAAkO,UAAAC,WACCnX,KAAEwN,qBAA0BxE,EAAAkO,UAAAC,WAC5BnO,EAAKkO,UAAAC,UAAqBC,UAACnV,IAAA,mBAC5BoO,EAAA,QAAAgH,IAAA,SAAA,QACFrX,KAAAyN,gBAAA,IAIG4C,EAAA,QAAMgH,IAAO,SAAU,IACvBrX,KAAEyN,gBAAoB,IAIlBL,EAAApL,UAAAsV,yBAAR,SAAiCtO,GAC/BhJ,KAAMwN,qBAAwBxE,EAAK0L,SACpC1L,EAAA0L,OAAA0C,UAAAnF,OAAAjS,KAAA8L,KAAAyL,qBAEOlH,EAAA,QAAAgH,IAAA,SAAA,QAECrV,UAAcwV,oBAAQ,SAAoBxO,KAC/C0L,OAAK0C,UAAAnF,OAAmBjS,KAAK8L,KAAAyL,wBAExBvV,UAAayV,WAAK,cAEvBlU,GAAQvD,mBACL,aACC0O,eAAYnL,EAAAiL,uCACGjL,EAAAkL,oBAAAlL,EAAAmL,mCACAqE,SAAYC,iBAAMzP,EAAAuI,KAAAmH,sCACrB1P,EAAAsQ,gBAAAtQ,EAAAlC,OAAAkC,EAAAuI,KAAAvI,EAAAsM,2BACX,uBACD6H,uBAECC,SAAA,EACD5F,UAAQ1B,EAAA,YAAMrN,IAAA,GACZ4U,MAAK,KAEPC,QAAO,SAAC7O,GACNzF,EAAKiR,oBAAmBxL,IAEzB8O,OAAA,SAAA9O,GAEGzF,EAACuR,mBAAA9L,IAEL+O,MAAM,SAAE/O,GACNzF,EAAK2S,gCAGL,mCACD8B,UACDC,OAAA,SAAkBjP,GAChBzF,EAAKyT,0BAAyBhO,IAEhCkP,YAAa,SAAClP,GACZzF,EAAK0T,oBAAoBjO,IAE1BmP,iBAAA,SAAAnP,GAEGzF,EAAC+T,yBAAuBtO,IAE5BoP,YAAQ,SAAMpP,GACZzF,EAAKiU,oBAAoBxO,eAGzB,wBACDgP,UACDC,OAAA,SAAkBjP,GAChBzF,EAAKsT,eAAA7N,IAEPkP,YAAa,SAAClP,GACZzF,EAAK0T,oBAAoBjO,IAE1BmP,iBAAA,SAAAnP,GAEAzF,EAAA+T,yBAAUtO,IAEXoP,YAAS,SAAApP,GACPzF,EAAMiU,oBAAiBxO,QAGzBmG,WACCkJ,GAAA,uBAAA,0BAAA,WAEDC,SAAA,uBAAAZ,WAAA,GACPrH,EAAA9M,GAAAgV,QAAA,WACFF,GAAA,mBAAA,WAEKC,SAAsC,uBAAAZ,WAAA,MAExC,IAEAtK,QAIF/E,UACAwF,eAAY,qBACb+D,aAAA,mBAEOnN,QAAO,oBACZoG,iBAAU,4ECjoBbvE,SAAO7G,OAAI,qBACZiG,UAAA,mBAAA8S,KAqBDC,iCAAwB,GAAAC,yBAAA,KAAAC,IAAA,SAAAhY,EAAAlB,EAAAD,wBAEtByO,GAAU2K,EAAAnU,GACV,MAAA,IAAAmU,GAAAnU,KASAwJ,qBAAaA,iBAEN,UACA,GAEPC,EAAC,WAEM,QAAAA,GAAAzJ,GACLzE,KAAAmO,IAAW1J,EAAM0J,IAAAnL,IAAA,GAClBhD,KAAA8L,KAAArH,EAEMzE,KAAAoF,KAAA1D,EAAAgM,SAAAmL,EAAQpU,EAAOW,MACpBpF,KAAKmR,KAAK,KAuHV,SApHSnP,UAAO8W,QAAA,iBACd9Y,MAAKoF,QAEHpD,UAAc+W,QAAA,SAAA/E,EAAAgF,eACf5T,KAAE4O,MAAAA,EACLhU,KAACoF,KAAA4T,OAAAA,EAEDhZ,KAAOmR,MACRnR,KAAAmR,KAAAkG,KAEMrD,MAAAA,EACAgF,OAASA,IAIZhZ,QAEKgC,UAAKiX,YAAA,SAAA/D,EAAAG,GAWP,YAVFjQ,KAAE8P,KAAAA,EACLlV,KAACoF,KAAAiQ,IAAAA,EAEDrV,KAAOmR,MACRnR,KAAAmR,KAAAkG,KAEMnC,KAAAA,EACEG,IAAKA,IAGPrV,QAGOgC,UAAAwR,oBAAA,WACb,MAAAxT,MAAAmO,OAGanM,UAAUkX,WAAE,SAAAvE,GACxB,MAAD3U,MAAAmR,KAAAd,EAAArQ,KAAAmO,KAAAwG,OAAAA,GAAC3U,QAIGgC,UAAS2U,QAAA,iBACT3W,MAAImR,KAAAnO,IAAA,MAGEhB,UAAa6S,UAAO,uBACzBsE,QAAW9I,EAAC,SACZrF,SAAQ,uBACPqM,KAED+B,SAAK,gBACNpZ,KAASmR,KAAAkG,IAAA,YACLrX,KAAAmR,KAAAkG,IAAA,OACHrD,MAAMhU,KAAEmR,KAAMkG,IAAA,SACd2B,OAAAhZ,KAAAmR,KAAAkG,IAAA,YAGJrX,KAAAmR,KACDnG,SAAA,gBAACqM,KAEKgC,OAAA,SAGDC,MAAAtZ,KAAYmZ,SACdnZ,QAGQgC,UAAOmU,SAAY,SAAOoD,WA0B/BC,OACIL,UACRpZ,EAAAoZ,QAAAlH,SACFlS,EAAAoZ,QAAA,MAEMpZ,EAAAoR,KACAkG,IAAQ,SAAU,IACxBoC,IAAA,gBAAAD,SAhCUxZ,mBAEJmR,KACJiF,YAAA,gBAAOiB,KACFnC,KAAKlV,KAAAmZ,QAAA9B,IAAA,YACFrX,KAAAmZ,QAAA9B,IAAA,SAEHgB,GAAG,gBAAkBmB,MAGtBrI,KAEEkG,KACDnC,KAACnV,EAAUoZ,QAAK9B,IAAA,QACrBhC,IAAAtV,EAAAoZ,QAAA9B,IAAA,OAEMgC,OAAK,KAGNjD,YAAa,kBACf+C,QAAKlH,WACLkH,QAAK,MAGPnZ,MAYJkO,EAAClM,UAAA0X,mBAAA,SAAAC,GAAC3Z,KAAAmZ,QAAA9B,IAAAsC,MAIY3X,UAAO4X,WAAc,WAEjC,MAAO5Z,MAAK8L,KAAArH,SAEhByJ,EAAAlM,UAAC6X,WAAA,SAAApV,GAEM,MAFN/C,GAAAgM,MAAA1N,KAAA8L,KAAArH,QAAAA,GArIY/C,EAAAgM,MAAA1N,KAAAoF,KAAAX,EAAAW,MAuINpF,MAGIkO,OAGLA,gBAAeA,UAEhBzO,OAAA,yEC/KG,GAAA4T,GAAO,GAAAnF,GAAyBzJ,EAExC,OAAA4O,qMCFA,YAMA,IAACnO,GAAAlF,MAAAA,KAAAkF,WAAA,SAAA4U,EAAAC,WACmCC,KAAAha,KAAA4Y,YAAAkB,EAAlC,IAAA,GAAAG,KAAAF,GAAAA,EAAAG,eAAAD,KAAAH,EAAAG,GAAAF,EAAAE,gBAKE,OAAAF,EAAAI,OACEC,OACQL,IAAAC,EAAgBhY,UAEhB+X,EAAA/X,UAAA,GAAAgY,OAFArZ,EAAA,kCAEA,SAAA4D,WAIJ8V,GAAe3S,EAAAC,EAAAuC,EAAA1F,MACjBjB,GAAIgB,EAAKvD,KAAQhB,OAAKA,uBAAM2H,EAC9BpE,EAAC2G,SAAAA,EAED3G,EAAKiB,2BAAUA,IACb8V,QAAO,IACP/W,EAAKkB,SACHlB,EAAKkB,QAAAC,OACNnB,EAAAmB,KAAAhD,EAAAiD,MAAApB,EAAAmB,KAAAnB,EAAAkB,QAAAC,OAEHnB,EAAKmB,KAAKE,MACVC,MAAK,cAEL6G,MAAK,WAGEnI,EAAOuB,qBAGZG,MAAK1B,EAASkB,QAAGQ,OAAA,OACnB1B,EAAG+W,QAAA/W,EAAAkB,QAAA6V,SAAA/W,EAAA+W,sBACJ5S,EAAA0G,OAAA,WAEO,MAAAzG,GAAA4S,GAAA,aAAR,SAAAlM,GACM9K,EAAKiX,gBAwFX,SA1HOH,EAAuB9V,KAsC3BvC,UAAAwY,UAAA,WACF,GAAAjX,GAAAvD,IAEOA,MAAAyE,QAAAgW,OAARza,KAAAkK,SA+BC,WA9BM3G,EAAAmX,YAAqBnX,EAAMoE,SAASO,KAAA,SACpC,QAGMlG,UAAU8C,cAAA,iBACb9E,sBACK0B,EAAE0O,MAACpQ,KAAAsa,yCACAhX,kBACX,8BAED2B,MAAOjF,KAAKiF,MACZG,KAAMpF,KAAKyE,QAAQW,OACnBoB,QAAa,EACbC,QAAa,GAEb1B,KAAC/E,KAAAyE,QAAAM,KACFF,MAAA7E,KAAAyE,QAAAI,MACD8V,KAAA3a,KAAcyE,QAAAkW,KACbL,QAACta,KAAWsa,QACbM,cAAgB,SAAYN,GAEvB/W,EAAQ+W,QAAOA,IAGpBjV,aAAa,kDACRC,GACL/B,EAAKgC,WAAQD,EAAUF,MACtB7B,EAAA0B,MAAAK,EAAAL,MACD1B,EAAKkB,QAAOQ,MAAQK,EAAAL,MACnB1B,EAAAkB,QAAAM,KAAAO,EAAAP,KACJxB,EAAAkB,QAAAI,MAAAS,EAAAT,MAEOtB,EAAAkB,QAAAkW,KAAArV,EAAAqV,KACFpX,EAACkB,QAAA6V,QAAuBhV,EAAAgV,SAC7B,WAEM/W,EAAA+W,QAAA/W,EAAAsX,iBAEQ7Y,UAAY0Y,YAAe,SAACD,GAEzCza,KAAI8a,kBAAmB9a,KAAE2H,SAAAgN,SAAA8F,MAEhBzY,UAAAuD,WAAuB,SAASW,MACvC3C,GAAQvD,IACVA,MAACyE,QAAAW,KAAAoB,QAAAN,EAAAW,MACF7G,KAAAyE,QAAAW,KAAAqB,QAAAP,EAAAc,MAGOhH,KAAAyE,QAAAgW,OAEJza,KAAAkK,SAAc,WAOX3G,EAAAuX,kBAA2BvX,EAAKoE,SAAAgN,SAAcpR,EAAAoE,SAAmBO,KAAA,SACpE,QAGUlG,UAAW8Y,kBAAkB,SAAAnT,EAAkB8S,MACzDM,GAAUpT,EAAgBqM,MAAGrM,EAAAqM,QAAArM,EAAAqT,YAAAC,EAAAtT,EAAAqR,OAAArR,EAAAqR,SAAArR,EAAAuT,aAAAC,EAAAV,EAAA,GAAAW,cAAAX,EAAAzG,MAAAqH,EAAAZ,EAAA,GAAAa,eAAAb,EAAAzB,OAAAuC,EAAA,EAAAC,IAC9BL,GAAAJ,EAAAM,EAAAJ,GAAKM,KAAEJ,EAAAE,EAAAJ,EAAAF,GAAA,GACNS,EAAU,eAAgB,GAAAD,EAAa,KACvCC,EAAU,OAAY,GAAIP,EAAmB,KAC7CO,EAAU,MAAS,GAAKL,EAAcF,EAAiBI,EAAgB,KACvEG,EAAU,cAAgB,KAI5BD,KAAUF,EAAWF,EAAAJ,EAAAE,GAAA,GACtBO,EAAA,cAAA,GAAAD,EAAA,KACHC,EAAC,OAAA,GAAAH,EAAAN,EAAAI,EAAA,KAtHiCK,EAAA,MAAA,GAsHjCT,EAAA,KAGKS,EAAkC,eAAA,IAEpCf,EAAApD,IAASmE,IAEXnB,KACa7U,iBACdiW,GAEDpT,UACG5D,QAAO,eAEXf,WAAA2W,0CC1ID/T,SACA7G,OAAA,gBAGAiG,UAAA,eAAqB+V,KAIrBC,+BAA8B,KAAAC,IAAA,SAAAhb,EAAAlB,EAAAD,GAE9B,eAEE,wBACA,iBAEA,iBAEA,uBACA,gCAEAC,OAAA,gBAEA,oBACA,yBACA,cACA,+BACA,4BACA,yBACA,YACC,eAGH,cAEA,YACA,eACA,cACA,eAEAkB,EAAA,iCACAA,EAAA,sBAEAA,EAAA,4DC3CAA,EAAC,0BACO,6CACJ,uHAGE,EAAAib,+BAAA,EAAAC,qBAAA,EAAAC,uBAAA,EAAAC,wBAAA,GAAAC,cAAA,GAAAC,yBAAA,GAAAC,cAAA,GAAAC,uBAAA,GAAAC,0CAAA,GAAAC,+BAAA,GAAAC,mCAAA,GAAAC,qBAAA,GAAAC,gCAAA,KAAAC,IAAA,SAAA9b,EAAAlB,EAAAD,GAGJ,GAAAkd,GAAO,kBAEJC,SAAU,KACdnZ,YAAA,8GCXD,YAEA,IAAA0B,GAAAlF,MAAAA,KAAAkF,WAAA,SAAA4U,EAAAC,GA+BE,QAAAC,KAAAha,KAAA4Y,YAAAkB,EA/BmC,IAAA,GAAAG,KAAAF,GAAAA,EAAAG,eAAaD,KAAAH,EAAAG,GAAAF,EAAAE,gBAgCnC,OAADF,EAACI,OAAAC,OAAAL,IAAAC,EAAAhY,UAAA+X,EAAA/X,UAAA,GAAAgY,OA/BNrZ,EAAY,yBACV,SAAA4D,mCAIHvD,KAAQhB,OAAAA,IAoCZ,oDAjCM4c,eAEH/X,MAAA,QACDgY,OAAA,aACE3W,QACAW,MAAQ,EACRG,MAAQ,KAITnC,MAAA,QACDgY,OAAA,aACE3W,QACAW,MAAQ,EACRG,MAAQ,KAITnC,MAAA,QACFgY,OAAA,aACA3W,gBAMFc,MAAA,OAOKzD,aAvCWgB,KAyCdvC,UAAA8a,WAAA,SAAAC,EAAA7W,EAAAyF,GACF3L,KAAA+c,IAAC/c,KAAA+c,GAAA/b,KAAAhB,KAAAkG,GAGIyF,EAAS,OACTA,EAAS,MAAK3K,KAAA2K,EAAUzF,EAAOlG,OAjDFwF,EAAAxD,UAmDpCuD,WAAA,SAAAW,GAnDYlG,KAAAyE,QAAAW,KAAAoB,QAAAN,EAAeW,MAqD3B7G,KAAAyE,QAAAW,KAAAqB,QAAAP,EAAAc,OAImBxB,KAETG,iCACMH,QAGJ,mBAEPwX,YAEJA,GAAAhb,UAACiC,KAAA,WAAA,UAIE,OAFI,OAAAjE,KAAAkE,WACGlE,KAAAkE,SAAc,GAAAsB,IACZxF,KAAAkE,+FCxEW,IAAI+Y,IAAE,SAAAtc,EAAAlB,EAAAD,GAE/B,YACA,SAAA0d,GAAAC,GAEA,IAAA,GAAAlD,KAAAkD,GAAA3d,EAAA0a,eAAkCD,KAAAza,EAAAya,GAAAkD,EAAAlD,uLCNlC,YAOA,IAAC/U,GAAAlF,MAAAA,KAAAkF,WAAA,SAAA4U,EAAAC,WACkCC,KAAAha,KAAA4Y,YAAAkB,EAAjC,IAAA,GAAAG,KAAAF,GAAAA,EAAAG,eAAAD,KAAAH,EAAAG,GAAAF,EAAAE,gBAEE,OAAAF,EAAAI,OACUC,OAAAL,IAAAC,EAAAhY,UAA8C+X,EAAA/X,UAAA,GAAAgY,OAA9CrZ,EAAA,kCAKM,SAAK4D,WAGf6Y,GAAW5Y,MACbjB,GAAOgB,EAAAvD,KAAahB,OAAAA,cACpBwE,2BAAOA,IACLC,UACFlB,EAACmB,KAAAnB,EAAAkB,QAAAC,KAAAhD,EAAAiD,MAAApB,EAAAmB,KAAAnB,EAAAkB,QAAAC,MAAAnB,EAAAmB,MAEHnB,EAAKmB,KAAKE,0BACX8G,MAAA,WAEOnI,EAAAuB,qBAEJG,MAAQ1B,EAAAkB,QAAAQ,OAAA,WAqBZ,SAlCGmY,EAAA7Y,KAgBUvC,UAAK8C,cAAa,iBACrB9E,UACLwE,2BAAAlB,MACD2F,QACChE,MAACjF,KAAWiF,MACbG,KAAKpF,KAAQyE,QAAOW,KACpBP,MAAK7E,KAAQyE,QAAQI,MACrB8V,KAAK3a,KAAAyE,QAAiBkW,MAEtBtV,aAAa,wCACZ,SAAAC,GACJ/B,EAAA0B,MAAAK,EAAAL,MACH1B,EAAAkB,QAAAQ,MAACK,EAAAL,MArCgC1B,EAAAgC,WAAAD,EAAeF,MAuClC7B,EAAyBkB,QAAAkW,KAAArV,EAAAqV,KAC7BpX,EAAEkB,QAAAI,MAAAS,EAAAT,SAGVuY,KACa5X,iBACd6X,GAEDhV,UACG5D,QAAO,eAEXf,WAAA0Z,6JCxDD,YAUA,IAAClY,GAAAlF,MAAAA,KAAAkF,WAAA,SAAA4U,EAAAC,WACuCC,KAAAha,KAAA4Y,YAAAkB,EAAtC,IAAA,GAAAG,KAAAF,GAAAA,EAAAG,eAAAD,KAAAH,EAAAG,GAAAF,EAAAE,gBAIE,OAAAF,EAAAI,OAAAC,OACUL,IACAC,EAAAhY,UACA+X,EAAiC/X,UACjC,GAAAgY,OAHMrZ,EAAN,kCAEA,SAAiC4D,WANpC+Y,GAAwB5V,EAASC,EAAAuC,EAAAG,GACjC,GAAA9G,GAAAgB,EAAAvD,KAAiBhB,OAAgBA,IAmBtC,OATAuD,GAAImE,OAAKA,IACPC,SAAKA,IACLuC,SAAKA,EACP3G,EAAC8G,gBAAAA,2BACF9G,EAAAga,kBAAA,IAEMha,EAAAkB,UAAPlB,EAAAia,cAICja,EAAAkB,QAAA+Y,eAAAja,EAAAia,cAHKja,EAACga,kBAASha,EAAAkB,QAAA8Y,mBAAAha,EAAAga,mBAEXha,EAmBL,SAhCU+Z,EAAA/Y,GAgBH+Y,EAAAtb,UAAA0Y,YAAP,SAAkB+C,GAAlB,GAAAla,GAAAvD,IACEA,MAAKkK,SAAQ,WACT3G,EAAC8G,gBAAoByQ,kBAAgBvX,EAAAoE,SAAAgN,SAAA8I,EAAA/I,aAIhC1S,UAAgBuD,WAAA,SAAsBW,MAC7C3C,GAAGvD,IACLA,MAAGyE,QAAKW,KAAAoB,QAAAN,EAAAW,MACT7G,KAAAyE,QAAAW,KAAAqB,QAAAP,EAAAc,MACHhH,KAAAkK,SAAA,WAlCsCxI,EAAAiO,KAAApM,EAAAoE,SAAAO,KAkCrC,OAAA,SAAAuS,GAEKlX,EAAiB8G,gBAAyByQ,kBAAAvX,EAAAoE,SAAAgN,SAAA8F,MAE5C,MAEF6C,KACa9X,iBACdkY,GAEDrV,UACG5D,QAAO,eAEXf,WAAA4Z,yLC5DD,YAOA,IAACpY,GAAAlF,MAAAA,KAAAkF,WAAA,SAAA4U,EAAAC,WACsCC,KAAAha,KAAA4Y,YAAAkB,EAArC,IAAA,GAAAG,KAAAF,GAAAA,EAAAG,eAAAD,KAAAH,EAAAG,GAAAF,EAAAE,gBAGE,OAAAF,EAAAI,OAAAC,OACEL,IACQC,EAAAhY,UACa+X,EACb/X,UAAA,GAAAgY,OAFArZ,EAAA,kCAEA,SAA0B4D,WAN7BoZ,GAA6BjW,EAAAwC,EAAAvC,EAAAnD,EAAAoZ,GAWlC,GAAIra,GAAKgB,EAASvD,KAAChB,OAAAA,cACfkK,SAAOA,aAAmBvC,EAC9BpE,EAACiB,2BAAAA,EAEDjB,EAAKqa,sBAAUA,IACbC,cAAO,EACPta,EAAKkB,SACHlB,EAAKkB,QAAAC,OACNnB,EAAAmB,KAAAhD,EAAAiD,MAAApB,EAAAmB,KAAAnB,EAAAkB,QAAAC;AAEHnB,EAAKmB,KAAKE,MACRC,MAAO,cACP6G,MAAO,WACLnI,EAAKuB,mBAITvB,EAAKmB,KAAAE,MAELC,MAAO,kBACL6G,MAAK,WACJnI,EAAAua,4BAKHva,EAAGkB,QAACsZ,SAAMxa,EAAAkB,QAAAsZ,UAAAxa,EAAAkB,QAAA2U,WACLhL,OAAO,yBAAS,aAAC4P,uCAEvB,MAAArW,GAAA4S,GAAA,aAEO,SAAAlM,GAaP,GAbDA,GACO9K,EAAAya,mBAEHza,EA4CJ,SAlFUoa,EAAApZ,KAwCJvC,UAAmB8C,cAAQ,iBAC3B9E,UACDwE,2BAAAlB,MACD6B,YAAY,sBACX8D,QACD7D,KAAKpF,KAAAyE,QAAiBW,KACtB6Y,aAAaje,KAAAyE,QAAewZ,aAC3BC,YAAA,GAGE7Y,aAAA,4CACL,SAAaC,GACT/B,EAACgC,WAAaD,EAAUF,MAExB7B,EAACkB,QAAAwZ,aAAiB3Y,EAAA2Y,kBAavBjc,UAAAuD,WAAA,SAAAW,GATClG,KAAKyE,QAAAW,KAAAoB,QAAsBN,EAAKW,WAC9BpC,QAAAW,KAAcqB,QAAKP,EAAQc,WAC3BgX,oBAEehc,UAAG8b,uBAAA,iBAChB9d,gCACasD,MACf2a,aAACje,KAAAyE,QAAAwZ,aACAE,YAAAne,KAAAyE,QAAAsZ,UACJ,SAAAK,GAEOA,IAAR7a,EAAAkB,QAKCsZ,SAAAK,EAAAL,SAJMxa,EAAAkB,QAAewZ,aAAMG,EAAAC,gBAI5BV,EAAC3b,UAAAgc,eAAA,WACH,GAAAza,GAAAvD,IAnFqCA,MAAA6d,cAAA,EAsF/B7d,KAAAkK,SAAqC,WACjC3G,EAAEsa,cAAA,GACR,KAEFF,KACanY,iBACd8Y,GAEDjW,UACG5D,QAAO,eAEXf,WAAAia,yKCzGD,YAIA,IAACzY,GAAAlF,MAAAA,KAAAkF,WAAA,SAAA4U,EAAAC,GAEC,QAAMC,KAASha,KAAc4Y,YAACkB,EAD9B,IAAM,GAAAG,KAAAF,GAAsBA,EAAGG,eAAAD,KAAAH,EAAAG,GAAAF,EAAAE,GAG/BH,GAAA9X,UAAA,OAAA+X,EAAAI,OAAAC,OAAAL,IAAAC,EAAAhY,UAAA+X,EAAA/X,UAAA,GAAAgY,OAOErZ,EAAA,kCAHY,KACL,MAQiB,SAAA4D,WAGlBga,GAAeC,EAAA9W,EAAAwC,MACjB3G,GAAKgB,EAAOvD,KAAKhB,OAAQA,IAU3B,OATAuD,GAACkb,OAAA,EAEDlb,EAAKmb,UAAYC,cAClBpb,EAAAqb,UAAA1U,EAEM3G,EAAAkB,UAAPlB,EAAAmB,KASCnB,EAAAkB,QAAAC,KAAAhD,EAAAiD,MAAApB,EAAAmB,KAAAnB,EAAAkB,QAAAC,MAAAnB,EAAAmB,MAPCnB,EAAKsb,eAEAtb,EAiBP,SA9BOgb,EAAqBha,KAeXvC,UAAAuD,WAAA,SAAAW,MACb3C,GAAKvD,IACPA,MAAGyE,QAAKW,KAAAoB,QAAAN,EAAAW,MACT7G,KAAAyE,QAAAW,KAAAqB,QAAAP,EAAAc,MAEOhH,KAAAye,OAAA,EACNze,KAAK6e,eACN7e,KAAA4e,UAAA,WACHrb,EAAAkb,OAAA,GArCuC,MAyCrCF,EAAUvc,UAAA6c,aAAA,WACR7e,KAAA0e,UAAsB,GAAb1e,KAAayE,QAAAW,KAAAoB,SAAA,GAAAxG,KAAAyE,QAAAW,KAAAqB,QAAAqY,EAAAH,GAExBJ,KACa/Y,iBACduZ,GAED1W,UACG5D,QAAO,eAEXf,WAAA6a,oDCtDCjY,SAKE7G,OAAM,gBAGNiG,UAAM,oBAAsBqZ,oCAEN,KAAKC,IAAA,SAAAre,EAAAlB,EAAAD,WAGtByf,GAAiBvX,EAAAwX,EAAAC,GAQvB,QAAAC,GAAAjO,GAED,MAAAd,GAAA,SACSrF,SAAA,sBACLuI,OAAUpC,GACNnO,IAAE,GAXR,GAAAqc,GAAAtM,SAAuBuM,yBAAIvd,EAAA2F,EAAA6X,MAAAJ,EAAAK,qBACzBnT,QAAS,SAAQyB,SACdsR,EAAStR,EAAA0F,yBACTiM,YAAYtR,KAEjB+Q,EAAC3L,OAAA8L,GAUL,QAAQK,KAEN,OACG/C,SAAO,IACPgD,KAASV,yBCnCd3Y,QACE7G,OAAW,0BACZmgB,UAAA,oBAAAF,QAkCKG,IAAA,SAAAlf,EAAqBlB,EAAKD,GAEhC,qBASE0T,GAAY0F,EAAc5G,EAAEvN,EAAaqb,EAAA3O,SAJlC,IAAAyH,GAAmB5G,EAACvN,EAAAqb,EAAA3O,KAKzB+B,sBAAmBA,QACC,IACL,mBACVC,GAAYnB,EAAAvN,EAAAqb,EAAA3O,GACjBnR,KAAK+f,aACL/f,KAAKmL,QAAS,EACdnL,KAAKgS,MAAAA,EACNhS,KAAA8L,KAAArH,EAEMzE,KAAA8f,QAAAA,GAAA,EACL9f,KAAKmR,KAAMA,EACXnR,KAAI+f,kBACF5U,OAAK1G,EAAY0G,SAAG,EACtBnL,KAACggB,eAAAF,IAAAG,QAGH9M,GAACnR,UAAAsR,QAAA,SAAAxF,GAIC,MAJA9N,MAAAgS,MAAApN,KAAAkJ,GAEK,IAAA9N,KAAAgS,MAAA/Q,QACLjB,KAAO8O,eACP9O,QAISgC,UAAKke,kBAAwB,SAAUC,EAAOC,GACvD,MAACpgB,MAAA+f,UAAAI,GAAAC,MAEApe,UAAAqe,SAAA,SAAAC,EAAA7Z,EAAAD,GACF,MAAAxG,MAAAggB,eAAChgB,KAAAugB,wBAAAD,EAAA7Z,EAAAD,GAIIxG,KAAAwgB,yBAAgBF,EAAA7Z,EAAAD,MAMZxE,UAAewe,yBAAmB,SAAAF,EAAA7Z,EAAAD,MAExCia,KAEAC,EAACJ,GAAAA,EAAAF,KAAA,EAACO,EAAM3gB,KAAA4gB,YAAAN,MACN,OAAsB,IAAtB7Z,EAAsB,IAEtBoa,GAAK7gB,KAAA+f,UAAiBrQ,cAQtB,GAHH+Q,EAAAzgB,KAAA8gB,QAAAD,EAAAF,EAAAD,EAAA1gB,KAAA8f,UAGUW,EAAiB,CACpB,GAAAM,GAAe/gB,KAAQggB,eAAkB,EAAI,CAE9CS,GAAezgB,KAAA8gB,QAAAD,EAAAF,EAAAI,EAAA,EAAA/gB,KAAA8f,iBAThBe,EAAsB,GAAA,MAYf,IAATra,GAA6B,IAApBC,EAAoB,IAC7Bua,GAASV,GAAkBA,EAASnP,KAAE/L,MAAA,OAId,IAAtB4b,EAAcxa,SAA0C,IAAlCwa,EAAkBva,QACxCzG,KAAA8f,QAAeY,EAAQ,EAAA,GACxBD,EAAAzgB,KAAAkgB,kBAAAS,EAAAD,EAAA,GACFO,EAAAjhB,KAAAkgB,kBAAAS,EAAAD,EAAA,KAEGD,EAAiBzgB,KAAKkgB,kBAAkBS,EAAW,EAAG,GACtDM,EAAkBjhB,KAAKkgB,kBAAkBS,EAAW,EAAG,IAEpC,IAAnBK,EAASxa,SAA8B,IAARwa,EAAQva,UACrC0Z,IAAA,IAAiB,KACjBngB,KAAkBkgB,kBAAKS,EAAkB,EAAQD,EAAU,GAC7DO,EAACjhB,KAAAkgB,kBAAAS,EAAA,EAAAD,IAEC1gB,KAAA8f,QAAeY,EAAQ,GAAA,GACxBD,EAAAzgB,KAAAkgB,kBAAAS,EAAAD,EAAA,GACFO,EAAAjhB,KAAAkgB,kBAAAS,EAAAD,EAAA,KAEOD,EAAWzgB,KAAWkgB,kBAASS,EAAA,EAAA,GACjCM,EAAgBjhB,KAAAkgB,kBAAyBS,EAAC,EAAA,IAGtC,IAANK,EAAMxa,SAAA,IAAAwa,EAAAva,eACNqZ,QAAAY,EAAsB,GAAA,EACtB1gB,KAAAkhB,WAAeP,EAAQD,EAAA,IACxBD,EAAAzgB,KAAAkgB,kBAAAS,EAAAD,EAAA,GACFO,EAAAjhB,KAAAkgB,kBAAAS,EAAAD,EAAA,KAECD,EAAkBzgB,KAAKkgB,kBAAkBS,EAAYD,EAAK,GAC3DO,EAAAjhB,KAAAkgB,kBAAAS,EAAAD,EAAA,KAMHD,EAAsBzgB,KAAAkgB,kBAA0BS,EAAW,EAAC,GAC5DM,EAAuBjhB,KAAAkgB,kBAA0BS,EAAM,EAAQ,QArC3D3gB,KAAkBkgB,kBAAKS,EAAkBD,GAC3CO,EAACjhB,KAAAkgB,kBAAAS,EAAAD,EAAA,IA0DA,UAnBmB,IAAXja,GAA6B,IAAlBD,EAGZ,IAANC,GAAM,IAAAD,SACNsZ,QAAAY,EAAsB,EAAA,EACtB1gB,KAAAkhB,WAAeP,EAAQD,EAAA,IACxBD,EAAAzgB,KAAAkgB,kBAAAS,EAAAD,EAAA,GACFO,EAAAjhB,KAAAkgB,kBAAAS,EAAA,EAAAD,EAAA,KAECD,EAAkBzgB,KAAKkgB,kBAAkBS,EAAYD,EAAK,GAC3DO,EAAAjhB,KAAAkgB,kBAAAS,EAAA,EAAAD,EAAA,KAKED,EAAiBzgB,KAAAkgB,kBAAAS,EAAA,EAAA,GACpBM,EAAAjhB,KAAAkgB,kBAAAS,EAAA,EAAA,QAfI3gB,KAAckgB,kBAAQS,EAAkBD,KACxC1gB,KAAekgB,kBAAQS,EAAkB,EAAAD,EAAc,KAkBzDS,MAAMV,EAENW,IAAKH,MAKHjf,UAAM8e,QAAA,SAAAO,EAAAV,EAAAD,EAAAZ,SACPM,EAAAD,KACHngB,KAACggB,eAAA,CAED,IAAAI,EAAWM,EAACN,EAAAN,EAAAM,IACb,IAAAiB,EAAAV,GAAAP,GAAAjP,KAAA,CAGUmQ,EAAQD,EAAEV,GAAMP,EACjB,oBAKPA,EAAAM,EAAAN,EAAAN,EAAAM,IAAA,CAED,IAAID,EAAO,EAAAA,EAAA,EAAAA,IACT,IAAAkB,EAAOlB,EAAKQ,GAAAP,GAAAjP,KAAA,CACbmQ,EAAAD,EAAAlB,EAAAQ,GAAAP,EACF,OAGI,GAAAkB,EACD,MAAAA,OAOItf,UAAeue,wBAAmB,SAAAD,EAAA7Z,EAAAD,MAExCia,KAEAE,EAAC3gB,KAAA4gB,YAAAN,GAACI,EAAMJ,GAAAA,EAAAF,KAAA,KACN,OAAsB,IAAtB3Z,EAAsB,IAEtBoa,GAAK7gB,KAAA+f,UAAiBrQ,cAOrB,GAFJ+Q,EAAAzgB,KAAA8gB,QAAAD,EAAAF,EAAAD,EAAA1gB,KAAA8f,UAEYW,EAAG,CACd,GAAAM,GAAsB/gB,KAAAggB,eAAkB,EAAQ,CAChDS,GAAuBzgB,KAAA8gB,QAAAD,EAAkBF,EAAkBI,EAAS,EAAA/gB,KAAA8f,iBAPhEe,EAAsB,GAAA,GAmBvB,MATHP,GAKK,IAAA9Z,IACLia,EAAAzgB,KAAAkgB,kBAAAS,EAAA,EAAA,GACHM,EAAAjhB,KAAAkgB,kBAAAS,EAAAla,EAAA,KANEga,EAAAzgB,KAAAkgB,kBAAAS,EAAA,GAEDM,EAAOjhB,KAAAkgB,kBAAAS,EAAAla,EAAA,EAAA,KAOH0a,MAAAV,EAEAW,IAAKH,MAGCjf,UAAA4e,YAAA,SAAAN,QAgBV,OAbQK,GADN3gB,KAACggB,eACFM,EAAOA,GAAAA,EAAAH,KAAA,EAGL,EAGFG,EAEeA,EAAAH,IAAA,IAAA,EAAAG,EAAAH,IAAAG,EAAAH,IAAA,EAGX,KAMKne,UAAAkf,WAAA,SAAAf,EAAAC,GAEV,OAAKpgB,KAAA+f,UAAkBI,GAAAC,GAACjP,QAGnBnP,UAAAuf,aAAA,SAAAC,SAEHzhB,EAAIC,iBAEH+f,UAAA1T,QAAA,SAAA8T,EAAAsB,GACAhW,EAAA/J,EAAAgR,UAAA3S,EAAAggB,UAAA0B,GAAA,SAAAH,GAEI,MAAKA,KAAUE,IACtB/V,KAAA,SAKa,EAAGA,EAAU,KAGrBzJ,UAAA0f,aAAA,SAAAP,EAAAC,EAAAjQ,QACF4O,UAAE1T,QAAA,SAAA8T,GACFA,EAAA9T,QAAA,SAAAiV,GACJA,EAAAnB,KAAAgB,EAAAhB,KAAAmB,EAAAnB,KAAAiB,EAAAjB,KAACmB,EAAAlB,KAAAe,EAAAf,KAAAkB,EAAAlB,KAAAgB,EAAAhB,MAEKkB,EAAAnQ,KAAAA,QAMPgC,EAACnR,UAAA2f,cAAA,WAAC3hB,KAAA+f,UAAA1T,QAAA,SAAA8T,GAEKA,EAAA9T,QAAA,SAAAyB,GACAA,EAAAqD,KAAc,UAMdgC,EAAAnR,UAAA4M,oBAAP,SAAoBkR,GAQlB,MAPA9f,MAAMggB,eACJF,IAAYG,EAEdjgB,KAAI8f,QAASA,EAIR9f,QAKHgC,UAAc8M,aAAkB,SAAA8S,cAuBnBC,SACVtV,MAAA,KAAAD,MAAAuV,IAAAxV,QAAA,WAEGtM,EAAG+f,QAAUgC,EAAU,IACvBC,IAGJD,EAAe,EACb/hB,EAAKggB,UAAGnb,KAAAod,GACRA,SAEA3M,GAAK0M,EAAMhiB,EAAG+L,KAASoB,YAAA6U,EAAAA,EAAAhiB,EAAA+L,KAAAqB,OAAA,GAAA8U,EAAAjJ,OACvB9D,EAAK4M,EAAI/X,GAAA+X,EAAAA,EAAA/hB,EAAA+L,KAAAqB,OAAA,KACJvI,MACJyQ,IAAAA,EAEHH,KAASA,EACRgN,OAAA7M,EAAAtV,EAAA+L,KAAAoB,WACJiV,MAAAjN,EAAAnL,EAEWoW,IAAA4B,EACb3B,IAAA0B,IAEMA,SA5CH/hB,GAAIC,KAAS+J,EAAW6X,GAAY5hB,KAAA8L,KAAA/B,UAAAkY,EAAAlP,SAAAqP,cAAA,8BAAA9L,0BAC9B,EAAAyL,EAAY,EAAKC,IA8CzB,qCA5CK3V,QAAA,SAAAyB,EAAArC,EAAA4W,MAGDC,GAASxU,EAAMgL,YACPwJ,EAAM9b,WACVvF,SAAAwK,EAAmB,IACrBqW,EAAG/hB,EAAA+f,SACJyC,EAAAxiB,EAAA+f,QAAAgC,GAEF,EAAA/hB,EAAAiS,MAAA/Q,OAAAlB,EAAAggB,UAAA9e,QAEHqL,MAAAC,MAAuB,KAAAD,MAAY,EAAAvM,EAAAiS,MAAA/Q,OAAAlB,EAAAggB,UAAA9e,SAAAoL,QAAA,WACrBkW,EAAYxiB,EAAA+f,cAgCtB9f,QAIHgC,UAAAgN,mBAAA,SAAA8E,EAAAC,GAED,GAEEuM,GAFEvgB,EAAOC,KACTwiB,EAAc,QAEd1O,IACA/T,EAAI4hB,qBAGJ3P,MAAK3F,QAAU,SAACyB,GAChB,GACE2U,KAEAzJ,EAAE0J,EAHAJ,EAASxU,EAAOgL,SA2CpB,qBAvCI,uBACD,IAADwJ,EAAC9b,SAICic,EADEnC,GAAgB,IAAfA,EAAenP,KAAA/L,KAAAoB,SAAA,IAAA8Z,EAAAnP,KAAA/L,KAAAqB,QACV1G,EAASsgB,SAAStgB,EAAAmgB,kBAAeI,EAAAH,IAAAG,EAAAF,IAAA,GAAA,EAAA,GAAAe,MAIhCphB,EAAUsgB,SAAAC,EAAA,EAAA,GAAAa,MAIrBrN,IACDE,EAAAyO,EAAAN,MAAAM,EAAAvN,KAAS8D,EAASyJ,EAAQP,OAASO,EAAApN,KAElCiL,EAASmC,EAET1iB,EAAK2hB,aAAae,EAAEA,EAAA3U,QAGnB,IAAAwU,EAAA9b,UAEDkc,EAAQ3iB,EAAGsgB,SAAUC,EAAAgC,EAAA7b,QAAA6b,EAAA9b,SAErBic,EAAKC,EAAavB,MAElBrN,IACDE,EAAA0O,EAAAtB,IAAAe,MAAAO,EAAAvB,MAAAjM,KAIG8D,EAAW0J,EAAKtB,IAAOc,OAAAQ,EAAAvB,MAAA9L,OAEjBqN,EAAAtB,MACNM,aAAcgB,EAAIvB,MAAAuB,EAAAtB,IAAAtT,MACjB,GAGJiG,IAAAjG,MAEGA,GAAC4L,oBACCxE,KAACuN,EAAevN,KACrBG,IAAAoN,EAAApN,OAMJvB,GAAChG,EAAAiL,QAAA/E,EAAAgF,OAGIlL,GAAAmL,YAAewJ,EAAYvN,KAACuN,EAAApN,QAG9BrV,QAIMgC,UAAeiN,oBAAc,cACnC0T,GAAeC,CACjB,OAAG5iB,MAAAgS,MAAa/Q,UAKFS,EAAAmhB,MAAK7iB,KAAMgS,MAAK,SAAOlE,MACjCwU,GAAMxU,EAAgB,gBACtBwU,GAAOjN,IAASiN,EAAOtJ,SACtB,eAEH7H,KAAK8D,MAAK+D,OAAW2J,EAAGtN,IAAiBsN,EAAG3J,OAAkB,KAC/DhZ,KAAAmL,SAEDyX,EAAYlhB,EAAAmhB,MAAA7iB,KAAAgS,MAAA,SAAAlE,GACb,GAAAwU,GAAAxU,EAAA,SAAC,OAAAwU,GAAApN,KAAAoN,EAAAtO,QAEK,UACChU,KAAAmR,KAAS8D,MAAOjB,MAAO4O,EAAO1N,KAAK0N,EAAA5O,MAAA,MAEtChU,MAjBOA,MAoBXmT,EAACnR,UAAAsS,cAAA,SAAAwO,GAEK,GAAAzO,GAAArU,KAAAgS,MAAA+Q,OAAA,SAAoBjV,GACzB,MAAWgV,KAAMhV,EAAA6I,kBAEbtC,GAAcpT,OAAQoT,EAAU,GAAA,QAI9BrS,UAAY0T,qBAAyB,SAAQiE,EAAS5F,GAC1D,MAAK/T,MAAIgS,MACZ+Q,OAAA,SAAAjV,GAAC,GAAAwU,GAAAxU,EAAAgL,SAEK,OAAAhL,KAAAiG,GACGuO,EAACpN,MAAeyE,EAAOzE,MAAMyE,EAAAzE,MAAAoN,EAAApN,KAAAoN,EAAAtO,OACtCsO,EAAAjN,KAAAsE,EAAAtE,KAAAsE,EAAAtE,KAAAiN,EAAAjN,IAAAiN,EAAAtJ,SAAC,IAAA,QAIMhX,UAAmB6T,aAAe,SAAQ/H,GAEhD,MAAKpM,GAAAgR,UAAa1S,KAAAgS,MAAAlE,IAIpBqF,EAACnR,UAAAgU,UAAA,SAAAS,EAAAuM,GAAC,GAAAC,GAAAvhB,EAAAgR,UAAA1S,KAAAgS,MAAAyE,GAEKyM,EAAAxhB,EAAAgR,UAAU1S,KAAjBgS,MAAkBgR,SAChBhjB,MAAIgS,MAAAjH,OAAYkY,EAAA,GAEhBjjB,KAAKgS,MAAMjH,OAAOmY,EAAQ,EAAAzM,GACrBzW,QAGFgC,UAAA0U,WAAA,SAAAA,GACH,GAAGyM,EAQH,OANAnjB,MAAAgS,MAAO3F,QAAY,SAAAyB,EAAArC,EAAAuG,GACpB,GAAAlE,IAAA4I,EAEM,MAFLyM,GAAAnR,EAAAjH,OAAAU,EAAA,GAAA,IAEK,IAGF0X,KAIMnhB,UAAK4R,kBAAA,SAAA9H,GACd,GAACL,GAAA/J,EAAAgR,UAAA1S,KAAAgS,MAAA,SAAAlE,GAED,MAAOA,GAAM,eAAAhC,GACb,OAAAL,MAAA,IACJzL,KAAAgS,MAAAvG,GAACoO,WAAA/N,IAAA,IAKIqH,wBAEmBA,UAIjB1T,OAAA,6BACN0J,QAAA,eAAA,wDCphBW,OAAAia,WAMZC,IAAA,SAAA1iB,EAAAlB,EAA8BD,GAC9B,2CCHCC,OAAA,qCACGkL,IAAA,oCAKI,yEAMkB,GAAG2Y,qBAAS,KAAAC,IAAA,SAAA5iB,EAAAlB,EAAAD,mBAIvBgkB,GAAA,mBAECA,GAAArZ,EACA1C,EAAAD,GAGJxH,KAAIyjB,cAAOtZ,EAEXnK,KAAI0jB,UAAOjc,OACPkc,kBAAqBnc,WAT7BpE,SA0BC,eAAA,WAAA,sBAfYpB,UAAiBgK,YAAU,SAAcR,EAAA2C,EAAaJ,EAAK6V,MAIhEte,KAHItF,KACP+L,EAAAP,EAAAO,SAAAvI,EAAAgI,EAAAhI,YAAAgJ,EAAAhB,EAAAgB,QAGGA,EAAM,CACT,GAAAqX,GAAA1V,EAAAnO,KAAAyjB,cAAAtV,GAAA3C,GAAAxL,KAAAyjB,cAAA1X,GAAAP,EAEG,OAAc,IAAdoY,EACK7V,EAAA/N,KAAiB0jB,UAACG,GAAoB9V,GAAM/N,KAAI0jB,UAAAG,GACjDA,EAER,MAAC9X,GAEMgC,EAAO/N,KAAA0jB,UAAA3X,GAAAgC,GAAA/N,KAAA0jB,UAAA3X,IAGXvI,GAECxD,KAAA2jB,kBAAiBngB,GAAiB,GAASwE,KAAK,SAAKC,GAOpD3C,EAAUyI,EAAGxK,EAAemgB,UAAIzb,GAAc8F,GAAAxK,EAAmBmgB,UAAAzb,KAGlE3C,MAEUtD,UAAY8Y,kBAAO,SAAAnT,EAAA8S,GACjC,GAACM,GAAApT,EAAAqM,MAAArM,EAAAqM,QAAArM,EAAAqT,YAAAC,EAAAtT,EAAAqR,OAAArR,EAAAqR,SAAArR,EAAAuT,aAAAC,GAAAV,EAAA,GAAAA,EAAA,GAAAW,aAAAX,EAAAW,eAAAX,EAAAzG,MAAAqH,GAAAZ,EAAA,GAAAA,EAAA,GAAAa,cAAAb,EAAAW,eAAAX,EAAAzB,OAAAuC,EAAA,EAAAC,IAAML,GAACJ,EAAAM,EAAAJ,GACJM,KAAYJ,EAAWE,EAAgBJ,EAAiBF,GAAmB,GAC3ES,EAAU,eAAgB,GAAKD,EAAS,KACxCC,EAAkB,OAAI,GAAKP,EAAc,KACzCO,EAAiB,MAAI,GAAKL,EAAAF,EAAsBI,EAAA,KAChDG,EAAU,cAAc,KAI/BD,KAAAF,EAAAF,EAAAJ,EAAAE,GAAA,GACLO,EAAA,cAAC,GAAAD,EAAA,KAAAC,EAAA,OAAA,GAAAH,EAAAN,EAAAI,EAAA,KAGKK,EAAY,MAAA,GAAmBT,EAAwB,KAClDS,EAAA,eAAA,IAEHnL,EAAAoK,GAAMpD,IAAAmE,oBAKmBsI,mBAElB,IACPnE,KAAC,SAAAtN,EAAAD,EAAA2R,GACJ,GAAAxZ,GAAAuZ,EAAAC,EAAAC,aACJ5R,GAAAwE,KAAA,OAAA,SAAA5N,GAEMuB,EAAA8H,GACKoL,OAAezU,QC5F/Bib,GAAA7gB,SAAA,UACAkD,QACA7G,OAAA,gBACA0J,QAAA,kBAAAqa,GACA5D,UAAA,eAAAqE,QAEAC,IAAA,SAAAvjB,EAAAlB,EAAAD,IACA,SAAAC,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA,6BAEAA,EAAA0kB,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,+BACA,4lEAIA,SAAA5kB,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA,6BAEAA,EAAA0kB,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,kCACA,ulDAIA,SAAA5kB,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA,6BAEAA,EAAA0kB,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,2CACA,wHAIA,SAAA5kB,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA,6BAEAA,EAAA0kB,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,uCACA,oUAIA,SAAA5kB,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA,6BAEAA,EAAA0kB,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,sDACA,yqBAIA,SAAA5kB,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA,6BAEAA,EAAA0kB,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,2BACA,+lBAIA,SAAA5kB,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA,6BAEAA,EAAA0kB,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,2BACA,sgDAIA,SAAA5kB,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA,6BAEAA,EAAA0kB,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,wCACA,gkBAKA,SAAA5kB,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA,6BAEAA,EAAA0kB,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,4BACA,ihCAIA,SAAA5kB,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA,6BAEAA,EAAA0kB,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,0BACA,2xBAIA,SAAA5kB,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA,6BAEAA,EAAA0kB,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,uCACA,uTAKA,SAAA5kB,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA,6BAEAA,EAAA0kB,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,0BACA,8dAIA,SAAA5kB,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA,6BAEAA,EAAA0kB,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,2CACA,qLAIA,SAAA5kB,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA,6BAEAA,EAAA0kB,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,kCACA,m7BAIA,SAAA5kB,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA,6BAEAA,EAAA0kB,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,6CACA,06CAIA,SAAA5kB,GACA,IACAA,EAAA6G,QAAA7G,OAAA,0BACA,MAAAU,GACAV,EAAA6G,QAAA7G,OAAA","file":"pip-webui-dashboard.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export class AddTileDialog {\r\n    title: string;\r\n    icon: string;\r\n    name: string;\r\n    amount: number;\r\n}\r\n\r\nexport class AddTileDialogController implements ng.IController {\r\n    public defaultTiles: [AddTileDialog[]];\r\n    public groups: any;\r\n    public totalTiles: number = 0;\r\n\r\n    constructor(\r\n        groups: any,\r\n        public activeGroupIndex: number,\r\n        widgetList: [AddTileDialog[]],\r\n        public $mdDialog: angular.material.IDialogService\r\n    ) {\r\n        this.activeGroupIndex = _.isNumber(activeGroupIndex) ? activeGroupIndex : -1;\r\n        this.defaultTiles = _.cloneDeep(widgetList);\r\n        this.groups = _.map(groups, function (group) {\r\n            return group['title'];\r\n        });\r\n    }\r\n\r\n    public add() {\r\n        this.$mdDialog.hide({\r\n            groupIndex: this.activeGroupIndex,\r\n            widgets: this.defaultTiles\r\n        });\r\n    };\r\n\r\n    public cancel() {\r\n        this.$mdDialog.cancel();\r\n    };\r\n\r\n    public encrease(groupIndex: number, widgetIndex: number) {\r\n        const widget = this.defaultTiles[groupIndex][widgetIndex];\r\n        widget.amount++;\r\n        this.totalTiles++;\r\n    };\r\n\r\n    public decrease(groupIndex: number, widgetIndex: number) {\r\n        const widget = this.defaultTiles[groupIndex][widgetIndex];\r\n        widget.amount = widget.amount ? widget.amount - 1 : 0;\r\n        this.totalTiles = this.totalTiles ? this.totalTiles - 1 : 0;\r\n    };\r\n}","import {\r\n  AddTileDialog,\r\n  AddTileDialogController\r\n} from './AddTileDialogController';\r\n\r\nexport interface IAddTileDialogService {\r\n  show(groups, activeGroupIndex): angular.IPromise < any > ;\r\n}\r\n\r\nexport interface IAddTileDialogprovider {\r\n  configWidgetList(list: [AddTileDialog[]]): void;\r\n}\r\n\r\n{\r\n  const setTranslations = function($injector: ng.auto.IInjectorService) {\r\n    const pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\r\n    if (pipTranslate) {\r\n      (<any>pipTranslate).setTranslations('en', {\r\n        DASHBOARD_ADD_TILE_DIALOG_TITLE: 'Add component',\r\n        DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS: 'Use \"Enter\" or \"+\" buttons on keyboard to encrease and \"Delete\" or \"-\" to decrease tiles amount',\r\n        DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP: 'Create new group'\r\n      });\r\n      (<any>pipTranslate).setTranslations('ru', {\r\n        DASHBOARD_ADD_TILE_DIALOG_TITLE: 'Добавить компонент',\r\n        DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS: 'Используйте \"Enter\" или \"+\" клавиши на клавиатуре чтобы увеличить и \"Delete\" or \"-\" чтобы уменшить количество тайлов',\r\n        DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP: 'Создать новую группу'\r\n      });\r\n    }\r\n  }\r\n\r\n  class AddTileDialogService implements IAddTileDialogService {\r\n    public constructor(\r\n      private widgetList: [AddTileDialog[]],\r\n      private $mdDialog: angular.material.IDialogService\r\n    ) {}\r\n\r\n    public show(groups, activeGroupIndex) {\r\n      return this.$mdDialog\r\n        .show({\r\n          templateUrl: 'add_tile_dialog/AddTile.html',\r\n          bindToController: true,\r\n          controller: AddTileDialogController,\r\n          controllerAs: 'dialogCtrl',\r\n          clickOutsideToClose: true,\r\n          resolve: {\r\n            groups: () => {\r\n              return groups;\r\n            },\r\n            activeGroupIndex: () => {\r\n              return activeGroupIndex;\r\n            },\r\n            widgetList: () => {\r\n              return (<any>this.widgetList);\r\n            }\r\n          }\r\n        });\r\n    };\r\n  }\r\n\r\n  class AddTileDialogProvider implements IAddTileDialogprovider {\r\n    private _service: AddTileDialogService;\r\n    private _widgetList: [AddTileDialog[]] = null;\r\n\r\n    constructor() {}\r\n\r\n    public configWidgetList = function (list: [AddTileDialog[]]) {\r\n      this._widgetList = list;\r\n    };\r\n\r\n    public $get($mdDialog: angular.material.IDialogService) {\r\n      \"ngInject\";\r\n\r\n      if (this._service == null)\r\n        this._service = new AddTileDialogService(this._widgetList, $mdDialog);\r\n\r\n      return this._service;\r\n    }\r\n  }\r\n\r\n  angular\r\n    .module('pipAddDashboardTileDialog')\r\n    .config(setTranslations)\r\n    .provider('pipAddTileDialog', AddTileDialogProvider);\r\n}","angular\r\n    .module('pipAddDashboardTileDialog', ['ngMaterial']);\r\n\r\nimport './AddTileDialogController';\r\nimport './AddTileProvider';","import {\r\n  MenuTileService\r\n} from '../menu_tile/MenuTileService';\r\nimport {\r\n  ITileConfigService\r\n} from '../config_tile_dialog/ConfigDialogService';\r\n\r\n{\r\n  class CalendarTileController extends MenuTileService {\r\n    constructor(\r\n      private pipTileConfigDialogService: ITileConfigService\r\n    ) {\r\n      super();\r\n\r\n      if (this.options) {\r\n        this.menu = this.options.menu ? _.union(this.menu, this.options.menu) : this.menu;\r\n        this.menu.push({\r\n          title: 'Configurate',\r\n          click: () => {\r\n            this.onConfigClick();\r\n          }\r\n        });\r\n        this.options.date = this.options.date || new Date();\r\n        this.color = this.options.color || 'blue';\r\n      }\r\n    }\r\n\r\n    private onConfigClick() {\r\n      this.pipTileConfigDialogService.show({\r\n        dialogClass: 'pip-calendar-config',\r\n        locals: {\r\n          color: this.color,\r\n          size: this.options.size,\r\n          date: this.options.date,\r\n        },\r\n        extensionUrl: 'calendar_tile/ConfigDialogExtension.html'\r\n      }, (result: any) => {\r\n        this.changeSize(result.size);\r\n\r\n        this.color = result.color;\r\n        this.options.color = result.color;\r\n        this.options.date = result.date;\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  const CalendarTile: ng.IComponentOptions = {\r\n    bindings: {\r\n      options: '=pipOptions',\r\n    },\r\n    controller: CalendarTileController,\r\n    templateUrl: 'calendar_tile/CalendarTile.html'\r\n  }\r\n\r\n  angular\r\n    .module('pipDashboard')\r\n    .component('pipCalendarTile', CalendarTile);\r\n\r\n}","export interface IDashboardTile {\r\n    options: any;\r\n    color: string;\r\n    size: Object | string | number;\r\n}\r\n\r\nexport class DashboardTile implements IDashboardTile {\r\n    public options: any;\r\n    public color: string;\r\n    public size: Object | string | number;\r\n\r\n    constructor() { }\r\n}","\r\nclass TileColors {\r\n    static all: string[] = ['purple', 'green', 'gray', 'orange', 'blue'];\r\n}\r\n\r\nclass TileSizes {\r\n    static all: any = [{\r\n            name: 'DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL',\r\n            id: '11'\r\n        },\r\n        {\r\n            name: 'DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE',\r\n            id: '21'\r\n        },\r\n        {\r\n            name: 'DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE',\r\n            id: '22'\r\n        }\r\n    ];\r\n}\r\n\r\nexport class TileConfigDialogController {\r\n    public colors: string[] = TileColors.all;\r\n    public sizes: any = TileSizes.all;\r\n    public sizeId: string = TileSizes.all[0].id;\r\n    public onCancel: Function;\r\n\r\n    constructor(\r\n        public params,\r\n        public extensionUrl,\r\n        public $mdDialog: angular.material.IDialogService\r\n    ) {\r\n        \"ngInject\";\r\n\r\n        angular.extend(this, this.params);\r\n        this.sizeId = '' + this.params.size.colSpan + this.params.size.rowSpan;\r\n\r\n        this.onCancel = () => {\r\n            this.$mdDialog.cancel();\r\n        }\r\n    }\r\n\r\n    public onApply(updatedData) {\r\n        this['size'].sizeX = Number(this.sizeId.substr(0, 1));\r\n        this['size'].sizeY = Number(this.sizeId.substr(1, 1));\r\n        this.$mdDialog.hide(updatedData);\r\n    }\r\n}","{    \r\n    interface ITileConfigExtendComponentBindings {\r\n        [key: string]: any;\r\n\r\n        pipExtensionUrl: any;\r\n        pipDialogScope: any;\r\n        pipApply: any;\r\n    }\r\n\r\n    const TileConfigExtendComponentBindings: ITileConfigExtendComponentBindings = {\r\n        pipExtensionUrl: '<',\r\n        pipDialogScope: '<',\r\n        pipApply: '&'\r\n    }\r\n\r\n    class TileConfigExtendComponentChanges implements ng.IOnChangesObject, ITileConfigExtendComponentBindings {\r\n        [key: string]: ng.IChangesObject<any>;\r\n\r\n        pipExtensionUrl: ng.IChangesObject<string>;\r\n        pipDialogScope: ng.IChangesObject<ng.IScope>;\r\n\r\n        pipApply: ng.IChangesObject<({updatedData: any}) => ng.IPromise<void>>;\r\n    }\r\n\r\n    interface ITileConfigExtendComponentAttributes extends ng.IAttributes {\r\n        pipExtensionUrl: string\r\n    }\r\n\r\n    class TileConfigExtendComponentController implements ITileConfigExtendComponentBindings {\r\n        public pipExtensionUrl: string;\r\n        public pipDialogScope: ng.IScope;\r\n        public pipApply: (param: {updatedData: any}) => ng.IPromise<void>;\r\n\r\n        constructor(\r\n            private $templateRequest: angular.ITemplateRequestService,\r\n            private $compile: angular.ICompileService,\r\n            private $scope: angular.IScope, \r\n            private $element: JQuery, \r\n            private $attrs: ITileConfigExtendComponentAttributes\r\n        ) { }\r\n\r\n        public $onChanges(changes: TileConfigExtendComponentChanges) {\r\n            if (changes.pipDialogScope) {\r\n                delete changes.pipDialogScope.currentValue['$scope'];\r\n                angular.extend(this, changes.pipDialogScope.currentValue);\r\n            }\r\n            if (changes.pipExtensionUrl && changes.pipExtensionUrl.currentValue) {\r\n                this.$templateRequest(changes.pipExtensionUrl.currentValue, false).then((html) => {\r\n                    this.$element.find('pip-extension-point').replaceWith(this.$compile(html)(this.$scope));\r\n                });\r\n            }\r\n        }\r\n\r\n        public onApply() {\r\n            this.pipApply({updatedData: this});\r\n        }\r\n    }\r\n\r\n    const pipTileConfigComponent: ng.IComponentOptions = {\r\n        templateUrl: 'config_tile_dialog/ConfigDialogExtendComponent.html',\r\n        controller: TileConfigExtendComponentController,\r\n        bindings: TileConfigExtendComponentBindings\r\n    }\r\n\r\n    angular\r\n        .module('pipConfigDashboardTileDialog')\r\n        .component('pipTileConfigExtendComponent', pipTileConfigComponent);\r\n}","import { TileConfigDialogController } from './ConfigDialogController';\r\n\r\nexport interface ITileConfigService {\r\n    show(params: ITileConfigDialogOptions, successCallback ? : (key) => void, cancelCallback ? : () => void): any;\r\n}\r\n\r\nexport interface ITileConfigDialogOptions extends angular.material.IDialogOptions {\r\n    dialogClass?: string;\r\n    extensionUrl?: string;\r\n    event?: any;\r\n}\r\n\r\n{\r\n    const setTranslations = function($injector: ng.auto.IInjectorService) {\r\n        const pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\r\n        if (pipTranslate) {\r\n            ( < any > pipTranslate).setTranslations('en', {\r\n                DASHBOARD_TILE_CONFIG_DIALOG_TITLE: 'Edit tile',\r\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL: 'Small',\r\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE: 'Wide',\r\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE: 'Large'\r\n            });\r\n            ( < any > pipTranslate).setTranslations('ru', {\r\n                DASHBOARD_TILE_CONFIG_DIALOG_TITLE: 'Изменить виджет',\r\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_SMALL: 'Мален.',\r\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_WIDE: 'Широкий',\r\n                DASHBOARD_TILE_CONFIG_DIALOG_SIZE_LARGE: 'Большой'\r\n            });\r\n        }\r\n    }\r\n\r\n    class TileConfigDialogService {\r\n        public constructor(\r\n            public $mdDialog: angular.material.IDialogService\r\n        ) {}\r\n\r\n        public show(params: ITileConfigDialogOptions, successCallback ? : (key) => void, cancelCallback ? : () => void) {\r\n            this.$mdDialog.show({\r\n                    targetEvent: params.event,\r\n                    templateUrl: params.templateUrl || 'dialogs/tile_config/ConfigDialog.html',\r\n                    controller: TileConfigDialogController,\r\n                    bindToController: true,\r\n                    controllerAs: 'vm',\r\n                    locals: {\r\n                        extensionUrl: params.extensionUrl,\r\n                        params: params.locals\r\n                    },\r\n                    clickOutsideToClose: true\r\n                })\r\n                .then((key) => {\r\n                    if (successCallback) {\r\n                        successCallback(key);\r\n                    }\r\n                }, () => {\r\n                    if (cancelCallback) {\r\n                        cancelCallback();\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module('pipConfigDashboardTileDialog')\r\n        .config(setTranslations)\r\n        .service('pipTileConfigDialogService', TileConfigDialogService);\r\n}","\r\nangular\r\n    .module('pipConfigDashboardTileDialog', ['ngMaterial']);\r\n\r\nimport './ConfigDialogController';\r\nimport './ConfigDialogService';\r\nimport './ConfigDialogExtendComponent';","import {\r\n  ITileTemplateService\r\n} from '../utility/TileTemplateUtility';\r\nimport {\r\n  IAddTileDialogService,\r\n  IAddTileDialogprovider\r\n} from '../add_tile_dialog/AddTileProvider'\r\n\r\n{\r\n  const setTranslations = function ($injector: ng.auto.IInjectorService) {\r\n    const pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\r\n    if (pipTranslate) {\r\n      ( < any > pipTranslate).setTranslations('en', {\r\n        DROP_TO_CREATE_NEW_GROUP: 'Drop here to create new group',\r\n      });\r\n      ( < any > pipTranslate).setTranslations('ru', {\r\n        DROP_TO_CREATE_NEW_GROUP: 'Перетащите сюда для создания новой группы'\r\n      });\r\n    }\r\n  }\r\n\r\n  const configureAvailableWidgets = function (pipAddTileDialogProvider: IAddTileDialogprovider) {\r\n    pipAddTileDialogProvider.configWidgetList([\r\n      [{\r\n          title: 'Event',\r\n          icon: 'document',\r\n          name: 'event',\r\n          amount: 0\r\n        },\r\n        {\r\n          title: 'Position',\r\n          icon: 'location',\r\n          name: 'position',\r\n          amount: 0\r\n        }\r\n      ],\r\n      [{\r\n          title: 'Calendar',\r\n          icon: 'date',\r\n          name: 'calendar',\r\n          amount: 0\r\n        },\r\n        {\r\n          title: 'Sticky Notes',\r\n          icon: 'note-take',\r\n          name: 'notes',\r\n          amount: 0\r\n        },\r\n        {\r\n          title: 'Statistics',\r\n          icon: 'tr-statistics',\r\n          name: 'statistics',\r\n          amount: 0\r\n        }\r\n      ]\r\n    ]);\r\n  }\r\n\r\n  class draggableOptions {\r\n    tileWidth: number;\r\n    tileHeight: number;\r\n    gutter: number;\r\n    inline: boolean;\r\n  }\r\n\r\n  const DEFAULT_GRID_OPTIONS: draggableOptions = {\r\n    tileWidth: 150, // 'px'\r\n    tileHeight: 150, // 'px'\r\n    gutter: 10, // 'px'\r\n    inline: false\r\n  };\r\n\r\n  interface DashboardBindings {\r\n      gridOptions: any;\r\n      groupAdditionalActions: any;\r\n      groupedWidgets: any;\r\n  }\r\n\r\n  class DashboardController implements ng.IController, DashboardBindings {\r\n    private defaultGroupMenuActions: any = [{\r\n        title: 'Add Component',\r\n        callback: (groupIndex) => {\r\n          this.addComponent(groupIndex);\r\n        }\r\n      },\r\n      {\r\n        title: 'Remove',\r\n        callback: (groupIndex) => {\r\n          this.removeGroup(groupIndex);\r\n        }\r\n      },\r\n      {\r\n        title: 'Configurate',\r\n        callback: (groupIndex) => {\r\n          console.log('configurate group with index:', groupIndex);\r\n        }\r\n      }\r\n    ];\r\n    private _includeTpl: string = '<pip-{{ type }}-widget group=\"groupIndex\" index=\"index\"' +\r\n      'pip-options=\"$parent.$ctrl.groupedWidgets[groupIndex][\\'source\\'][index].opts\">' +\r\n      '</pip-{{ type }}-widget>';\r\n\r\n    public groupedWidgets: any;\r\n    public draggableGridOptions: draggableOptions;\r\n    public widgetsTemplates: any;\r\n    public groupMenuActions: any = this.defaultGroupMenuActions;\r\n    public widgetsContext: any;\r\n    public gridOptions: any;\r\n    public groupAdditionalActions: any;\r\n\r\n    constructor(\r\n      $scope: angular.IScope,\r\n      private $rootScope: angular.IRootScopeService,\r\n      private $attrs: any,\r\n      private $element: any,\r\n      private $timeout: angular.ITimeoutService,\r\n      private $interpolate: angular.IInterpolateService,\r\n      private pipAddTileDialog: IAddTileDialogService,\r\n      private pipTileTemplate: ITileTemplateService\r\n    ) {\r\n      // Add class to style scroll bar\r\n      $element.addClass('pip-scroll');\r\n\r\n      // Set tiles grid options\r\n      this.draggableGridOptions = this.gridOptions || DEFAULT_GRID_OPTIONS;\r\n\r\n      // Switch inline displaying\r\n      if (this.draggableGridOptions.inline === true) {\r\n        $element.addClass('inline-grid');\r\n      }\r\n      // Extend group's menu actions\r\n      if (this.groupAdditionalActions) angular.extend(this.groupMenuActions, this.groupAdditionalActions);\r\n\r\n      // Compile widgets\r\n      this.widgetsContext = $scope;\r\n      this.compileWidgets();\r\n\r\n      this.$timeout(() => {\r\n        this.$element.addClass('visible');\r\n      }, 700);\r\n    }\r\n\r\n    private compileWidgets() {\r\n      _.each(this.groupedWidgets, (group, groupIndex) => {\r\n        group.removedWidgets = group.removedWidgets || [],\r\n          group.source = group.source.map((widget, index) => {\r\n            // Establish default props\r\n            widget.size = widget.size || {\r\n              colSpan: 1,\r\n              rowSpan: 1\r\n            };\r\n            widget.index = index;\r\n            widget.groupIndex = groupIndex;\r\n            widget.menu = widget.menu || {};\r\n            angular.extend(widget.menu, [{\r\n              title: 'Remove',\r\n              click: (item, params, object) => {\r\n                this.removeWidget(item, params, object);\r\n              }\r\n            }]);\r\n\r\n            return {\r\n              opts: widget,\r\n              template: this.pipTileTemplate.getTemplate(widget, this._includeTpl)\r\n            };\r\n          })\r\n      });\r\n    }\r\n\r\n    public addComponent(groupIndex) {\r\n      this.pipAddTileDialog\r\n        .show(this.groupedWidgets, groupIndex)\r\n        .then((data) => {\r\n          var activeGroup;\r\n\r\n          if (!data) {\r\n            return;\r\n          }\r\n\r\n          if (data.groupIndex !== -1) {\r\n            activeGroup = this.groupedWidgets[data.groupIndex];\r\n          } else {\r\n            activeGroup = {\r\n              title: 'New group',\r\n              source: []\r\n            };\r\n          }\r\n\r\n          this.addWidgets(activeGroup.source, data.widgets);\r\n\r\n          if (data.groupIndex === -1) {\r\n            this.groupedWidgets.push(activeGroup);\r\n          }\r\n\r\n          this.compileWidgets();\r\n        });\r\n    };\r\n\r\n    public removeGroup = (groupIndex) => {\r\n      console.log('removeGroup', groupIndex);\r\n      this.groupedWidgets.splice(groupIndex, 1);\r\n    }\r\n\r\n    private addWidgets(group, widgets) {\r\n      widgets.forEach((widgetGroup) => {\r\n        widgetGroup.forEach((widget) => {\r\n          if (widget.amount) {\r\n            Array.apply(null, Array(widget.amount)).forEach(() => {\r\n              group.push({\r\n                type: widget.name\r\n              });\r\n            });\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    private removeWidget(item, params, object) {\r\n      this.groupedWidgets[params.options.groupIndex].removedWidgets = [];\r\n      this.groupedWidgets[params.options.groupIndex].removedWidgets.push(params.options.index);\r\n      this.groupedWidgets[params.options.groupIndex].source.splice(params.options.index, 1);\r\n      this.$timeout(() => {\r\n        this.groupedWidgets[params.options.groupIndex].removedWidgets = [];\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  const Dashboard: ng.IComponentOptions = {\r\n    bindings: {\r\n      gridOptions: '=pipGridOptions',\r\n      groupAdditionalActions: '=pipGroupActions',\r\n      groupedWidgets: '=pipGroups'\r\n    },\r\n    controller: DashboardController,\r\n    templateUrl: 'dashboard/Dashboard.html'\r\n  }\r\n\r\n  angular\r\n    .module('pipDashboard')\r\n    .config(configureAvailableWidgets)\r\n    .config(setTranslations)\r\n    .component('pipDashboard', Dashboard);\r\n\r\n}","declare var interact;\r\n\r\nimport {\r\n  DragTileService,\r\n  IDragTileService,\r\n  IDragTileConstructor\r\n} from './DraggableTileService';\r\nimport {\r\n  TilesGridService,\r\n  ITilesGridService,\r\n  ITilesGridConstructor\r\n} from '../tile_group/TileGroupService';\r\n\r\nexport const DEFAULT_TILE_WIDTH: number = 150;\r\nexport const DEFAULT_TILE_HEIGHT: number = 150;\r\nexport const UPDATE_GROUPS_EVENT = \"pipUpdateDashboardGroupsConfig\";\r\n\r\nconst SIMPLE_LAYOUT_COLUMNS_COUNT: number = 2;\r\nconst DEFAULT_OPTIONS = {\r\n  tileWidth: DEFAULT_TILE_WIDTH, // 'px'\r\n  tileHeight: DEFAULT_TILE_HEIGHT, // 'px'\r\n  gutter: 20, // 'px'\r\n  container: 'pip-draggable-grid:first-of-type',\r\n  //mobileBreakpoint       : XXX,   // Get from pipMedia Service in the constructor\r\n  activeDropzoneClass: 'dropzone-active',\r\n  groupContaninerSelector: '.pip-draggable-group:not(.fict-group)',\r\n};\r\n\r\n{\r\n  interface IDraggableBindings {\r\n      tilesTemplates: any;\r\n      tilesContext: any;\r\n      options: any;\r\n      groupMenuActions: any;\r\n      $container: JQuery;\r\n  }\r\n\r\n  interface IDraggableControllerScope extends ng.IScope {\r\n    $container: JQuery;\r\n    tilesTemplates: any;\r\n    options: any;\r\n  }\r\n\r\n  interface ITileScope extends ng.IScope {\r\n    index: number | string;\r\n    groupIndex: number | string;\r\n  }\r\n\r\n  class DraggableController implements ng.IComponentController, IDraggableBindings {\r\n    public opts: any;\r\n    public groups: any;\r\n    public sourceDropZoneElem: any = null;\r\n    public isSameDropzone: boolean = true;\r\n    public tileGroups: any = null;\r\n    public availableWidth: number;\r\n    public availableColumns: number;\r\n    public groupsContainers: any;\r\n    public container: any;\r\n    public activeDraggedGroup: any;\r\n    public draggedTile: any;\r\n    public containerOffset: any;\r\n    public tilesTemplates: any;\r\n    public tilesContext: any;\r\n    public options: any;\r\n    public groupMenuActions: any;\r\n    public $container: JQuery;\r\n\r\n    constructor(\r\n      private $scope: IDraggableControllerScope,\r\n      private $rootScope: angular.IRootScopeService,\r\n      private $compile: angular.ICompileService,\r\n      private $timeout: angular.ITimeoutService,\r\n      private $element: JQuery,\r\n      pipDragTile: IDragTileService,\r\n      pipTilesGrid: ITilesGridService,\r\n      pipMedia: pip.layouts.IMediaService\r\n    ) {\r\n      this.opts = _.merge({\r\n        mobileBreakpoint: pipMedia.breakpoints.xs\r\n      }, DEFAULT_OPTIONS, this.options);\r\n\r\n      this.groups = this.tilesTemplates.map((group, groupIndex) => {\r\n        return {\r\n          title: group.title,\r\n          editingName: false,\r\n          index: groupIndex,\r\n          source: group.source.map((tile) => {\r\n            const tileScope = this.createTileScope(tile);\r\n\r\n            return IDragTileConstructor(DragTileService, {\r\n              tpl: $compile(tile.template)(tileScope),\r\n              options: tile.opts,\r\n              size: tile.opts.size\r\n            });\r\n          })\r\n        };\r\n      });\r\n\r\n      // Add templates watcher\r\n      $scope.$watch('$ctrl.tilesTemplates', (newVal) => {\r\n        this.watch(newVal);\r\n      }, true);\r\n\r\n      // Initialize data\r\n      this.initialize();\r\n\r\n      // Resize handler TODO: replace by pip resize watchers\r\n      $(window).on('resize', _.debounce(() => {\r\n        this.availableWidth = this.getContainerWidth();\r\n        this.availableColumns = this.getAvailableColumns(this.availableWidth);\r\n\r\n        this.tileGroups.forEach((group) => {\r\n          group\r\n            .setAvailableColumns(this.availableColumns)\r\n            .generateGrid(this.getSingleTileWidthForMobile(this.availableWidth))\r\n            .setTilesDimensions()\r\n            .calcContainerHeight();\r\n        });\r\n      }, 50));\r\n    }\r\n\r\n    // Post link function\r\n    public $postLink() {\r\n      this.$container = this.$element;\r\n    }\r\n\r\n    // Watch handler\r\n    private watch(newVal) {\r\n      const prevVal = this.groups;\r\n      let changedGroupIndex = null;\r\n\r\n      if (newVal.length > prevVal.length) {\r\n        this.addGroup(newVal[newVal.length - 1]);\r\n\r\n        return;\r\n      }\r\n\r\n      if (newVal.length < prevVal.length) {\r\n        this.removeGroups(newVal);\r\n\r\n        return;\r\n      }\r\n\r\n      for (let i = 0; i < newVal.length; i++) {\r\n        const groupWidgetDiff = prevVal[i].source.length - newVal[i].source.length;\r\n        if (groupWidgetDiff || (newVal[i].removedWidgets && newVal[i].removedWidgets.length > 0)) {\r\n          changedGroupIndex = i;\r\n\r\n          if (groupWidgetDiff < 0) {\r\n            const newTiles = newVal[changedGroupIndex].source.slice(groupWidgetDiff);\r\n\r\n            _.each(newTiles, (tile) => {\r\n              console.log('tile', tile);\r\n            });\r\n\r\n            this.addTilesIntoGroup(newTiles, this.tileGroups[changedGroupIndex], this.groupsContainers[changedGroupIndex]);\r\n\r\n            this.$timeout(() => {\r\n              this.updateTilesGroups();\r\n            });\r\n          } else {\r\n            this.removeTiles(this.tileGroups[changedGroupIndex], newVal[changedGroupIndex].removedWidgets, this.groupsContainers[changedGroupIndex]);\r\n            this.updateTilesOptions(newVal);\r\n            this.$timeout(() => {\r\n              this.updateTilesGroups();\r\n            });\r\n          }\r\n\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (newVal && this.tileGroups) {\r\n        this.updateTilesOptions(newVal);\r\n        this.$timeout(() => {\r\n          this.updateTilesGroups();\r\n        });\r\n      }\r\n    }\r\n\r\n    // Inline edit group handlers\r\n    public onTitleClick(group, event) {\r\n      if (!group.editingName) {\r\n        group.oldTitle = _.clone(group.title);\r\n        group.editingName = true;\r\n        this.$timeout(() => {\r\n          $(event.currentTarget.children[0]).focus();\r\n        });\r\n      }\r\n    }\r\n\r\n    public cancelEditing(group) {\r\n      group.title = group.oldTitle;\r\n    }\r\n\r\n    public onBlurTitleInput(group) {\r\n      this.$timeout(() => {\r\n        group.editingName = false;\r\n        this.$rootScope.$broadcast(UPDATE_GROUPS_EVENT, this.groups);\r\n        // Update title in outer scope\r\n        this.tilesTemplates[group.index].title = group.title;\r\n      }, 100);\r\n    }\r\n\r\n    public onKyepressTitleInput(group, event) {\r\n      if (event.keyCode === 13) {\r\n        this.onBlurTitleInput(group);\r\n      }\r\n    }\r\n\r\n    // Update outer scope functions\r\n    private updateTilesTemplates(updateType: string, source ? : any) {\r\n      switch (updateType) {\r\n        case 'addGroup':\r\n          if (this.groups.length !== this.tilesTemplates.length) {\r\n            this.tilesTemplates.push(source);\r\n          }\r\n          break;\r\n        case 'moveTile':\r\n          const {\r\n            fromIndex,\r\n            toIndex,\r\n            tileOptions,\r\n            fromTileIndex\r\n          } = {\r\n            fromIndex: source.from.elem.attributes['data-group-id'].value,\r\n            toIndex: source.to.elem.attributes['data-group-id'].value,\r\n            tileOptions: source.tile.opts.options,\r\n            fromTileIndex: source.tile.opts.options.index\r\n          }\r\n          this.tilesTemplates[fromIndex].source.splice(fromTileIndex, 1);\r\n          this.tilesTemplates[toIndex].source.push({\r\n            opts: tileOptions\r\n          });\r\n\r\n          this.reIndexTiles(source.from.elem);\r\n          this.reIndexTiles(source.to.elem);\r\n          break;\r\n      }\r\n    }\r\n\r\n    // Manage tiles functions\r\n    private createTileScope(tile: any): ITileScope {\r\n      const tileScope = < ITileScope > this.$rootScope.$new(false, this.tilesContext);\r\n      tileScope.index = tile.opts.index == undefined ? tile.opts.options.index : tile.opts.index;\r\n      tileScope.groupIndex = tile.opts.groupIndex == undefined ? tile.opts.options.groupIndex : tile.opts.groupIndex;\r\n\r\n      return tileScope;\r\n    }\r\n\r\n    private removeTiles(group, indexes, container) {\r\n      const tiles = $(container).find('.pip-draggable-tile');\r\n\r\n      _.each(indexes, (index) => {\r\n        group.tiles.splice(index, 1);\r\n        tiles[index].remove();\r\n      });\r\n\r\n      this.reIndexTiles(container);\r\n    }\r\n\r\n    private reIndexTiles(container, gIndex ? ) {\r\n      const tiles = $(container).find('.pip-draggable-tile'),\r\n        groupIndex = gIndex === undefined ? container.attributes['data-group-id'].value : gIndex;\r\n\r\n      _.each(tiles, (tile, index) => {\r\n        const child = $(tile).children()[0];\r\n        angular.element(child).scope()['index'] = index;\r\n        angular.element(child).scope()['groupIndex'] = groupIndex;\r\n      });\r\n    }\r\n\r\n    private removeGroups(newGroups) {\r\n      const removeIndexes = [],\r\n        remain = [],\r\n        containers = [];\r\n\r\n\r\n      _.each(this.groups, (group, index) => {\r\n        if (_.findIndex(newGroups, (g) => {\r\n            return g['title'] === group.title\r\n          }) < 0) {\r\n          removeIndexes.push(index);\r\n        } else {\r\n          remain.push(index);\r\n        }\r\n      });\r\n\r\n      _.each(removeIndexes.reverse(), (index) => {\r\n        this.groups.splice(index, 1);\r\n        this.tileGroups.splice(index, 1);\r\n      });\r\n\r\n      _.each(remain, (index) => {\r\n        containers.push(this.groupsContainers[index]);\r\n      });\r\n\r\n      this.groupsContainers = containers;\r\n\r\n      _.each(this.groupsContainers, (container, index) => {\r\n        this.reIndexTiles(container, index);\r\n      });\r\n    }\r\n\r\n    private addGroup(sourceGroup) {\r\n      const group = {\r\n        title: sourceGroup.title,\r\n        source: sourceGroup.source.map((tile) => {\r\n          const tileScope = this.createTileScope(tile);\r\n\r\n          return IDragTileConstructor(DragTileService, {\r\n            tpl: this.$compile(tile.template)(tileScope),\r\n            options: tile.opts,\r\n            size: tile.opts.size\r\n          });\r\n        })\r\n      };\r\n\r\n      this.groups.push(group);\r\n      if (!this.$scope.$$phase) this.$scope.$apply();\r\n\r\n      this.$timeout(() => {\r\n        this.groupsContainers = document.querySelectorAll(this.opts.groupContaninerSelector);\r\n        this.tileGroups.push(\r\n          ITilesGridConstructor(TilesGridService, group.source, this.opts, this.availableColumns, this.groupsContainers[this.groupsContainers.length - 1])\r\n          .generateGrid(this.getSingleTileWidthForMobile(this.availableWidth))\r\n          .setTilesDimensions()\r\n          .calcContainerHeight()\r\n        );\r\n      });\r\n\r\n      this.updateTilesTemplates('addGroup', sourceGroup);\r\n    }\r\n\r\n    private addTilesIntoGroup(newTiles, group, groupContainer) {\r\n      newTiles.forEach((tile) => {\r\n        const tileScope = this.createTileScope(tile);\r\n\r\n        const newTile = IDragTileConstructor(DragTileService, {\r\n          tpl: this.$compile(tile.template)(tileScope),\r\n          options: tile.opts,\r\n          size: tile.opts.size\r\n        });\r\n\r\n        group.addTile(newTile);\r\n\r\n        $('<div>')\r\n          .addClass('pip-draggable-tile')\r\n          .append(newTile.getCompiledTemplate())\r\n          .appendTo(groupContainer);\r\n      });\r\n    }\r\n\r\n    private updateTilesOptions(optionsGroup) {\r\n      optionsGroup.forEach((optionGroup) => {\r\n        optionGroup.source.forEach((tileOptions) => {\r\n          this.tileGroups.forEach((group) => {\r\n            group.updateTileOptions(tileOptions.opts);\r\n          });\r\n        });\r\n      });\r\n    }\r\n\r\n    private initTilesGroups(tileGroups, opts, groupsContainers) {\r\n      return tileGroups.map((group, index) => {\r\n        return ITilesGridConstructor(TilesGridService, group.source, opts, this.availableColumns, groupsContainers[index])\r\n          .generateGrid(this.getSingleTileWidthForMobile(this.availableWidth))\r\n          .setTilesDimensions()\r\n          .calcContainerHeight();\r\n      });\r\n    }\r\n\r\n    private updateTilesGroups(onlyPosition ? , draggedTile ? ) {\r\n      this.tileGroups.forEach((group) => {\r\n        if (!onlyPosition) {\r\n          group.generateGrid(this.getSingleTileWidthForMobile(this.availableWidth));\r\n        }\r\n\r\n        group\r\n          .setTilesDimensions(onlyPosition, draggedTile)\r\n          .calcContainerHeight();\r\n      });\r\n    }\r\n\r\n    private getContainerWidth(): any {\r\n      const container = this.$container || $('body');\r\n      return container.width();\r\n    }\r\n\r\n    private getAvailableColumns(availableWidth): any {\r\n      return this.opts.mobileBreakpoint > availableWidth ? SIMPLE_LAYOUT_COLUMNS_COUNT :\r\n        Math.floor(availableWidth / (this.opts.tileWidth + this.opts.gutter));\r\n    }\r\n\r\n    private getActiveGroupAndTile(elem): any {\r\n      const active = {};\r\n\r\n      this.tileGroups.forEach((group) => {\r\n        const foundTile = group.getTileByNode(elem);\r\n\r\n        if (foundTile) {\r\n          active['group'] = group;\r\n          active['tile'] = foundTile;\r\n          return;\r\n        }\r\n      });\r\n\r\n      return active;\r\n    }\r\n\r\n    private getSingleTileWidthForMobile(availableWidth): any {\r\n      return this.opts.mobileBreakpoint > availableWidth ? availableWidth / 2 - this.opts.gutter : null;\r\n    }\r\n\r\n    private onDragStartListener(event) {\r\n      const activeEntities = this.getActiveGroupAndTile(event.target);\r\n\r\n      this.container = $(event.target).parent('.pip-draggable-group').get(0);\r\n      this.draggedTile = activeEntities['tile'];\r\n      this.activeDraggedGroup = activeEntities['group'];\r\n\r\n      this.$element.addClass('drag-transfer');\r\n\r\n      this.draggedTile.startDrag();\r\n    }\r\n\r\n    private onDragMoveListener(event) {\r\n      const target = event.target;\r\n      const x = (parseFloat(target.style.left) || 0) + event.dx;\r\n      const y = (parseFloat(target.style.top) || 0) + event.dy;\r\n\r\n      this.containerOffset = this.getContainerOffset();\r\n\r\n      target.style.left = x + 'px'; // TODO [apidhirnyi] Extract units into options section\r\n      target.style.top = y + 'px';\r\n\r\n      const belowElement = this.activeDraggedGroup.getTileByCoordinates({\r\n        left: event.pageX - this.containerOffset.left,\r\n        top: event.pageY - this.containerOffset.top\r\n      }, this.draggedTile);\r\n\r\n      if (belowElement) {\r\n        const draggedTileIndex = this.activeDraggedGroup.getTileIndex(this.draggedTile);\r\n        const belowElemIndex = this.activeDraggedGroup.getTileIndex(belowElement);\r\n\r\n        if ((draggedTileIndex + 1) === belowElemIndex) {\r\n          return;\r\n        }\r\n\r\n        this.activeDraggedGroup\r\n          .swapTiles(this.draggedTile, belowElement)\r\n          .setTilesDimensions(true, this.draggedTile);\r\n\r\n        this.$timeout(() => {\r\n          this.setGroupContainersHeight();\r\n        }, 0);\r\n      }\r\n    }\r\n\r\n    private onDragEndListener() {\r\n      this.draggedTile.stopDrag(this.isSameDropzone);\r\n\r\n      this.$element.removeClass('drag-transfer');\r\n      this.activeDraggedGroup = null;\r\n      this.draggedTile = null;\r\n    }\r\n\r\n    private getContainerOffset() {\r\n      const containerRect = this.container.getBoundingClientRect();\r\n\r\n      return {\r\n        left: containerRect.left,\r\n        top: containerRect.top\r\n      };\r\n    }\r\n\r\n    private setGroupContainersHeight() {\r\n      this.tileGroups.forEach((tileGroup) => {\r\n        tileGroup.calcContainerHeight();\r\n      });\r\n    }\r\n\r\n    private moveTile(from, to, tile) {\r\n      let elem;\r\n      const movedTile = from.removeTile(tile);\r\n      const tileScope = this.createTileScope(tile);\r\n\r\n      $(this.groupsContainers[_.findIndex(this.tileGroups, from)])\r\n        .find(movedTile.getElem())\r\n        .remove();\r\n\r\n      if (to !== null) {\r\n        to.addTile(movedTile);\r\n\r\n        elem = this.$compile(movedTile.getElem())(tileScope);\r\n\r\n        $(this.groupsContainers[_.findIndex(this.tileGroups, to)])\r\n          .append(elem);\r\n\r\n        this.$timeout(to.setTilesDimensions.bind(to, true));\r\n      }\r\n\r\n      this.updateTilesTemplates('moveTile', {\r\n        from: from,\r\n        to: to,\r\n        tile: movedTile\r\n      });\r\n    }\r\n\r\n    private onDropListener(event) {\r\n      const droppedGroupIndex = event.target.attributes['data-group-id'].value;\r\n      const droppedGroup = this.tileGroups[droppedGroupIndex];\r\n\r\n      if (this.activeDraggedGroup !== droppedGroup) {\r\n        this.moveTile(this.activeDraggedGroup, droppedGroup, this.draggedTile);\r\n      }\r\n\r\n      this.updateTilesGroups(true);\r\n      this.sourceDropZoneElem = null;\r\n    }\r\n\r\n    private onDropToFictGroupListener(event) {\r\n      const from = this.activeDraggedGroup;\r\n      const tile = this.draggedTile;\r\n\r\n      this.addGroup({\r\n        title: 'New group',\r\n        source: []\r\n      });\r\n      this.$timeout(() => {\r\n        this.moveTile(from, this.tileGroups[this.tileGroups.length - 1], tile);\r\n        this.updateTilesGroups(true);\r\n      });\r\n\r\n      this.sourceDropZoneElem = null;\r\n    }\r\n\r\n    private onDropEnterListener(event) {\r\n      if (!this.sourceDropZoneElem) {\r\n        this.sourceDropZoneElem = event.dragEvent.dragEnter;\r\n      }\r\n\r\n      if (this.sourceDropZoneElem !== event.dragEvent.dragEnter) {\r\n        event.dragEvent.dragEnter.classList.add('dropzone-active');\r\n        $('body').css('cursor', 'copy');\r\n        this.isSameDropzone = false;\r\n      } else {\r\n        $('body').css('cursor', '');\r\n        this.isSameDropzone = true;\r\n      }\r\n    }\r\n\r\n    private onDropDeactivateListener(event) {\r\n      if (this.sourceDropZoneElem !== event.target) {\r\n        event.target.classList.remove(this.opts.activeDropzoneClass);\r\n        $('body').css('cursor', '');\r\n      }\r\n    }\r\n\r\n    private onDropLeaveListener(event) {\r\n      event.target.classList.remove(this.opts.activeDropzoneClass);\r\n    }\r\n\r\n    private initialize() {\r\n      this.$timeout(() => {\r\n        this.availableWidth = this.getContainerWidth();\r\n        this.availableColumns = this.getAvailableColumns(this.availableWidth);\r\n        this.groupsContainers = document.querySelectorAll(this.opts.groupContaninerSelector);\r\n        this.tileGroups = this.initTilesGroups(this.groups, this.opts, this.groupsContainers);\r\n\r\n        interact('.pip-draggable-tile')\r\n          .draggable({\r\n            autoScroll: {\r\n              enabled: true,\r\n              container: $('#content').get(0),\r\n              speed: 500\r\n            },\r\n            onstart: (event) => {\r\n              this.onDragStartListener(event)\r\n            },\r\n            onmove: (event) => {\r\n              this.onDragMoveListener(event)\r\n            },\r\n            onend: (event) => {\r\n              this.onDragEndListener()\r\n            }\r\n          });\r\n\r\n        interact('.pip-draggable-group.fict-group')\r\n          .dropzone({\r\n            ondrop: (event) => {\r\n              this.onDropToFictGroupListener(event)\r\n            },\r\n            ondragenter: (event) => {\r\n              this.onDropEnterListener(event)\r\n            },\r\n            ondropdeactivate: (event) => {\r\n              this.onDropDeactivateListener(event)\r\n            },\r\n            ondragleave: (event) => {\r\n              this.onDropLeaveListener(event)\r\n            }\r\n          });\r\n\r\n        interact('.pip-draggable-group')\r\n          .dropzone({\r\n            ondrop: (event) => {\r\n              this.onDropListener(event)\r\n            },\r\n            ondragenter: (event) => {\r\n              this.onDropEnterListener(event)\r\n            },\r\n            ondropdeactivate: (event) => {\r\n              this.onDropDeactivateListener(event)\r\n            },\r\n            ondragleave: (event) => {\r\n              this.onDropLeaveListener(event)\r\n            }\r\n          });\r\n\r\n        this.$container\r\n          .on('mousedown touchstart', 'md-menu .md-icon-button', () => {\r\n            interact('.pip-draggable-tile').draggable(false);\r\n            $(this).trigger('click');\r\n          })\r\n          .on('mouseup touchend', () => {\r\n            interact('.pip-draggable-tile').draggable(true);\r\n          });\r\n          \r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  const DragComponent: ng.IComponentOptions = {\r\n    bindings: {\r\n      tilesTemplates: '=pipTilesTemplates',\r\n      tilesContext: '=pipTilesContext',\r\n      options: '=pipDraggableGrid',\r\n      groupMenuActions: '=pipGroupMenuActions'\r\n    },\r\n    //controllerAs: 'DraggedCtrl',\r\n    templateUrl: 'draggable/Draggable.html',\r\n    controller: DraggableController\r\n  }\r\n\r\n  angular.module('pipDraggableTiles')\r\n    .component('pipDraggableGrid', DragComponent);\r\n}","export interface DragTileConstructor {\r\n  new (options: any);\r\n}\r\n\r\nexport function IDragTileConstructor(constructor: DragTileConstructor, options: any): IDragTileService {\r\n  return new constructor(options);\r\n}\r\n\r\nexport interface IDragTileService {\r\n  tpl: any;\r\n  opts: any;\r\n  size: any;\r\n  elem: any;\r\n  preview: any;\r\n  getSize(): any;\r\n  setSize(width, height): any;\r\n  setPosition(left, top): any;\r\n  getCompiledTemplate(): any;\r\n  updateElem(parent): any;\r\n  getElem(): any;\r\n  startDrag(): any;\r\n  stopDrag(isAnimate): any;\r\n  setPreviewPosition(coords): void;\r\n  getOptions(): any;\r\n  setOptions(options): any;\r\n}\r\n\r\nlet DEFAULT_TILE_SIZE = {\r\n  colSpan: 1,\r\n  rowSpan: 1\r\n};\r\n\r\nexport class DragTileService implements IDragTileService {\r\n  public tpl: any;\r\n  public opts: any;\r\n  public size: any;\r\n  public elem: any;\r\n  public preview: any;\r\n\r\n  constructor (options: any) {\r\n    this.tpl = options.tpl.get(0);\r\n    this.opts = options;\r\n    this.size = _.merge({}, DEFAULT_TILE_SIZE, options.size);\r\n    this.elem = null;\r\n  }\r\n\r\n  public getSize(): any {\r\n    return this.size;\r\n  }\r\n\r\n  public setSize(width, height): any {\r\n    this.size.width = width;\r\n    this.size.height = height;\r\n\r\n    if (this.elem) {\r\n      this.elem.css({\r\n        width: width,\r\n        height: height\r\n      });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public setPosition(left, top): any {\r\n    this.size.left = left;\r\n    this.size.top = top;\r\n\r\n    if (this.elem) {\r\n      this.elem.css({\r\n        left: left,\r\n        top: top\r\n      });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getCompiledTemplate(): any {\r\n    return this.tpl;\r\n  };\r\n\r\n  public updateElem(parent): any {\r\n    this.elem = $(this.tpl).parent(parent);\r\n\r\n    return this;\r\n  };\r\n\r\n  public getElem(): any {\r\n    return this.elem.get(0);\r\n  };\r\n\r\n  public startDrag(): any {\r\n    this.preview = $('<div>')\r\n      .addClass('pip-dragged-preview')\r\n      .css({\r\n        position: 'absolute',\r\n        left: this.elem.css('left'),\r\n        top: this.elem.css('top'),\r\n        width: this.elem.css('width'),\r\n        height: this.elem.css('height')\r\n      });\r\n\r\n    this.elem\r\n      .addClass('no-animation')\r\n      .css({\r\n        zIndex: '9999'\r\n      })\r\n      .after(this.preview);\r\n\r\n    return this;\r\n  };\r\n\r\n  public stopDrag(isAnimate): any {\r\n    let self = this;\r\n\r\n    if (isAnimate) {\r\n      this.elem\r\n        .removeClass('no-animation')\r\n        .css({\r\n          left: this.preview.css('left'),\r\n          top: this.preview.css('top')\r\n        })\r\n        .on('transitionend', onTransitionEnd);\r\n    } else {\r\n      self.elem\r\n        .css({\r\n          left: self.preview.css('left'),\r\n          top: self.preview.css('top'),\r\n          zIndex: ''\r\n        })\r\n        .removeClass('no-animation');\r\n\r\n      self.preview.remove();\r\n      self.preview = null;\r\n    }\r\n\r\n    return this;\r\n\r\n    function onTransitionEnd() {\r\n      if (self.preview) {\r\n        self.preview.remove();\r\n        self.preview = null;\r\n      }\r\n\r\n      self.elem\r\n        .css('zIndex', '')\r\n        .off('transitionend', onTransitionEnd);\r\n    }\r\n  };\r\n\r\n  public setPreviewPosition(coords) {\r\n    this.preview.css(coords);\r\n  };\r\n\r\n  public getOptions(): any {\r\n    return this.opts.options;\r\n  };\r\n\r\n  public setOptions(options): any {\r\n    _.merge(this.opts.options, options);\r\n    _.merge(this.size, options.size);\r\n\r\n    return this;\r\n  };\r\n}\r\n\r\nangular\r\n  .module('pipDraggableTiles')\r\n  .service('pipDragTile', function () {\r\n    return function (options) {\r\n      let newTile = new DragTileService(options);\r\n\r\n      return newTile;\r\n    }\r\n  });","angular.module('pipDraggableTiles', []);\r\n\r\nimport './DraggableTileService';\r\nimport './Draggable';","import {\r\n  MenuTileService\r\n} from '../menu_tile/MenuTileService';\r\nimport {\r\n  ITileConfigService\r\n} from '../config_tile_dialog/ConfigDialogService';\r\n{\r\n  class EventTileController extends MenuTileService {\r\n    private _oldOpacity: number;\r\n\r\n    public opacity: number = 0.57;\r\n\r\n    constructor(\r\n      $scope: ng.IScope,\r\n      private $element: JQuery,\r\n      private $timeout: angular.ITimeoutService,\r\n      private pipTileConfigDialogService: ITileConfigService\r\n    ) {\r\n      super();\r\n\r\n      if (this.options) {\r\n        if (this.options.menu) this.menu = _.union(this.menu, this.options.menu);\r\n      }\r\n\r\n      this.menu.push({\r\n        title: 'Configurate',\r\n        click: () => {\r\n          this.onConfigClick();\r\n        }\r\n      });\r\n      this.color = this.options.color || 'gray';\r\n      this.opacity = this.options.opacity || this.opacity;\r\n\r\n      this.drawImage();\r\n\r\n      // TODO it doesn't work\r\n      $scope.$watch(() => {\r\n        return $element.is(':visible');\r\n      }, (newVal) => {\r\n        this.drawImage();\r\n      });\r\n    }\r\n\r\n    private drawImage() {\r\n      if (this.options.image) {\r\n        this.$timeout(() => {\r\n          this.onImageLoad(this.$element.find('img'));\r\n        }, 500);\r\n      }\r\n    }\r\n\r\n    private onConfigClick() {\r\n      this._oldOpacity = _.clone(this.opacity);\r\n      this.pipTileConfigDialogService.show({\r\n        dialogClass: 'pip-calendar-config',\r\n        locals: {\r\n          color: this.color,\r\n          size: this.options.size || {\r\n            colSpan: 1,\r\n            rowSpan: 1\r\n          },\r\n          date: this.options.date,\r\n          title: this.options.title,\r\n          text: this.options.text,\r\n          opacity: this.opacity,\r\n          onOpacitytest: (opacity) => {\r\n            this.opacity = opacity;\r\n          }\r\n        },\r\n        extensionUrl: 'event_tile/ConfigDialogExtension.html'\r\n      }, (result: any) => {\r\n        this.changeSize(result.size);\r\n\r\n        this.color = result.color;\r\n        this.options.color = result.color;\r\n        this.options.date = result.date;\r\n        this.options.title = result.title;\r\n        this.options.text = result.text;\r\n        this.options.opacity = result.opacity;\r\n      }, () => {\r\n        this.opacity = this._oldOpacity;\r\n      });\r\n    }\r\n\r\n    private onImageLoad(image) {\r\n      this.setImageMarginCSS(this.$element.parent(), image);\r\n    }\r\n\r\n    public changeSize(params) {\r\n      this.options.size.colSpan = params.sizeX;\r\n      this.options.size.rowSpan = params.sizeY;\r\n\r\n      if (this.options.image) {\r\n        this.$timeout(() => {\r\n          this.setImageMarginCSS(this.$element.parent(), this.$element.find('img'));\r\n        }, 500);\r\n      }\r\n    }\r\n\r\n    // Later replace by pipImageUtils sevice's function\r\n    private setImageMarginCSS($element, image) {\r\n      let\r\n        containerWidth = $element.width ? $element.width() : $element.clientWidth, // || 80,\r\n        containerHeight = $element.height ? $element.height() : $element.clientHeight, // || 80,\r\n        imageWidth = image[0].naturalWidth || image.width,\r\n        imageHeight = image[0].naturalHeight || image.height,\r\n        margin = 0,\r\n        cssParams = {};\r\n\r\n      if ((imageWidth / containerWidth) > (imageHeight / containerHeight)) {\r\n        margin = -((imageWidth / imageHeight * containerHeight - containerWidth) / 2);\r\n        cssParams['margin-left'] = '' + margin + 'px';\r\n        cssParams['height'] = '' + containerHeight + 'px'; //'100%';\r\n        cssParams['width'] = '' + imageWidth * containerHeight / imageHeight + 'px'; //'100%';\r\n        cssParams['margin-top'] = '';\r\n      } else {\r\n        margin = -((imageHeight / imageWidth * containerWidth - containerHeight) / 2);\r\n        cssParams['margin-top'] = '' + margin + 'px';\r\n        cssParams['height'] = '' + imageHeight * containerWidth / imageWidth + 'px'; //'100%';\r\n        cssParams['width'] = '' + containerWidth + 'px'; //'100%';\r\n        cssParams['margin-left'] = '';\r\n      }\r\n\r\n      image.css(cssParams);\r\n    }\r\n  }\r\n\r\n\r\n  const EventTile: ng.IComponentOptions = {\r\n    bindings: {\r\n      options: '=pipOptions'\r\n    },\r\n    controller: EventTileController,\r\n    templateUrl: 'event_tile/EventTile.html'\r\n  }\r\n\r\n  angular\r\n    .module('pipDashboard')\r\n    .component('pipEventTile', EventTile);\r\n}","// Import services\r\nimport './tile_group/index';\r\nimport './draggable';\r\n\r\n// Import tile services\r\nimport './menu_tile';\r\n\r\n// Import dialogs\r\nimport './add_tile_dialog';\r\nimport './config_tile_dialog';\r\n\r\nangular.module('pipDashboard', [\r\n  // Services\r\n  'pipDraggableTiles',\r\n  'pipDraggableTilesGroup',\r\n  // Tile services\r\n  'pipMenuTile',\r\n  // Dialogs\r\n  'pipConfigDashboardTileDialog',\r\n  'pipAddDashboardTileDialog',\r\n  //Templates\r\n  'pipDashboard.Templates',\r\n  // External pip modules\r\n  'pipLayout',\r\n  'pipLocations',\r\n  'pipDateTime',\r\n  'pipCharts',\r\n  'pipTranslate',\r\n  'pipControls',\r\n  'pipButtons'\r\n]);\r\n\r\n// Import utility \r\nimport './utility/TileTemplateUtility';\r\n// Import tiles\r\nimport './common_tile/Tile';\r\nimport './calendar_tile/CalendarTile';\r\nimport './event_tile/EventTile';\r\nimport './note_tile/NoteTile';\r\nimport './picture_slider_tile/PictureSliderTile';\r\nimport './position_tile/PositionTile';\r\nimport './statistics_tile/StatisticsTile';\r\n// Import common component\r\nimport './dashboard/Dashboard';\r\n","{\r\n  const MenuTile = ():ng.IDirective => {\r\n    return {\r\n      restrict: 'EA',\r\n      templateUrl: 'menu_tile/MenuTile.html'\r\n    };\r\n  }\r\n\r\n  angular\r\n    .module('pipMenuTile')\r\n    .directive('pipMenuTile', MenuTile);\r\n}","import { DashboardTile } from '../common_tile/Tile';\r\n\r\nexport class MenuTileService extends DashboardTile {\r\n  public menu: any = [{\r\n    title: 'Change Size',\r\n    action: angular.noop,\r\n    submenu: [{\r\n        title: '1 x 1',\r\n        action: 'changeSize',\r\n        params: {\r\n          sizeX: 1,\r\n          sizeY: 1\r\n        }\r\n      },\r\n      {\r\n        title: '2 x 1',\r\n        action: 'changeSize',\r\n        params: {\r\n          sizeX: 2,\r\n          sizeY: 1\r\n        }\r\n      },\r\n      {\r\n        title: '2 x 2',\r\n        action: 'changeSize',\r\n        params: {\r\n          sizeX: 2,\r\n          sizeY: 2\r\n        }\r\n      }\r\n    ]\r\n  }];\r\n\r\n  constructor() {\r\n    \"ngInject\";\r\n\r\n    super();\r\n  }\r\n\r\n  public callAction(actionName, params, item) {\r\n    if (this[actionName]) {\r\n      this[actionName].call(this, params);\r\n    }\r\n\r\n    if (item['click']) {\r\n      item['click'].call(item, params, this);\r\n    }\r\n  };\r\n\r\n  public changeSize(params) {\r\n    this.options.size.colSpan = params.sizeX;\r\n    this.options.size.rowSpan = params.sizeY;\r\n  };\r\n}\r\n\r\n{\r\n  class MenuTileProvider {\r\n    private _service: MenuTileService;\r\n\r\n    constructor() {}\r\n\r\n    public $get() {\r\n      \"ngInject\";\r\n\r\n      if (this._service == null)\r\n        this._service = new MenuTileService();\r\n\r\n      return this._service;\r\n    }\r\n  }\r\n\r\n  angular\r\n    .module('pipMenuTile')\r\n    .provider('pipMenuTile', MenuTileProvider);\r\n}","angular\r\n    .module('pipMenuTile', []);\r\n\r\nimport './MenuTileDirective';\r\nimport './MenuTileService';\r\n\r\nexport * from './MenuTileService';","import {\r\n  MenuTileService\r\n} from '../menu_tile/MenuTileService';\r\nimport {\r\n  ITileConfigService\r\n} from '../config_tile_dialog/ConfigDialogService';\r\n\r\n{\r\n  class NoteTileController extends MenuTileService {\r\n\r\n    constructor(\r\n      private pipTileConfigDialogService: ITileConfigService\r\n    ) {\r\n      super();\r\n\r\n      if (this.options) {\r\n        this.menu = this.options.menu ? _.union(this.menu, this.options.menu) : this.menu;\r\n      }\r\n\r\n      this.menu.push({\r\n        title: 'Configurate',\r\n        click: () => {\r\n          this.onConfigClick();\r\n        }\r\n      });\r\n      this.color = this.options.color || 'orange';\r\n    }\r\n\r\n    private onConfigClick() {\r\n      this.pipTileConfigDialogService.show({\r\n        locals: {\r\n          color: this.color,\r\n          size: this.options.size,\r\n          title: this.options.title,\r\n          text: this.options.text,\r\n        },\r\n        extensionUrl: 'note_tile/ConfigDialogExtension.html'\r\n      }, (result: any) => {\r\n        this.color = result.color;\r\n        this.options.color = result.color;\r\n        this.changeSize(result.size);\r\n        this.options.text = result.text;\r\n        this.options.title = result.title;\r\n      });\r\n    }\r\n  }\r\n\r\n  const NoteTile: ng.IComponentOptions = {\r\n    bindings: {\r\n      options: '=pipOptions'\r\n    },\r\n    controller: NoteTileController,\r\n    templateUrl: 'note_tile/NoteTile.html'\r\n  }\r\n\r\n  angular\r\n    .module('pipDashboard')\r\n    .component('pipNoteTile', NoteTile);\r\n}","'use strict';\r\n\r\nimport {\r\n  MenuTileService\r\n} from '../menu_tile/MenuTileService';\r\nimport {\r\n  ITileConfigService\r\n} from '../config_tile_dialog/ConfigDialogService';\r\nimport {\r\n  ITileTemplateService\r\n} from '../utility/TileTemplateUtility';\r\n\r\n{\r\n  class PictureSliderController extends MenuTileService {\r\n    public animationType: string = 'fading';\r\n    public animationInterval: number = 5000;\r\n\r\n    constructor(\r\n      private $scope: angular.IScope,\r\n      private $element: any,\r\n      private $timeout: angular.ITimeoutService,\r\n      private pipTileTemplate: ITileTemplateService\r\n    ) {\r\n      super();\r\n\r\n      if (this.options) {\r\n        this.animationType = this.options.animationType || this.animationType;\r\n        this.animationInterval = this.options.animationInterval || this.animationInterval;\r\n      }\r\n    }\r\n\r\n    public onImageLoad($event) {\r\n      this.$timeout(() => {\r\n        this.pipTileTemplate.setImageMarginCSS(this.$element.parent(), $event.target);\r\n      });\r\n    }\r\n\r\n    public changeSize(params) {\r\n      this.options.size.colSpan = params.sizeX;\r\n      this.options.size.rowSpan = params.sizeY;\r\n\r\n      this.$timeout(() => {\r\n        _.each(this.$element.find('img'), (image) => {\r\n          this.pipTileTemplate.setImageMarginCSS(this.$element.parent(), image);\r\n        });\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  const PictureSliderTile: ng.IComponentOptions = {\r\n    bindings: {\r\n      options: '=pipOptions'\r\n    },\r\n    controller: PictureSliderController,\r\n    templateUrl: 'picture_slider_tile/PictureSliderTile.html'\r\n  }\r\n\r\n  angular\r\n    .module('pipDashboard')\r\n    .component('pipPictureSliderTile', PictureSliderTile);\r\n}","import {\r\n  MenuTileService\r\n} from '../menu_tile/MenuTileService';\r\nimport {\r\n  ITileConfigService\r\n} from '../config_tile_dialog/ConfigDialogService';\r\n\r\n{\r\n  class PositionTileController extends MenuTileService {\r\n    public showPosition: boolean = true;\r\n\r\n    constructor(\r\n      $scope: angular.IScope,\r\n      private $timeout: angular.ITimeoutService,\r\n      private $element: any,\r\n      private pipTileConfigDialogService: ITileConfigService,\r\n      private pipLocationEditDialog: any,\r\n    ) {\r\n      super();\r\n\r\n      if (this.options) {\r\n        if (this.options.menu) this.menu = _.union(this.menu, this.options.menu);\r\n      }\r\n\r\n      this.menu.push({\r\n        title: 'Configurate',\r\n        click: () => {\r\n          this.onConfigClick();\r\n        }\r\n      });\r\n      this.menu.push({\r\n        title: 'Change location',\r\n        click: () => {\r\n          this.openLocationEditDialog();\r\n        }\r\n      });\r\n\r\n      this.options.location = this.options.location || this.options.position;\r\n\r\n      $scope.$watch('$ctrl.options.location', () => {\r\n        this.reDrawPosition();\r\n      });\r\n\r\n      // TODO it doesn't work\r\n      $scope.$watch(() => {\r\n        return $element.is(':visible');\r\n      }, (newVal) => {\r\n        if (newVal == true) this.reDrawPosition();\r\n      });\r\n    }\r\n\r\n    private onConfigClick() {\r\n      this.pipTileConfigDialogService.show({\r\n        dialogClass: 'pip-position-config',\r\n        locals: {\r\n          size: this.options.size,\r\n          locationName: this.options.locationName,\r\n          hideColors: true,\r\n        },\r\n        extensionUrl: 'position_tile/ConfigDialogExtension.html'\r\n      }, (result: any) => {\r\n        this.changeSize(result.size);\r\n        this.options.locationName = result.locationName;\r\n      });\r\n    }\r\n\r\n    public changeSize(params) {\r\n      this.options.size.colSpan = params.sizeX;\r\n      this.options.size.rowSpan = params.sizeY;\r\n\r\n      this.reDrawPosition();\r\n    }\r\n\r\n    public openLocationEditDialog() {\r\n      this.pipLocationEditDialog.show({\r\n        locationName: this.options.locationName,\r\n        locationPos: this.options.location\r\n      }, (newPosition) => {\r\n        if (newPosition) {\r\n          this.options.location = newPosition.location;\r\n          this.options.locationName = newPosition.locatioName;\r\n        }\r\n      });\r\n    }\r\n\r\n    private reDrawPosition() {\r\n      this.showPosition = false;\r\n      this.$timeout(() => {\r\n        this.showPosition = true;\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n\r\n  const PositionTile: ng.IComponentOptions = {\r\n    bindings: {\r\n      options: '=pipOptions'\r\n    },\r\n    controller: PositionTileController,\r\n    templateUrl: 'position_tile/PositionTile.html'\r\n  }\r\n\r\n  angular\r\n    .module('pipDashboard')\r\n    .component('pipPositionTile', PositionTile);\r\n}","import {\r\n  MenuTileService\r\n} from '../menu_tile/MenuTileService';\r\n\r\n{\r\n  const SMALL_CHART: number = 70;\r\n  const BIG_CHART: number = 250;\r\n\r\n  class StatisticsTileController extends MenuTileService {\r\n    private _$scope: angular.IScope;\r\n    private _$timeout: angular.ITimeoutService;\r\n\r\n    public reset: boolean = false;\r\n    public chartSize: number = SMALL_CHART;\r\n\r\n    constructor(\r\n      pipTileMenu: any,\r\n      $scope: angular.IScope,\r\n      $timeout: angular.ITimeoutService\r\n    ) {\r\n      super();\r\n      this._$scope = $scope;\r\n      this._$timeout = $timeout;\r\n\r\n      if (this.options) {\r\n        this.menu = this.options.menu ? _.union(this.menu, this.options.menu) : this.menu;\r\n      }\r\n\r\n      this.setChartSize();\r\n    }\r\n\r\n    public changeSize(params) {\r\n      this.options.size.colSpan = params.sizeX;\r\n      this.options.size.rowSpan = params.sizeY;\r\n\r\n      this.reset = true;\r\n      this.setChartSize();\r\n      this._$timeout(() => {\r\n        this.reset = false;\r\n      }, 500);\r\n    }\r\n\r\n    private setChartSize() {\r\n      this.chartSize = this.options.size.colSpan == 2 && this.options.size.rowSpan == 2 ? BIG_CHART : SMALL_CHART;\r\n    }\r\n  }\r\n\r\n\r\n  const StatisticsTile: ng.IComponentOptions = {\r\n    bindings: {\r\n      options: '=pipOptions'\r\n    },\r\n    controller: StatisticsTileController,\r\n    templateUrl: 'statistics_tile/StatisticsTile.html'\r\n  }\r\n\r\n  angular\r\n    .module('pipDashboard')\r\n    .component('pipStatisticsTile', StatisticsTile);\r\n}","{\r\n  interface DraggableTileAttributes extends ng.IAttributes {\r\n    pipDraggableTiles: any;\r\n  }\r\n\r\n  function DraggableTileLink(\r\n    $scope: ng.IScope,\r\n    $elem: JQuery,\r\n    $attr: DraggableTileAttributes\r\n  ) {\r\n    const docFrag = document.createDocumentFragment(),\r\n      group = $scope.$eval($attr.pipDraggableTiles);\r\n\r\n    group.forEach(function (tile) {\r\n      const tpl = wrapComponent(tile.getCompiledTemplate());\r\n      docFrag.appendChild(tpl);\r\n    });\r\n\r\n    $elem.append(docFrag);\r\n\r\n    function wrapComponent(elem) {\r\n      return $('<div>')\r\n        .addClass('pip-draggable-tile')\r\n        .append(elem)\r\n        .get(0);\r\n    }\r\n  }\r\n\r\n  function DraggableTile() {\r\n    return {\r\n      restrict: 'A',\r\n      link: DraggableTileLink\r\n    };\r\n  }\r\n\r\nconsole.log('here 3');\r\n\r\n  angular\r\n    .module('pipDraggableTilesGroup')\r\n    .directive('pipDraggableTiles', DraggableTile);\r\n}","export interface TilesGridConstructor {\r\n  new(tiles, options, columns, elem);\r\n}\r\n\r\nexport function ITilesGridConstructor(constructor: TilesGridConstructor, tiles, options, columns, elem): ITilesGridService {\r\n  return new constructor(tiles, options, columns, elem);\r\n}\r\n\r\nexport interface ITilesGridService {\r\n  tiles: any;\r\n  opts: any;\r\n  columns: any;\r\n  elem: any;\r\n  gridCells: any;\r\n  inline: boolean;\r\n  isMobileLayout: boolean;\r\n\r\n  addTile(tile): any;\r\n  getCellByPosition(row, col): any;\r\n  getCells(prevCell, rowSpan, colSpan): any;\r\n  getAvailableCellsDesktop(prevCell, rowSpan, colSpan): any;\r\n  getCell(src, basicRow, basicCol, columns): any;\r\n  getAvailableCellsMobile(prevCell, rowSpan, colSpan): any;\r\n  getBasicRow(prevCell): any;\r\n  isCellFree(row, col): any;\r\n  getCellIndex(srcCell): any;\r\n  reserveCells(start, end, elem): void;\r\n  clearElements(): void;\r\n  setAvailableColumns(columns): any;\r\n  generateGrid(singleTileWidth ? ): any;\r\n  setTilesDimensions(onlyPosition, draggedTile): any;\r\n  calcContainerHeight(): any;\r\n  getTileByNode(node): any;\r\n  getTileByCoordinates(coords, draggedTile): any;\r\n  getTileIndex(tile): any;\r\n  swapTiles(movedTile, beforeTile): any;\r\n  removeTile(removeTile): any;\r\n  updateTileOptions(opts): any;\r\n}\r\n\r\nconst MOBILE_LAYOUT_COLUMNS = 2;\r\n\r\nexport class TilesGridService implements ITilesGridService {\r\n  public tiles: any;\r\n  public opts: any;\r\n  public columns: any;\r\n  public elem: any;\r\n  public gridCells: any = [];\r\n  public inline: boolean = false;\r\n  public isMobileLayout: boolean;\r\n\r\n  constructor(tiles, options, columns, elem) {\r\n    this.tiles = tiles;\r\n    this.opts = options;\r\n    this.columns = columns || 0; // available columns in a row\r\n    this.elem = elem;\r\n    this.gridCells = [];\r\n    this.inline = options.inline || false;\r\n    this.isMobileLayout = columns === MOBILE_LAYOUT_COLUMNS;\r\n  }\r\n\r\n  public addTile(tile): any {\r\n    this.tiles.push(tile);\r\n    if (this.tiles.length === 1) {\r\n      this.generateGrid();\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  public getCellByPosition(row, col): any {\r\n    return this.gridCells[row][col];\r\n  };\r\n\r\n  public getCells(prevCell, rowSpan, colSpan): any {\r\n    if (this.isMobileLayout) {\r\n      return this.getAvailableCellsMobile(prevCell, rowSpan, colSpan);\r\n    } else {\r\n      return this.getAvailableCellsDesktop(prevCell, rowSpan, colSpan);\r\n    }\r\n  };\r\n\r\n  public getAvailableCellsDesktop(prevCell, rowSpan, colSpan): any {\r\n    let leftCornerCell;\r\n    let rightCornerCell;\r\n    const basicCol = prevCell && prevCell.col || 0;\r\n    const basicRow = this.getBasicRow(prevCell);\r\n\r\n    // Small tile\r\n    if (colSpan === 1 && rowSpan === 1) {\r\n      const gridCopy = this.gridCells.slice();\r\n\r\n      if (!prevCell) {\r\n        leftCornerCell = gridCopy[0][0];\r\n      } else {\r\n        leftCornerCell = this.getCell(gridCopy, basicRow, basicCol, this.columns);\r\n\r\n        if (!leftCornerCell) {\r\n          const rowShift = this.isMobileLayout ? 1 : 2;\r\n          leftCornerCell = this.getCell(gridCopy, basicRow + rowShift, 0, this.columns);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Medium tile\r\n    if (colSpan === 2 && rowSpan === 1) {\r\n      const prevTileSize = prevCell && prevCell.elem.size || null;\r\n\r\n      if (!prevTileSize) {\r\n        leftCornerCell = this.getCellByPosition(basicRow, basicCol);\r\n        rightCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\r\n      } else if (prevTileSize.colSpan === 2 && prevTileSize.rowSpan === 2) {\r\n        if (this.columns - basicCol - 2 > 0) {\r\n          leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\r\n          rightCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\r\n        } else {\r\n          leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\r\n          rightCornerCell = this.getCellByPosition(basicRow + 2, 1);\r\n        }\r\n      } else if (prevTileSize.colSpan === 2 && prevTileSize.rowSpan === 1) {\r\n        if (prevCell.row % 2 === 0) {\r\n          leftCornerCell = this.getCellByPosition(basicRow + 1, basicCol - 1);\r\n          rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol);\r\n        } else {\r\n          if (this.columns - basicCol - 3 >= 0) {\r\n            leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\r\n            rightCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\r\n          } else {\r\n            leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\r\n            rightCornerCell = this.getCellByPosition(basicRow + 2, 1);\r\n          }\r\n        }\r\n      } else if (prevTileSize.colSpan === 1 && prevTileSize.rowSpan === 1) {\r\n        if (this.columns - basicCol - 3 >= 0) {\r\n          if (this.isCellFree(basicRow, basicCol + 1)) {\r\n            leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\r\n            rightCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\r\n          } else {\r\n            leftCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\r\n            rightCornerCell = this.getCellByPosition(basicRow, basicCol + 3);\r\n          }\r\n        } else {\r\n          leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\r\n          rightCornerCell = this.getCellByPosition(basicRow + 2, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Big tile\r\n    if (!prevCell && rowSpan === 2 && colSpan === 2) {\r\n      leftCornerCell = this.getCellByPosition(basicRow, basicCol);\r\n      rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol + 1);\r\n    } else if (rowSpan === 2 && colSpan === 2) {\r\n      if (this.columns - basicCol - 2 > 0) {\r\n        if (this.isCellFree(basicRow, basicCol + 1)) {\r\n          leftCornerCell = this.getCellByPosition(basicRow, basicCol + 1);\r\n          rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol + 2);\r\n        } else {\r\n          leftCornerCell = this.getCellByPosition(basicRow, basicCol + 2);\r\n          rightCornerCell = this.getCellByPosition(basicRow + 1, basicCol + 3);\r\n        }\r\n      } else {\r\n        leftCornerCell = this.getCellByPosition(basicRow + 2, 0);\r\n        rightCornerCell = this.getCellByPosition(basicRow + 3, 1);\r\n      }\r\n    }\r\n\r\n    return {\r\n      start: leftCornerCell,\r\n      end: rightCornerCell\r\n    };\r\n  };\r\n\r\n  public getCell(src, basicRow, basicCol, columns): any {\r\n    let cell, col, row;\r\n\r\n    if (this.isMobileLayout) {\r\n      // mobile layout\r\n      for (col = basicCol; col < columns; col++) {\r\n        if (!src[basicRow][col].elem) {\r\n          cell = src[basicRow][col];\r\n          break;\r\n        }\r\n      }\r\n\r\n      return cell;\r\n    }\r\n\r\n    // desktop\r\n    for (col = basicCol; col < columns; col++) {\r\n      for (row = 0; row < 2; row++) {\r\n        if (!src[row + basicRow][col].elem) {\r\n          cell = src[row + basicRow][col];\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (cell) {\r\n        return cell;\r\n      }\r\n    }\r\n  };\r\n\r\n  public getAvailableCellsMobile(prevCell, rowSpan, colSpan): any {\r\n    let leftCornerCell;\r\n    let rightCornerCell;\r\n    const basicRow = this.getBasicRow(prevCell);\r\n    const basicCol = prevCell && prevCell.col || 0;\r\n\r\n\r\n    if (colSpan === 1 && rowSpan === 1) {\r\n      const gridCopy = this.gridCells.slice();\r\n\r\n      if (!prevCell) {\r\n        leftCornerCell = gridCopy[0][0];\r\n      } else {\r\n        leftCornerCell = this.getCell(gridCopy, basicRow, basicCol, this.columns);\r\n\r\n        if (!leftCornerCell) {\r\n          const rowShift = this.isMobileLayout ? 1 : 2;\r\n          leftCornerCell = this.getCell(gridCopy, basicRow + rowShift, 0, this.columns);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!prevCell) {\r\n      leftCornerCell = this.getCellByPosition(basicRow, 0);\r\n      rightCornerCell = this.getCellByPosition(basicRow + rowSpan - 1, 1);\r\n    } else if (colSpan === 2) {\r\n      leftCornerCell = this.getCellByPosition(basicRow + 1, 0);\r\n      rightCornerCell = this.getCellByPosition(basicRow + rowSpan, 1);\r\n    }\r\n\r\n    return {\r\n      start: leftCornerCell,\r\n      end: rightCornerCell\r\n    };\r\n  };\r\n\r\n  public getBasicRow(prevCell): any {\r\n    let basicRow;\r\n\r\n    if (this.isMobileLayout) {\r\n      if (prevCell) {\r\n        basicRow = prevCell && prevCell.row || 0;\r\n      } else {\r\n        basicRow = 0;\r\n      }\r\n    } else {\r\n      if (prevCell) {\r\n        basicRow = prevCell.row % 2 === 0 ? prevCell.row : prevCell.row - 1;\r\n      } else {\r\n        basicRow = 0;\r\n      }\r\n    }\r\n\r\n    return basicRow;\r\n  };\r\n\r\n  public isCellFree(row, col): any {\r\n    return !this.gridCells[row][col].elem;\r\n  };\r\n\r\n  public getCellIndex(srcCell): any {\r\n    const self = this;\r\n    let index;\r\n\r\n    this.gridCells.forEach((row, rowIndex) => {\r\n      index = _.findIndex(self.gridCells[rowIndex], (cell) => {\r\n        return cell === srcCell;\r\n      });\r\n\r\n      if (index !== -1) {\r\n        return;\r\n      }\r\n    });\r\n\r\n    return index !== -1 ? index : 0;\r\n  };\r\n\r\n  public reserveCells(start, end, elem) {\r\n    this.gridCells.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        if (cell.row >= start.row && cell.row <= end.row &&\r\n          cell.col >= start.col && cell.col <= end.col) {\r\n          cell.elem = elem;\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  public clearElements() {\r\n    this.gridCells.forEach((row) => {\r\n      row.forEach((tile) => {\r\n        tile.elem = null;\r\n      });\r\n    });\r\n  };\r\n\r\n  public setAvailableColumns(columns): any {\r\n    this.isMobileLayout = columns === MOBILE_LAYOUT_COLUMNS;\r\n    this.columns = columns;\r\n\r\n    return this;\r\n  };\r\n\r\n  public generateGrid(singleTileWidth ? ): any {\r\n    const self = this,\r\n      tileWidth = singleTileWidth || this.opts.tileWidth,\r\n      offset = document.querySelector('.pip-draggable-group-title').getBoundingClientRect();\r\n    let colsInRow = 0,\r\n      rows = 0,\r\n      gridInRow = [];\r\n\r\n    this.gridCells = [];\r\n\r\n    this.tiles.forEach((tile, index, srcTiles) => {\r\n      const tileSize = tile.getSize();\r\n\r\n      generateCells(tileSize.colSpan);\r\n\r\n      if (srcTiles.length === index + 1) {\r\n        if (colsInRow < self.columns) {\r\n          generateCells(self.columns - colsInRow);\r\n        }\r\n\r\n        // Generate more cells for extends tile size to big\r\n        if (self.tiles.length * 2 > self.gridCells.length) {\r\n          Array.apply(null, Array(self.tiles.length * 2 - self.gridCells.length)).forEach(() => {\r\n            generateCells(self.columns);\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    function generateCells(newCellCount) {\r\n      Array.apply(null, Array(newCellCount)).forEach(() => {\r\n        if (self.columns < colsInRow + 1) {\r\n          rows++;\r\n          colsInRow = 0;\r\n\r\n          self.gridCells.push(gridInRow);\r\n          gridInRow = [];\r\n        }\r\n\r\n        let top = rows * self.opts.tileHeight + (rows ? rows * self.opts.gutter : 0) + offset.height;\r\n        let left = colsInRow * tileWidth + (colsInRow ? colsInRow * self.opts.gutter : 0);\r\n\r\n        // Describe grid cell size through block corners coordinates\r\n        gridInRow.push({\r\n          top: top,\r\n          left: left,\r\n          bottom: top + self.opts.tileHeight,\r\n          right: left + tileWidth,\r\n          row: rows,\r\n          col: colsInRow\r\n        });\r\n\r\n        colsInRow++;\r\n      });\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  public setTilesDimensions(onlyPosition, draggedTile): any {\r\n    const self = this;\r\n    let currIndex = 0;\r\n    let prevCell;\r\n\r\n    if (onlyPosition) {\r\n      self.clearElements();\r\n    }\r\n\r\n    this.tiles.forEach((tile) => {\r\n      const tileSize = tile.getSize();\r\n      let startCell;\r\n      let width;\r\n      let height;\r\n      let cells;\r\n\r\n      tile.updateElem('.pip-draggable-tile');\r\n      if (tileSize.colSpan === 1) {\r\n        if (prevCell && prevCell.elem.size.colSpan === 2 && prevCell.elem.size.rowSpan === 1) {\r\n          startCell = self.getCells(self.getCellByPosition(prevCell.row, prevCell.col - 1), 1, 1).start;\r\n        } else {\r\n          startCell = self.getCells(prevCell, 1, 1).start;\r\n        }\r\n\r\n\r\n        if (!onlyPosition) {\r\n          width = startCell.right - startCell.left;\r\n          height = startCell.bottom - startCell.top;\r\n        }\r\n\r\n        prevCell = startCell;\r\n\r\n        self.reserveCells(startCell, startCell, tile);\r\n\r\n        currIndex++;\r\n      } else if (tileSize.colSpan === 2) {\r\n        cells = self.getCells(prevCell, tileSize.rowSpan, tileSize.colSpan);\r\n        startCell = cells.start;\r\n\r\n        if (!onlyPosition) {\r\n          width = cells.end.right - cells.start.left;\r\n          height = cells.end.bottom - cells.start.top;\r\n        }\r\n\r\n        prevCell = cells.end;\r\n\r\n        self.reserveCells(cells.start, cells.end, tile);\r\n\r\n        currIndex += 2;\r\n      }\r\n\r\n      // Render preview\r\n      // while tiles from group is dragged\r\n      if (draggedTile === tile) {\r\n        tile.setPreviewPosition({\r\n          left: startCell.left,\r\n          top: startCell.top\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      if (!onlyPosition) {\r\n        tile.setSize(width, height);\r\n      }\r\n\r\n      tile.setPosition(startCell.left, startCell.top);\r\n    });\r\n\r\n    return this;\r\n  };\r\n\r\n  public calcContainerHeight(): any {\r\n    let maxHeightSize, maxWidthSize;\r\n\r\n    if (!this.tiles.length) {\r\n      return this;\r\n    }\r\n\r\n    maxHeightSize = _.maxBy(this.tiles, (tile) => {\r\n      const tileSize = tile['getSize']();\r\n      return tileSize.top + tileSize.height;\r\n    })['getSize']();\r\n\r\n    this.elem.style.height = maxHeightSize.top + maxHeightSize.height + 'px';\r\n\r\n    if (this.inline) {\r\n      maxWidthSize = _.maxBy(this.tiles, (tile) => {\r\n        const tileSize = tile['getSize']();\r\n        return tileSize.left + tileSize.width;\r\n      })['getSize']();\r\n\r\n      this.elem.style.width = maxWidthSize.left + maxWidthSize.width + 'px';\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  public getTileByNode(node): any {\r\n    const foundTile = this.tiles.filter((tile) => {\r\n      return node === tile.getElem();\r\n    });\r\n\r\n    return foundTile.length ? foundTile[0] : null;\r\n  };\r\n\r\n  public getTileByCoordinates(coords, draggedTile): any {\r\n    return this.tiles\r\n      .filter((tile) => {\r\n        const tileSize = tile.getSize();\r\n\r\n        return tile !== draggedTile &&\r\n          tileSize.left <= coords.left && coords.left <= (tileSize.left + tileSize.width) &&\r\n          tileSize.top <= coords.top && coords.top <= (tileSize.top + tileSize.height);\r\n      })[0] || null;\r\n  };\r\n\r\n  public getTileIndex(tile): any {\r\n    return _.findIndex(this.tiles, tile);\r\n  };\r\n\r\n  public swapTiles(movedTile, beforeTile): any {\r\n    const movedTileIndex = _.findIndex(this.tiles, movedTile);\r\n    const beforeTileIndex = _.findIndex(this.tiles, beforeTile);\r\n\r\n    this.tiles.splice(movedTileIndex, 1);\r\n    this.tiles.splice(beforeTileIndex, 0, movedTile);\r\n\r\n    return this;\r\n  };\r\n\r\n  public removeTile(removeTile): any {\r\n    let droppedTile;\r\n\r\n    this.tiles.forEach((tile, index, tiles) => {\r\n      if (tile === removeTile) {\r\n        droppedTile = tiles.splice(index, 1)[0];\r\n        return false;\r\n      }\r\n    });\r\n\r\n    return droppedTile;\r\n  };\r\n\r\n  public updateTileOptions(opts): any {\r\n    const index = _.findIndex(this.tiles, (tile) => {\r\n      return tile['getOptions']() === opts;\r\n    });\r\n\r\n    if (index !== -1) {\r\n      this.tiles[index].setOptions(opts);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n}\r\n\r\n{\r\n  angular\r\n    .module('pipDraggableTilesGroup', [])\r\n    .service('pipTilesGrid', function () {\r\n      return function (tiles, options, columns, elem) {\r\n        const newGrid = new TilesGridService(tiles, options, columns, elem);\r\n\r\n        return newGrid;\r\n      }\r\n    });\r\n}","\r\nconsole.log('here 1');\r\nangular\r\n    .module('pipDraggableTilesGroup', []);\r\n\r\nconsole.log('pipDraggableTilesGroup defined');\r\n\r\nimport './TileGroupDirective';\r\nimport './TileGroupService';","export interface ITileTemplateService {\r\n    getTemplate(source, tpl ? , tileScope ? , strictCompile ? ): any;\r\n    setImageMarginCSS($element, image): void;\r\n} \r\n\r\n{\r\n    class tileTemplateService implements ITileTemplateService {\r\n        private _$interpolate: angular.IInterpolateService;\r\n        private _$compile: angular.ICompileService;\r\n        private _$templateRequest: angular.ITemplateRequestService;\r\n\r\n        constructor(\r\n            $interpolate: angular.IInterpolateService,\r\n            $compile: angular.ICompileService,\r\n            $templateRequest: angular.ITemplateRequestService\r\n        ) {\r\n            this._$interpolate = $interpolate;\r\n            this._$compile = $compile;\r\n            this._$templateRequest = $templateRequest;\r\n        }\r\n\r\n        public getTemplate(source, tpl ? , tileScope ? , strictCompile ? ): any {\r\n            const {\r\n                template,\r\n                templateUrl,\r\n                type\r\n            } = source;\r\n            let result;\r\n\r\n            if (type) {\r\n                const interpolated = tpl ? this._$interpolate(tpl)(source) : this._$interpolate(template)(source);\r\n                return strictCompile == true ?\r\n                    (tileScope ? this._$compile(interpolated)(tileScope) : this._$compile(interpolated)) :\r\n                    interpolated;\r\n            }\r\n\r\n            if (template) {\r\n                return tileScope ? this._$compile(template)(tileScope) : this._$compile(template);\r\n            }\r\n\r\n            if (templateUrl) {\r\n                this._$templateRequest(templateUrl, false).then((html) => {\r\n                    result = tileScope ? this._$compile(html)(tileScope) : this._$compile(html);\r\n                });\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public setImageMarginCSS($element, image) {\r\n            let\r\n                containerWidth = $element.width ? $element.width() : $element.clientWidth,\r\n                containerHeight = $element.height ? $element.height() : $element.clientHeight,\r\n                imageWidth = (image[0] ? image[0].naturalWidth : image.naturalWidth) || image.width,\r\n                imageHeight = (image[0] ? image[0].naturalHeight : image.naturalWidth) || image.height,\r\n                margin = 0,\r\n                cssParams = {};\r\n\r\n            if ((imageWidth / containerWidth) > (imageHeight / containerHeight)) {\r\n                margin = -((imageWidth / imageHeight * containerHeight - containerWidth) / 2);\r\n                cssParams['margin-left'] = '' + margin + 'px';\r\n                cssParams['height'] = '' + containerHeight + 'px'; //'100%';\r\n                cssParams['width'] = '' + imageWidth * containerHeight / imageHeight + 'px'; //'100%';\r\n                cssParams['margin-top'] = '';\r\n            } else {\r\n                margin = -((imageHeight / imageWidth * containerWidth - containerHeight) / 2);\r\n                cssParams['margin-top'] = '' + margin + 'px';\r\n                cssParams['height'] = '' + imageHeight * containerWidth / imageWidth + 'px'; //'100%';\r\n                cssParams['width'] = '' + containerWidth + 'px'; //'100%';\r\n                cssParams['margin-left'] = '';\r\n            }\r\n\r\n            $(image).css(cssParams);\r\n        }\r\n    }\r\n\r\n    // image load directive TODO: remove to pipImageUtils\r\n    const ImageLoad = function ImageLoad($parse: ng.IParseService): ng.IDirective {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope: ng.IScope, element: JQuery, attrs: any) {\r\n                const callback = $parse(attrs.pipImageLoad);\r\n\r\n                element.bind('load', (event) => {\r\n                    callback(scope, {\r\n                        $event: event\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module('pipDashboard')\r\n        .service('pipTileTemplate', tileTemplateService)\r\n        .directive('pipImageLoad', ImageLoad);\r\n}","(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('add_tile_dialog/AddTile.html',\n    '<md-dialog class=\"pip-dialog pip-add-component-dialog\"><md-dialog-content class=\"layout-column\"><div class=\"theme-divider p16 flex-auto\"><h3 class=\"hide-xs m0 bm16 theme-text-primary\" hide-xs=\"\">{{ \\'DASHBOARD_ADD_TILE_DIALOG_TITLE\\' | translate }}<md-input-container class=\"layout-row flex-auto m0 tm16\"><md-select class=\"flex-auto m0 theme-text-primary\" ng-model=\"dialogCtrl.activeGroupIndex\" placeholder=\"{{ \\'DASHBOARD_ADD_TILE_DIALOG_CREATE_NEW_GROUP\\' | translate }}\" aria-label=\"Group\"><md-option ng-value=\"$index\" ng-repeat=\"group in dialogCtrl.groups\">{{ group }}</md-option></md-select></md-input-container></h3></div><div class=\"pip-body pip-scroll p0 flex-auto\"><p class=\"md-body-1 theme-text-secondary m0 lp16 rp16\">{{ \\'DASHBOARD_ADD_TILE_DIALOG_USE_HOT_KEYS\\' | translate }}</p><md-list ng-init=\"groupIndex = $index\" ng-repeat=\"group in dialogCtrl.defaultWidgets\"><md-list-item class=\"layout-row pip-list-item lp16 rp16\" ng-repeat=\"item in group\"><div class=\"icon-holder flex-none\"><md-icon md-svg-icon=\"icons:{{:: item.icon }}\"></md-icon><div class=\"pip-badge theme-badge md-warn\" ng-if=\"item.amount\"><span>{{ item.amount }}</span></div></div><span class=\"flex-auto lm24 theme-text-primary\">{{:: item.title }}</span><md-button class=\"md-icon-button flex-none\" ng-click=\"dialogCtrl.encrease(groupIndex, $index)\" aria-label=\"Encrease\"><md-icon md-svg-icon=\"icons:plus-circle\"></md-icon></md-button><md-button class=\"md-icon-button flex-none\" ng-click=\"dialogCtrl.decrease(groupIndex, $index)\" aria-label=\"Decrease\"><md-icon md-svg-icon=\"icons:minus-circle\"></md-icon></md-button></md-list-item><md-divider class=\"lm72 tm8 bm8\" ng-if=\"groupIndex !== (dialogCtrl.defaultWidgets.length - 1)\"></md-divider></md-list></div></md-dialog-content><md-dialog-actions class=\"flex-none layout-align-end-center theme-divider divider-top theme-text-primary\"><md-button ng-click=\"dialogCtrl.cancel()\" aria-label=\"Cancel\">{{ \\'CANCEL\\' | translate }}</md-button><md-button ng-click=\"dialogCtrl.add()\" ng-disabled=\"dialogCtrl.totalWidgets === 0\" arial-label=\"Add\">{{ \\'ADD\\' | translate }}</md-button></md-dialog-actions></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('calendar_tile/CalendarTile.html',\n    '<div class=\"widget-box pip-calendar-widget {{ $ctrl.color }} layout-column layout-fill tp0\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\"><div class=\"widget-heading layout-row layout-align-end-center flex-none\"><pip-menu-widget></pip-menu-widget></div><div class=\"widget-content flex-auto layout-row layout-align-center-center\" ng-if=\"$ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1\"><span class=\"date lm24 rm12\">{{ $ctrl.options.date.getDate() }}</span><div class=\"flex-auto layout-column\"><span class=\"weekday md-headline\">{{ $ctrl.options.date | formatLongDayOfWeek }}</span> <span class=\"month-year md-headline\">{{ $ctrl.options.date | formatLongMonth }} {{ $ctrl.options.date | formatYear }}</span></div></div><div class=\"widget-content flex-auto layout-column layout-align-space-around-center\" ng-hide=\"$ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1\"><span class=\"weekday md-headline\" ng-hide=\"$ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1\">{{ $ctrl.options.date | formatLongDayOfWeek }}</span> <span class=\"weekday\" ng-show=\"$ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1\">{{ $ctrl.options.date | formatLongDayOfWeek }}</span> <span class=\"date lm12 rm12\">{{ $ctrl.options.date.getDate() }}</span> <span class=\"month-year md-headline\">{{ $ctrl.options.date | formatLongMonth }} {{ $ctrl.options.date | formatYear }}</span></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('calendar_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch bm16\">Date:<md-datepicker ng-model=\"$ctrl.date\" class=\"w-stretch\"></md-datepicker></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('config_tile_dialog/ConfigDialog.html',\n    '<md-dialog class=\"pip-dialog pip-tile-config-dialog {{ vm.params.dialogClass }}\" width=\"400\" md-theme=\"{{vm.theme}}\"><pip-tile-config-extend-component class=\"layout-column\" pip-dialog-scope=\"vm\" pip-extension-url=\"vm.extensionUrl\" pip-apply=\"vm.onApply(updatedData)\"></pip-tile-config-extend-component></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('config_tile_dialog/ConfigDialogExtendComponent.html',\n    '<h3 class=\"tm0 flex-none\">{{ \\'DASHBOARD_TILE_CONFIG_DIALOG_TITLE\\' | translate }}</h3><div class=\"pip-body pip-scroll p16 bp0 flex-auto\"><pip-extension-point></pip-extension-point><pip-toggle-buttons class=\"bm16\" ng-if=\"!$ctrl.hideSizes\" pip-buttons=\"$ctrl.sizes\" ng-model=\"$ctrl.sizeId\"></pip-toggle-buttons><pip-color-picker ng-if=\"!$ctrl.hideColors\" pip-colors=\"$ctrl.colors\" ng-model=\"$ctrl.color\"></pip-color-picker></div><div class=\"pip-footer flex-none\"><div><md-button class=\"md-accent\" ng-click=\"$ctrl.onCancel()\">{{ \\'CANCEL\\' | translate }}</md-button><md-button class=\"md-accent\" ng-click=\"$ctrl.onApply()\">{{ \\'APPLY\\' | translate }}</md-button></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('dashboard/Dashboard.html',\n    '<md-button class=\"md-accent md-raised md-fab layout-column layout-align-center-center\" aria-label=\"Add component\" ng-click=\"$ctrl.addComponent()\"><md-icon md-svg-icon=\"icons:plus\" class=\"md-headline centered-add-icon\"></md-icon></md-button><div class=\"pip-draggable-grid-holder\"><pip-draggable-grid pip-tiles-templates=\"$ctrl.groupedWidgets\" pip-tiles-context=\"$ctrl.widgetsContext\" pip-draggable-grid=\"$ctrl.draggableGridOptions\" pip-group-menu-actions=\"$ctrl.groupMenuActions\"></pip-draggable-grid><md-progress-circular md-mode=\"indeterminate\" class=\"progress-ring\"></md-progress-circular></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('draggable/Draggable.html',\n    '<div class=\"pip-draggable-holder\"><div class=\"pip-draggable-group\" ng-repeat=\"group in $ctrl.groups\" data-group-id=\"{{ $index }}\" pip-draggable-tiles=\"group.source\"><div class=\"pip-draggable-group-title layout-row layout-align-start-center\"><div class=\"title-input-container\" ng-click=\"$ctrl.onTitleClick(group, $event)\"><input ng-if=\"group.editingName\" ng-blur=\"$ctrl.onBlurTitleInput(group)\" ng-keypress=\"$ctrl.onKyepressTitleInput(group, $event)\" ng-model=\"group.title\"><div class=\"text-overflow flex-none\" ng-if=\"!group.editingName\">{{ group.title }}</div></div><md-button class=\"md-icon-button flex-none layout-align-center-center\" ng-show=\"group.editingName\" ng-click=\"$ctrl.cancelEditing(group)\" aria-label=\"Cancel\"><md-icon md-svg-icon=\"icons:cross\"></md-icon></md-button><md-menu class=\"flex-none layout-column\" md-position-mode=\"target-right target\" ng-show=\"!group.editingName\"><md-button class=\"md-icon-button flex-none layout-align-center-center\" ng-click=\"$mdOpenMenu(); groupId = $index\" aria-label=\"Menu\"><md-icon md-svg-icon=\"icons:dots\"></md-icon></md-button><md-menu-content width=\"4\"><md-menu-item ng-repeat=\"action in $ctrl.groupMenuActions\"><md-button ng-click=\"action.callback(groupId)\">{{ action.title }}</md-button></md-menu-item></md-menu-content></md-menu></div></div><div class=\"pip-draggable-group fict-group layout-align-center-center layout-column tm16\"><div class=\"fict-group-text-container\"><md-icon md-svg-icon=\"icons:plus\"></md-icon>{{ \\'DROP_TO_CREATE_NEW_GROUP\\' | translate }}</div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('event_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch\"><md-input-container class=\"w-stretch bm0\"><label>Title:</label> <input type=\"text\" ng-model=\"$ctrl.title\"></md-input-container>Date:<md-datepicker ng-model=\"$ctrl.date\" class=\"w-stretch bm8\"></md-datepicker><md-input-container class=\"w-stretch\"><label>Description:</label> <textarea type=\"text\" ng-model=\"$ctrl.text\">\\n' +\n    '    </textarea></md-input-container>Backdrop\\'s opacity:<md-slider aria-label=\"opacity\" type=\"number\" min=\"0.1\" max=\"0.9\" step=\"0.01\" ng-model=\"$ctrl.opacity\" ng-change=\"$ctrl.onOpacitytest($ctrl.opacity)\"></md-slider></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('event_tile/EventTile.html',\n    '<div class=\"widget-box pip-event-widget {{ $ctrl.color }} layout-column layout-fill\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\"><img ng-if=\"$ctrl.options.image\" ng-src=\"{{$ctrl.options.image}}\" alt=\"{{$ctrl.options.title || $ctrl.options.name}}\"><div class=\"text-backdrop\" style=\"background-color: rgba(0, 0, 0, {{ $ctrl.opacity }})\"><div class=\"widget-heading layout-row layout-align-start-center flex-none\"><span class=\"widget-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span><pip-menu-widget ng-if=\"!$ctrl.options.hideMenu\"></pip-menu-widget></div><div class=\"text-container flex-auto pip-scroll\"><p class=\"date flex-none\" ng-if=\"$ctrl.options.date\">{{ $ctrl.options.date | formatShortDate }}</p><p class=\"text flex-auto\">{{ $ctrl.options.text || $ctrl.options.description }}</p></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('menu_tile/MenuTile.html',\n    '<md-menu class=\"widget-menu\" md-position-mode=\"target-right target\"><md-button class=\"md-icon-button flex-none\" ng-click=\"$mdOpenMenu()\" aria-label=\"Menu\"><md-icon md-svg-icon=\"icons:vdots\"></md-icon></md-button><md-menu-content width=\"4\"><md-menu-item ng-repeat=\"item in $ctrl.menu\"><md-button ng-if=\"!item.submenu\" ng-click=\"$ctrl.callAction(item.action, item.params, item)\">{{:: item.title }}</md-button><md-menu ng-if=\"item.submenu\"><md-button ng-click=\"$ctrl.callAction(item.action)\">{{:: item.title }}</md-button><md-menu-content><md-menu-item ng-repeat=\"subitem in item.submenu\"><md-button ng-click=\"$ctrl.callAction(subitem.action, subitem.params, subitem)\">{{:: subitem.title }}</md-button></md-menu-item></md-menu-content></md-menu></md-menu-item></md-menu-content></md-menu>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('note_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch\"><md-input-container class=\"w-stretch bm0\"><label>Title:</label> <input type=\"text\" ng-model=\"$ctrl.title\"></md-input-container><md-input-container class=\"w-stretch tm0\"><label>Text:</label> <textarea type=\"text\" ng-model=\"$ctrl.text\">\\n' +\n    '    </textarea></md-input-container></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('note_tile/NoteTile.html',\n    '<div class=\"widget-box pip-notes-widget {{ $ctrl.color }} layout-column\"><div class=\"widget-heading layout-row layout-align-start-center flex-none\" ng-if=\"$ctrl.options.title || $ctrl.options.name\"><span class=\"widget-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span></div><pip-menu-widget ng-if=\"!$ctrl.options.hideMenu\"></pip-menu-widget><div class=\"text-container flex-auto pip-scroll\"><p>{{ $ctrl.options.text }}</p></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('position_tile/ConfigDialogExtension.html',\n    '<div class=\"w-stretch\"><md-input-container class=\"w-stretch bm0\"><label>Location name:</label> <input type=\"text\" ng-model=\"$ctrl.locationName\"></md-input-container></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('position_tile/PositionTile.html',\n    '<div class=\"pip-position-widget widget-box p0 layout-column layout-fill\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\" index=\"{{ $ctrl.index }}\" group=\"{{ $ctrl.group }}\"><div class=\"position-absolute-right-top\" ng-if=\"!$ctrl.options.locationName\"><pip-menu-widget ng-if=\"!$ctrl.options.hideMenu\"></pip-menu-widget></div><div class=\"widget-heading lp16 rp8 layout-row layout-align-end-center flex-none\" ng-if=\"$ctrl.options.locationName\"><span class=\"flex text-overflow\">{{ $ctrl.options.locationName }}</span><pip-menu-widget ng-if=\"!$ctrl.options.hideMenu\"></pip-menu-widget></div><pip-location-map class=\"flex\" ng-if=\"$ctrl.showPosition\" pip-stretch=\"true\" pip-rebind=\"true\" pip-location-pos=\"$ctrl.options.location\"></pip-location-map></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('picture_slider_tile/PictureSliderTile.html',\n    '<div class=\"widget-box pip-picture-slider-widget {{ $ctrl.color }} layout-column layout-fill\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\" index=\"{{ $ctrl.index }}\" group=\"{{ $ctrl.group }}\"><div class=\"widget-heading lp16 rp8 layout-row layout-align-end-center flex-none\"><span class=\"flex text-overflow\">{{ $ctrl.options.title }}</span><pip-menu-widget ng-if=\"!$ctrl.options.hideMenu\"></pip-menu-widget></div><div class=\"slider-container\"><div pip-image-slider=\"\" pip-animation-type=\"\\'fading\\'\" pip-animation-interval=\"$ctrl.animationInterval\" ng-if=\"$ctrl.animationType == \\'fading\\'\"><div class=\"pip-animation-block\" ng-repeat=\"slide in $ctrl.options.slides\"><img ng-src=\"{{ slide.image }}\" alt=\"{{ slide.image }}\" pip-image-load=\"$ctrl.onImageLoad($event)\"><p class=\"slide-text\" ng-if=\"slide.text\">{{ slide.text }}</p></div></div><div pip-image-slider=\"\" pip-animation-type=\"\\'carousel\\'\" pip-animation-interval=\"$ctrl.animationInterval\" ng-if=\"$ctrl.animationType == \\'carousel\\'\"><div class=\"pip-animation-block\" ng-repeat=\"slide in $ctrl.options.slides\"><img ng-src=\"{{ slide.image }}\" alt=\"{{ slide.image }}\" pip-image-load=\"$ctrl.onImageLoad($event)\"><p class=\"slide-text\" ng-if=\"slide.text\">{{ slide.text }}</p></div></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDashboard.Templates');\n} catch (e) {\n  module = angular.module('pipDashboard.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('statistics_tile/StatisticsTile.html',\n    '<div class=\"widget-box pip-statistics-widget layout-column layout-fill\" ng-class=\"{ small: $ctrl.options.size.colSpan == 1 && $ctrl.options.size.rowSpan == 1, medium: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 1, big: $ctrl.options.size.colSpan == 2 && $ctrl.options.size.rowSpan == 2 }\"><div class=\"widget-heading layout-row layout-align-start-center flex-none\"><span class=\"widget-title flex-auto text-overflow\">{{ $ctrl.options.title || $ctrl.options.name }}</span><pip-menu-widget></pip-menu-widget></div><div class=\"widget-content flex-auto layout-row layout-align-center-center\" ng-if=\"$ctrl.options.series && !$ctrl.reset\"><pip-pie-chart pip-series=\"$ctrl.options.series\" ng-if=\"!$ctrl.options.chartType || $ctrl.options.chartType == \\'pie\\'\" pip-donut=\"true\" pip-pie-size=\"$ctrl.chartSize\" pip-show-total=\"true\" pip-centered=\"true\"></pip-pie-chart></div></div>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-dashboard-html.min.js.map\n"]}